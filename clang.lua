---Automatically generated bindings generated by ffi-to-lls.lua (https://github.com/Frityet/ffi-to-lls/)
---You can edit this file!
---The following prefix was removed: `clang_`
---Lua language server will autocomplete both with and without the prefix.
---@meta clang

---You may remove this to supress redefinition warnings
---@class c.pointer<T> : { [integer] : T }, ffi.cdata*
---@class clang
local clang = {}

---@alias time_t integer

---@enum CXErrorCode
local CXErrorCode = {
    CXError_Success = 0,
    CXError_Failure = 1,
    CXError_Crashed = 2,
    CXError_InvalidArguments = 3,
    CXError_ASTReadError = 4,
}

clang.CXError_Success = CXErrorCode.CXError_Success
clang.CXError_Failure = CXErrorCode.CXError_Failure
clang.CXError_Crashed = CXErrorCode.CXError_Crashed
clang.CXError_InvalidArguments = CXErrorCode.CXError_InvalidArguments
clang.CXError_ASTReadError = CXErrorCode.CXError_ASTReadError

---@class CXString
---@field data ffi.cdata*
---@field private_flags integer

---@alias CXString CXString

---@class CXStringSet
---@field Strings c.pointer<CXString>?
---@field Count integer

---@alias CXStringSet CXStringSet

---@param string CXString
---@return string
function clang.clang_getCString(string) end
clang.getCString = clang.clang_getCString

---@param string CXString
---@return nil
function clang.clang_disposeString(string) end
clang.disposeString = clang.clang_disposeString

---@param set c.pointer<CXStringSet>?
---@return nil
function clang.clang_disposeStringSet(set) end
clang.disposeStringSet = clang.clang_disposeStringSet

---@return integer
function clang.clang_getBuildSessionTimestamp() end
clang.getBuildSessionTimestamp = clang.clang_getBuildSessionTimestamp

---@class CXVirtualFileOverlayImpl

---@alias CXVirtualFileOverlay c.pointer<CXVirtualFileOverlayImpl>?

---@param options integer
---@return CXVirtualFileOverlay
function clang.clang_VirtualFileOverlay_create(options) end
clang.VirtualFileOverlay_create = clang.clang_VirtualFileOverlay_create

---@param arg_1 CXVirtualFileOverlay
---@param virtualPath string
---@param realPath string
---@return CXErrorCode
function clang.clang_VirtualFileOverlay_addFileMapping(arg_1, virtualPath, realPath) end
clang.VirtualFileOverlay_addFileMapping = clang.clang_VirtualFileOverlay_addFileMapping

---@param arg_1 CXVirtualFileOverlay
---@param caseSensitive integer
---@return CXErrorCode
function clang.clang_VirtualFileOverlay_setCaseSensitivity(arg_1, caseSensitive) end
clang.VirtualFileOverlay_setCaseSensitivity = clang.clang_VirtualFileOverlay_setCaseSensitivity

---@param arg_1 CXVirtualFileOverlay
---@param options integer
---@param out_buffer_ptr c.pointer<string>?
---@param out_buffer_size c.pointer<integer>?
---@return CXErrorCode
function clang.clang_VirtualFileOverlay_writeToBuffer(arg_1, options, out_buffer_ptr, out_buffer_size) end
clang.VirtualFileOverlay_writeToBuffer = clang.clang_VirtualFileOverlay_writeToBuffer

---@param buffer ffi.cdata*
---@return nil
function clang.clang_free(buffer) end
clang.free = clang.clang_free

---@param arg_1 CXVirtualFileOverlay
---@return nil
function clang.clang_VirtualFileOverlay_dispose(arg_1) end
clang.VirtualFileOverlay_dispose = clang.clang_VirtualFileOverlay_dispose

---@class CXModuleMapDescriptorImpl

---@alias CXModuleMapDescriptor c.pointer<CXModuleMapDescriptorImpl>?

---@param options integer
---@return CXModuleMapDescriptor
function clang.clang_ModuleMapDescriptor_create(options) end
clang.ModuleMapDescriptor_create = clang.clang_ModuleMapDescriptor_create

---@param arg_1 CXModuleMapDescriptor
---@param name string
---@return CXErrorCode
function clang.clang_ModuleMapDescriptor_setFrameworkModuleName(arg_1, name) end
clang.ModuleMapDescriptor_setFrameworkModuleName = clang.clang_ModuleMapDescriptor_setFrameworkModuleName

---@param arg_1 CXModuleMapDescriptor
---@param name string
---@return CXErrorCode
function clang.clang_ModuleMapDescriptor_setUmbrellaHeader(arg_1, name) end
clang.ModuleMapDescriptor_setUmbrellaHeader = clang.clang_ModuleMapDescriptor_setUmbrellaHeader

---@param arg_1 CXModuleMapDescriptor
---@param options integer
---@param out_buffer_ptr c.pointer<string>?
---@param out_buffer_size c.pointer<integer>?
---@return CXErrorCode
function clang.clang_ModuleMapDescriptor_writeToBuffer(arg_1, options, out_buffer_ptr, out_buffer_size) end
clang.ModuleMapDescriptor_writeToBuffer = clang.clang_ModuleMapDescriptor_writeToBuffer

---@param arg_1 CXModuleMapDescriptor
---@return nil
function clang.clang_ModuleMapDescriptor_dispose(arg_1) end
clang.ModuleMapDescriptor_dispose = clang.clang_ModuleMapDescriptor_dispose

---@alias CXFile ffi.cdata*

---@param SFile CXFile
---@return CXString
function clang.clang_getFileName(SFile) end
clang.getFileName = clang.clang_getFileName

---@param SFile CXFile
---@return time_t
function clang.clang_getFileTime(SFile) end
clang.getFileTime = clang.clang_getFileTime

---@class CXFileUniqueID
---@field data integer[]

---@alias CXFileUniqueID CXFileUniqueID

---@param file CXFile
---@param outID c.pointer<CXFileUniqueID>?
---@return integer
function clang.clang_getFileUniqueID(file, outID) end
clang.getFileUniqueID = clang.clang_getFileUniqueID

---@param file1 CXFile
---@param file2 CXFile
---@return integer
function clang.clang_File_isEqual(file1, file2) end
clang.File_isEqual = clang.clang_File_isEqual

---@param file CXFile
---@return CXString
function clang.clang_File_tryGetRealPathName(file) end
clang.File_tryGetRealPathName = clang.clang_File_tryGetRealPathName

---@class CXSourceLocation
---@field ptr_data ffi.cdata*[]
---@field int_data integer

---@alias CXSourceLocation CXSourceLocation

---@class CXSourceRange
---@field ptr_data ffi.cdata*[]
---@field begin_int_data integer
---@field end_int_data integer

---@alias CXSourceRange CXSourceRange

---@return CXSourceLocation
function clang.clang_getNullLocation() end
clang.getNullLocation = clang.clang_getNullLocation

---@param loc1 CXSourceLocation
---@param loc2 CXSourceLocation
---@return integer
function clang.clang_equalLocations(loc1, loc2) end
clang.equalLocations = clang.clang_equalLocations

---@param location CXSourceLocation
---@return integer
function clang.clang_Location_isInSystemHeader(location) end
clang.Location_isInSystemHeader = clang.clang_Location_isInSystemHeader

---@param location CXSourceLocation
---@return integer
function clang.clang_Location_isFromMainFile(location) end
clang.Location_isFromMainFile = clang.clang_Location_isFromMainFile

---@return CXSourceRange
function clang.clang_getNullRange() end
clang.getNullRange = clang.clang_getNullRange

---@param begin CXSourceLocation
---@param _end CXSourceLocation
---@return CXSourceRange
function clang.clang_getRange(begin, _end) end
clang.getRange = clang.clang_getRange

---@param range1 CXSourceRange
---@param range2 CXSourceRange
---@return integer
function clang.clang_equalRanges(range1, range2) end
clang.equalRanges = clang.clang_equalRanges

---@param range CXSourceRange
---@return integer
function clang.clang_Range_isNull(range) end
clang.Range_isNull = clang.clang_Range_isNull

---@param location CXSourceLocation
---@param file c.pointer<CXFile>?
---@param line c.pointer<integer>?
---@param column c.pointer<integer>?
---@param offset c.pointer<integer>?
---@return nil
function clang.clang_getExpansionLocation(location, file, line, column, offset) end
clang.getExpansionLocation = clang.clang_getExpansionLocation

---@param location CXSourceLocation
---@param filename c.pointer<CXString>?
---@param line c.pointer<integer>?
---@param column c.pointer<integer>?
---@return nil
function clang.clang_getPresumedLocation(location, filename, line, column) end
clang.getPresumedLocation = clang.clang_getPresumedLocation

---@param location CXSourceLocation
---@param file c.pointer<CXFile>?
---@param line c.pointer<integer>?
---@param column c.pointer<integer>?
---@param offset c.pointer<integer>?
---@return nil
function clang.clang_getInstantiationLocation(location, file, line, column, offset) end
clang.getInstantiationLocation = clang.clang_getInstantiationLocation

---@param location CXSourceLocation
---@param file c.pointer<CXFile>?
---@param line c.pointer<integer>?
---@param column c.pointer<integer>?
---@param offset c.pointer<integer>?
---@return nil
function clang.clang_getSpellingLocation(location, file, line, column, offset) end
clang.getSpellingLocation = clang.clang_getSpellingLocation

---@param location CXSourceLocation
---@param file c.pointer<CXFile>?
---@param line c.pointer<integer>?
---@param column c.pointer<integer>?
---@param offset c.pointer<integer>?
---@return nil
function clang.clang_getFileLocation(location, file, line, column, offset) end
clang.getFileLocation = clang.clang_getFileLocation

---@param range CXSourceRange
---@return CXSourceLocation
function clang.clang_getRangeStart(range) end
clang.getRangeStart = clang.clang_getRangeStart

---@param range CXSourceRange
---@return CXSourceLocation
function clang.clang_getRangeEnd(range) end
clang.getRangeEnd = clang.clang_getRangeEnd

---@class CXSourceRangeList
---@field count integer
---@field ranges c.pointer<CXSourceRange>?

---@alias CXSourceRangeList CXSourceRangeList

---@param ranges c.pointer<CXSourceRangeList>?
---@return nil
function clang.clang_disposeSourceRangeList(ranges) end
clang.disposeSourceRangeList = clang.clang_disposeSourceRangeList

---@enum CXDiagnosticSeverity
local CXDiagnosticSeverity = {
    CXDiagnostic_Ignored = 0,
    CXDiagnostic_Note = 1,
    CXDiagnostic_Warning = 2,
    CXDiagnostic_Error = 3,
    CXDiagnostic_Fatal = 4,
}

clang.CXDiagnostic_Ignored = CXDiagnosticSeverity.CXDiagnostic_Ignored
clang.CXDiagnostic_Note = CXDiagnosticSeverity.CXDiagnostic_Note
clang.CXDiagnostic_Warning = CXDiagnosticSeverity.CXDiagnostic_Warning
clang.CXDiagnostic_Error = CXDiagnosticSeverity.CXDiagnostic_Error
clang.CXDiagnostic_Fatal = CXDiagnosticSeverity.CXDiagnostic_Fatal

---@alias CXDiagnostic ffi.cdata*

---@alias CXDiagnosticSet ffi.cdata*

---@param Diags CXDiagnosticSet
---@return integer
function clang.clang_getNumDiagnosticsInSet(Diags) end
clang.getNumDiagnosticsInSet = clang.clang_getNumDiagnosticsInSet

---@param Diags CXDiagnosticSet
---@param Index integer
---@return CXDiagnostic
function clang.clang_getDiagnosticInSet(Diags, Index) end
clang.getDiagnosticInSet = clang.clang_getDiagnosticInSet

---@enum CXLoadDiag_Error
local CXLoadDiag_Error = {
    CXLoadDiag_None = 0,
    CXLoadDiag_Unknown = 1,
    CXLoadDiag_CannotLoad = 2,
    CXLoadDiag_InvalidFile = 3,
}

clang.CXLoadDiag_None = CXLoadDiag_Error.CXLoadDiag_None
clang.CXLoadDiag_Unknown = CXLoadDiag_Error.CXLoadDiag_Unknown
clang.CXLoadDiag_CannotLoad = CXLoadDiag_Error.CXLoadDiag_CannotLoad
clang.CXLoadDiag_InvalidFile = CXLoadDiag_Error.CXLoadDiag_InvalidFile

---@param file string
---@param error c.pointer<CXLoadDiag_Error>?
---@param errorString c.pointer<CXString>?
---@return CXDiagnosticSet
function clang.clang_loadDiagnostics(file, error, errorString) end
clang.loadDiagnostics = clang.clang_loadDiagnostics

---@param Diags CXDiagnosticSet
---@return nil
function clang.clang_disposeDiagnosticSet(Diags) end
clang.disposeDiagnosticSet = clang.clang_disposeDiagnosticSet

---@param D CXDiagnostic
---@return CXDiagnosticSet
function clang.clang_getChildDiagnostics(D) end
clang.getChildDiagnostics = clang.clang_getChildDiagnostics

---@param Diagnostic CXDiagnostic
---@return nil
function clang.clang_disposeDiagnostic(Diagnostic) end
clang.disposeDiagnostic = clang.clang_disposeDiagnostic

---@enum CXDiagnosticDisplayOptions
local CXDiagnosticDisplayOptions = {
    CXDiagnostic_DisplaySourceLocation = 1,
    CXDiagnostic_DisplayColumn = 2,
    CXDiagnostic_DisplaySourceRanges = 4,
    CXDiagnostic_DisplayOption = 8,
    CXDiagnostic_DisplayCategoryId = 16,
    CXDiagnostic_DisplayCategoryName = 32,
}

clang.CXDiagnostic_DisplaySourceLocation = CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceLocation
clang.CXDiagnostic_DisplayColumn = CXDiagnosticDisplayOptions.CXDiagnostic_DisplayColumn
clang.CXDiagnostic_DisplaySourceRanges = CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceRanges
clang.CXDiagnostic_DisplayOption = CXDiagnosticDisplayOptions.CXDiagnostic_DisplayOption
clang.CXDiagnostic_DisplayCategoryId = CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryId
clang.CXDiagnostic_DisplayCategoryName = CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryName

---@param Diagnostic CXDiagnostic
---@param Options integer
---@return CXString
function clang.clang_formatDiagnostic(Diagnostic, Options) end
clang.formatDiagnostic = clang.clang_formatDiagnostic

---@return integer
function clang.clang_defaultDiagnosticDisplayOptions() end
clang.defaultDiagnosticDisplayOptions = clang.clang_defaultDiagnosticDisplayOptions

---@param arg_1 CXDiagnostic
---@return CXDiagnosticSeverity
function clang.clang_getDiagnosticSeverity(arg_1) end
clang.getDiagnosticSeverity = clang.clang_getDiagnosticSeverity

---@param arg_1 CXDiagnostic
---@return CXSourceLocation
function clang.clang_getDiagnosticLocation(arg_1) end
clang.getDiagnosticLocation = clang.clang_getDiagnosticLocation

---@param arg_1 CXDiagnostic
---@return CXString
function clang.clang_getDiagnosticSpelling(arg_1) end
clang.getDiagnosticSpelling = clang.clang_getDiagnosticSpelling

---@param Diag CXDiagnostic
---@param Disable c.pointer<CXString>?
---@return CXString
function clang.clang_getDiagnosticOption(Diag, Disable) end
clang.getDiagnosticOption = clang.clang_getDiagnosticOption

---@param arg_1 CXDiagnostic
---@return integer
function clang.clang_getDiagnosticCategory(arg_1) end
clang.getDiagnosticCategory = clang.clang_getDiagnosticCategory

---@param Category integer
---@return CXString
function clang.clang_getDiagnosticCategoryName(Category) end
clang.getDiagnosticCategoryName = clang.clang_getDiagnosticCategoryName

---@param arg_1 CXDiagnostic
---@return CXString
function clang.clang_getDiagnosticCategoryText(arg_1) end
clang.getDiagnosticCategoryText = clang.clang_getDiagnosticCategoryText

---@param arg_1 CXDiagnostic
---@return integer
function clang.clang_getDiagnosticNumRanges(arg_1) end
clang.getDiagnosticNumRanges = clang.clang_getDiagnosticNumRanges

---@param Diagnostic CXDiagnostic
---@param Range integer
---@return CXSourceRange
function clang.clang_getDiagnosticRange(Diagnostic, Range) end
clang.getDiagnosticRange = clang.clang_getDiagnosticRange

---@param Diagnostic CXDiagnostic
---@return integer
function clang.clang_getDiagnosticNumFixIts(Diagnostic) end
clang.getDiagnosticNumFixIts = clang.clang_getDiagnosticNumFixIts

---@param Diagnostic CXDiagnostic
---@param FixIt integer
---@param ReplacementRange c.pointer<CXSourceRange>?
---@return CXString
function clang.clang_getDiagnosticFixIt(Diagnostic, FixIt, ReplacementRange) end
clang.getDiagnosticFixIt = clang.clang_getDiagnosticFixIt

---@alias CXIndex ffi.cdata*

---@class CXTargetInfoImpl

---@alias CXTargetInfo c.pointer<CXTargetInfoImpl>?

---@class CXTranslationUnitImpl

---@alias CXTranslationUnit c.pointer<CXTranslationUnitImpl>?

---@alias CXClientData ffi.cdata*

---@class CXUnsavedFile
---@field Filename string
---@field Contents string
---@field Length integer

---@enum CXAvailabilityKind
local CXAvailabilityKind = {
    CXAvailability_Available = 0,
    CXAvailability_Deprecated = 1,
    CXAvailability_NotAvailable = 2,
    CXAvailability_NotAccessible = 3,
}

clang.CXAvailability_Available = CXAvailabilityKind.CXAvailability_Available
clang.CXAvailability_Deprecated = CXAvailabilityKind.CXAvailability_Deprecated
clang.CXAvailability_NotAvailable = CXAvailabilityKind.CXAvailability_NotAvailable
clang.CXAvailability_NotAccessible = CXAvailabilityKind.CXAvailability_NotAccessible

---@class CXVersion
---@field Major integer
---@field Minor integer
---@field Subminor integer

---@alias CXVersion CXVersion

---@enum CXCursor_ExceptionSpecificationKind
local CXCursor_ExceptionSpecificationKind = {
    CXCursor_ExceptionSpecificationKind_None = 0,
    CXCursor_ExceptionSpecificationKind_DynamicNone = 1,
    CXCursor_ExceptionSpecificationKind_Dynamic = 2,
    CXCursor_ExceptionSpecificationKind_MSAny = 3,
    CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4,
    CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5,
    CXCursor_ExceptionSpecificationKind_Unevaluated = 6,
    CXCursor_ExceptionSpecificationKind_Uninstantiated = 7,
    CXCursor_ExceptionSpecificationKind_Unparsed = 8,
    CXCursor_ExceptionSpecificationKind_NoThrow = 9,
}

clang.CXCursor_ExceptionSpecificationKind_None = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_None
clang.CXCursor_ExceptionSpecificationKind_DynamicNone = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_DynamicNone
clang.CXCursor_ExceptionSpecificationKind_Dynamic = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Dynamic
clang.CXCursor_ExceptionSpecificationKind_MSAny = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_MSAny
clang.CXCursor_ExceptionSpecificationKind_BasicNoexcept = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_BasicNoexcept
clang.CXCursor_ExceptionSpecificationKind_ComputedNoexcept = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_ComputedNoexcept
clang.CXCursor_ExceptionSpecificationKind_Unevaluated = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unevaluated
clang.CXCursor_ExceptionSpecificationKind_Uninstantiated = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Uninstantiated
clang.CXCursor_ExceptionSpecificationKind_Unparsed = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unparsed
clang.CXCursor_ExceptionSpecificationKind_NoThrow = CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_NoThrow

---@param excludeDeclarationsFromPCH integer
---@param displayDiagnostics integer
---@return CXIndex
function clang.clang_createIndex(excludeDeclarationsFromPCH, displayDiagnostics) end
clang.createIndex = clang.clang_createIndex

---@param index CXIndex
---@return nil
function clang.clang_disposeIndex(index) end
clang.disposeIndex = clang.clang_disposeIndex

---@enum CXChoice
local CXChoice = {
    CXChoice_Default = 0,
    CXChoice_Enabled = 1,
    CXChoice_Disabled = 2,
}

clang.CXChoice_Default = CXChoice.CXChoice_Default
clang.CXChoice_Enabled = CXChoice.CXChoice_Enabled
clang.CXChoice_Disabled = CXChoice.CXChoice_Disabled

---@alias CXChoice CXChoice

---@enum CXGlobalOptFlags
local CXGlobalOptFlags = {
    CXGlobalOpt_None = 0,
    CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 1,
    CXGlobalOpt_ThreadBackgroundPriorityForEditing = 2,
    CXGlobalOpt_ThreadBackgroundPriorityForAll = 3,
}

clang.CXGlobalOpt_None = CXGlobalOptFlags.CXGlobalOpt_None
clang.CXGlobalOpt_ThreadBackgroundPriorityForIndexing = CXGlobalOptFlags.CXGlobalOpt_ThreadBackgroundPriorityForIndexing
clang.CXGlobalOpt_ThreadBackgroundPriorityForEditing = CXGlobalOptFlags.CXGlobalOpt_ThreadBackgroundPriorityForEditing
clang.CXGlobalOpt_ThreadBackgroundPriorityForAll = CXGlobalOptFlags.CXGlobalOpt_ThreadBackgroundPriorityForAll

---@alias CXGlobalOptFlags CXGlobalOptFlags

---@class CXIndexOptions
---@field Size integer
---@field ThreadBackgroundPriorityForIndexing integer
---@field ThreadBackgroundPriorityForEditing integer
---@field ExcludeDeclarationsFromPCH integer
---@field DisplayDiagnostics integer
---@field StorePreamblesInMemory integer
---@field  integer
---@field PreambleStoragePath string
---@field InvocationEmissionPath string

---@alias CXIndexOptions CXIndexOptions

---@param options c.pointer<CXIndexOptions>?
---@return CXIndex
function clang.clang_createIndexWithOptions(options) end
clang.createIndexWithOptions = clang.clang_createIndexWithOptions

---@param arg_1 CXIndex
---@param options integer
---@return nil
function clang.clang_CXIndex_setGlobalOptions(arg_1, options) end
clang.CXIndex_setGlobalOptions = clang.clang_CXIndex_setGlobalOptions

---@param arg_1 CXIndex
---@return integer
function clang.clang_CXIndex_getGlobalOptions(arg_1) end
clang.CXIndex_getGlobalOptions = clang.clang_CXIndex_getGlobalOptions

---@param arg_1 CXIndex
---@param Path string
---@return nil
function clang.clang_CXIndex_setInvocationEmissionPathOption(arg_1, Path) end
clang.CXIndex_setInvocationEmissionPathOption = clang.clang_CXIndex_setInvocationEmissionPathOption

---@param tu CXTranslationUnit
---@param file CXFile
---@return integer
function clang.clang_isFileMultipleIncludeGuarded(tu, file) end
clang.isFileMultipleIncludeGuarded = clang.clang_isFileMultipleIncludeGuarded

---@param tu CXTranslationUnit
---@param file_name string
---@return CXFile
function clang.clang_getFile(tu, file_name) end
clang.getFile = clang.clang_getFile

---@param tu CXTranslationUnit
---@param file CXFile
---@param size c.pointer<integer>?
---@return string
function clang.clang_getFileContents(tu, file, size) end
clang.getFileContents = clang.clang_getFileContents

---@param tu CXTranslationUnit
---@param file CXFile
---@param line integer
---@param column integer
---@return CXSourceLocation
function clang.clang_getLocation(tu, file, line, column) end
clang.getLocation = clang.clang_getLocation

---@param tu CXTranslationUnit
---@param file CXFile
---@param offset integer
---@return CXSourceLocation
function clang.clang_getLocationForOffset(tu, file, offset) end
clang.getLocationForOffset = clang.clang_getLocationForOffset

---@param tu CXTranslationUnit
---@param file CXFile
---@return c.pointer<CXSourceRangeList>?
function clang.clang_getSkippedRanges(tu, file) end
clang.getSkippedRanges = clang.clang_getSkippedRanges

---@param tu CXTranslationUnit
---@return c.pointer<CXSourceRangeList>?
function clang.clang_getAllSkippedRanges(tu) end
clang.getAllSkippedRanges = clang.clang_getAllSkippedRanges

---@param Unit CXTranslationUnit
---@return integer
function clang.clang_getNumDiagnostics(Unit) end
clang.getNumDiagnostics = clang.clang_getNumDiagnostics

---@param Unit CXTranslationUnit
---@param Index integer
---@return CXDiagnostic
function clang.clang_getDiagnostic(Unit, Index) end
clang.getDiagnostic = clang.clang_getDiagnostic

---@param Unit CXTranslationUnit
---@return CXDiagnosticSet
function clang.clang_getDiagnosticSetFromTU(Unit) end
clang.getDiagnosticSetFromTU = clang.clang_getDiagnosticSetFromTU

---@param CTUnit CXTranslationUnit
---@return CXString
function clang.clang_getTranslationUnitSpelling(CTUnit) end
clang.getTranslationUnitSpelling = clang.clang_getTranslationUnitSpelling

---@param CIdx CXIndex
---@param source_filename string
---@param num_clang_command_line_args integer
---@param clang_command_line_args c.pointer<string>?
---@param num_unsaved_files integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@return CXTranslationUnit
function clang.clang_createTranslationUnitFromSourceFile(CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files) end
clang.createTranslationUnitFromSourceFile = clang.clang_createTranslationUnitFromSourceFile

---@param CIdx CXIndex
---@param ast_filename string
---@return CXTranslationUnit
function clang.clang_createTranslationUnit(CIdx, ast_filename) end
clang.createTranslationUnit = clang.clang_createTranslationUnit

---@param CIdx CXIndex
---@param ast_filename string
---@param out_TU c.pointer<CXTranslationUnit>?
---@return CXErrorCode
function clang.clang_createTranslationUnit2(CIdx, ast_filename, out_TU) end
clang.createTranslationUnit2 = clang.clang_createTranslationUnit2

---@enum CXTranslationUnit_Flags
local CXTranslationUnit_Flags = {
    CXTranslationUnit_None = 0,
    CXTranslationUnit_DetailedPreprocessingRecord = 1,
    CXTranslationUnit_Incomplete = 2,
    CXTranslationUnit_PrecompiledPreamble = 4,
    CXTranslationUnit_CacheCompletionResults = 8,
    CXTranslationUnit_ForSerialization = 16,
    CXTranslationUnit_CXXChainedPCH = 32,
    CXTranslationUnit_SkipFunctionBodies = 64,
    CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128,
    CXTranslationUnit_CreatePreambleOnFirstParse = 256,
    CXTranslationUnit_KeepGoing = 512,
    CXTranslationUnit_SingleFileParse = 1024,
    CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048,
    CXTranslationUnit_IncludeAttributedTypes = 4096,
    CXTranslationUnit_VisitImplicitAttributes = 8192,
    CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384,
    CXTranslationUnit_RetainExcludedConditionalBlocks = 32768,
}

clang.CXTranslationUnit_None = CXTranslationUnit_Flags.CXTranslationUnit_None
clang.CXTranslationUnit_DetailedPreprocessingRecord = CXTranslationUnit_Flags.CXTranslationUnit_DetailedPreprocessingRecord
clang.CXTranslationUnit_Incomplete = CXTranslationUnit_Flags.CXTranslationUnit_Incomplete
clang.CXTranslationUnit_PrecompiledPreamble = CXTranslationUnit_Flags.CXTranslationUnit_PrecompiledPreamble
clang.CXTranslationUnit_CacheCompletionResults = CXTranslationUnit_Flags.CXTranslationUnit_CacheCompletionResults
clang.CXTranslationUnit_ForSerialization = CXTranslationUnit_Flags.CXTranslationUnit_ForSerialization
clang.CXTranslationUnit_CXXChainedPCH = CXTranslationUnit_Flags.CXTranslationUnit_CXXChainedPCH
clang.CXTranslationUnit_SkipFunctionBodies = CXTranslationUnit_Flags.CXTranslationUnit_SkipFunctionBodies
clang.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = CXTranslationUnit_Flags.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion
clang.CXTranslationUnit_CreatePreambleOnFirstParse = CXTranslationUnit_Flags.CXTranslationUnit_CreatePreambleOnFirstParse
clang.CXTranslationUnit_KeepGoing = CXTranslationUnit_Flags.CXTranslationUnit_KeepGoing
clang.CXTranslationUnit_SingleFileParse = CXTranslationUnit_Flags.CXTranslationUnit_SingleFileParse
clang.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = CXTranslationUnit_Flags.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble
clang.CXTranslationUnit_IncludeAttributedTypes = CXTranslationUnit_Flags.CXTranslationUnit_IncludeAttributedTypes
clang.CXTranslationUnit_VisitImplicitAttributes = CXTranslationUnit_Flags.CXTranslationUnit_VisitImplicitAttributes
clang.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = CXTranslationUnit_Flags.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles
clang.CXTranslationUnit_RetainExcludedConditionalBlocks = CXTranslationUnit_Flags.CXTranslationUnit_RetainExcludedConditionalBlocks

---@return integer
function clang.clang_defaultEditingTranslationUnitOptions() end
clang.defaultEditingTranslationUnitOptions = clang.clang_defaultEditingTranslationUnitOptions

---@param CIdx CXIndex
---@param source_filename string
---@param command_line_args c.pointer<string>?
---@param num_command_line_args integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param num_unsaved_files integer
---@param options integer
---@return CXTranslationUnit
function clang.clang_parseTranslationUnit(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options) end
clang.parseTranslationUnit = clang.clang_parseTranslationUnit

---@param CIdx CXIndex
---@param source_filename string
---@param command_line_args c.pointer<string>?
---@param num_command_line_args integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param num_unsaved_files integer
---@param options integer
---@param out_TU c.pointer<CXTranslationUnit>?
---@return CXErrorCode
function clang.clang_parseTranslationUnit2(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU) end
clang.parseTranslationUnit2 = clang.clang_parseTranslationUnit2

---@param CIdx CXIndex
---@param source_filename string
---@param command_line_args c.pointer<string>?
---@param num_command_line_args integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param num_unsaved_files integer
---@param options integer
---@param out_TU c.pointer<CXTranslationUnit>?
---@return CXErrorCode
function clang.clang_parseTranslationUnit2FullArgv(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU) end
clang.parseTranslationUnit2FullArgv = clang.clang_parseTranslationUnit2FullArgv

---@enum CXSaveTranslationUnit_Flags
local CXSaveTranslationUnit_Flags = {
    CXSaveTranslationUnit_None = 0,
}

clang.CXSaveTranslationUnit_None = CXSaveTranslationUnit_Flags.CXSaveTranslationUnit_None

---@param TU CXTranslationUnit
---@return integer
function clang.clang_defaultSaveOptions(TU) end
clang.defaultSaveOptions = clang.clang_defaultSaveOptions

---@enum CXSaveError
local CXSaveError = {
    CXSaveError_None = 0,
    CXSaveError_Unknown = 1,
    CXSaveError_TranslationErrors = 2,
    CXSaveError_InvalidTU = 3,
}

clang.CXSaveError_None = CXSaveError.CXSaveError_None
clang.CXSaveError_Unknown = CXSaveError.CXSaveError_Unknown
clang.CXSaveError_TranslationErrors = CXSaveError.CXSaveError_TranslationErrors
clang.CXSaveError_InvalidTU = CXSaveError.CXSaveError_InvalidTU

---@param TU CXTranslationUnit
---@param FileName string
---@param options integer
---@return integer
function clang.clang_saveTranslationUnit(TU, FileName, options) end
clang.saveTranslationUnit = clang.clang_saveTranslationUnit

---@param arg_1 CXTranslationUnit
---@return integer
function clang.clang_suspendTranslationUnit(arg_1) end
clang.suspendTranslationUnit = clang.clang_suspendTranslationUnit

---@param arg_1 CXTranslationUnit
---@return nil
function clang.clang_disposeTranslationUnit(arg_1) end
clang.disposeTranslationUnit = clang.clang_disposeTranslationUnit

---@enum CXReparse_Flags
local CXReparse_Flags = {
    CXReparse_None = 0,
}

clang.CXReparse_None = CXReparse_Flags.CXReparse_None

---@param TU CXTranslationUnit
---@return integer
function clang.clang_defaultReparseOptions(TU) end
clang.defaultReparseOptions = clang.clang_defaultReparseOptions

---@param TU CXTranslationUnit
---@param num_unsaved_files integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param options integer
---@return integer
function clang.clang_reparseTranslationUnit(TU, num_unsaved_files, unsaved_files, options) end
clang.reparseTranslationUnit = clang.clang_reparseTranslationUnit

---@enum CXTUResourceUsageKind
local CXTUResourceUsageKind = {
    CXTUResourceUsage_AST = 1,
    CXTUResourceUsage_Identifiers = 2,
    CXTUResourceUsage_Selectors = 3,
    CXTUResourceUsage_GlobalCompletionResults = 4,
    CXTUResourceUsage_SourceManagerContentCache = 5,
    CXTUResourceUsage_AST_SideTables = 6,
    CXTUResourceUsage_SourceManager_Membuffer_Malloc = 7,
    CXTUResourceUsage_SourceManager_Membuffer_MMap = 8,
    CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 9,
    CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 10,
    CXTUResourceUsage_Preprocessor = 11,
    CXTUResourceUsage_PreprocessingRecord = 12,
    CXTUResourceUsage_SourceManager_DataStructures = 13,
    CXTUResourceUsage_Preprocessor_HeaderSearch = 14,
    CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = 1,
    CXTUResourceUsage_MEMORY_IN_BYTES_END = 14,
    CXTUResourceUsage_First = 1,
    CXTUResourceUsage_Last = 14,
}

clang.CXTUResourceUsage_AST = CXTUResourceUsageKind.CXTUResourceUsage_AST
clang.CXTUResourceUsage_Identifiers = CXTUResourceUsageKind.CXTUResourceUsage_Identifiers
clang.CXTUResourceUsage_Selectors = CXTUResourceUsageKind.CXTUResourceUsage_Selectors
clang.CXTUResourceUsage_GlobalCompletionResults = CXTUResourceUsageKind.CXTUResourceUsage_GlobalCompletionResults
clang.CXTUResourceUsage_SourceManagerContentCache = CXTUResourceUsageKind.CXTUResourceUsage_SourceManagerContentCache
clang.CXTUResourceUsage_AST_SideTables = CXTUResourceUsageKind.CXTUResourceUsage_AST_SideTables
clang.CXTUResourceUsage_SourceManager_Membuffer_Malloc = CXTUResourceUsageKind.CXTUResourceUsage_SourceManager_Membuffer_Malloc
clang.CXTUResourceUsage_SourceManager_Membuffer_MMap = CXTUResourceUsageKind.CXTUResourceUsage_SourceManager_Membuffer_MMap
clang.CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = CXTUResourceUsageKind.CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc
clang.CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = CXTUResourceUsageKind.CXTUResourceUsage_ExternalASTSource_Membuffer_MMap
clang.CXTUResourceUsage_Preprocessor = CXTUResourceUsageKind.CXTUResourceUsage_Preprocessor
clang.CXTUResourceUsage_PreprocessingRecord = CXTUResourceUsageKind.CXTUResourceUsage_PreprocessingRecord
clang.CXTUResourceUsage_SourceManager_DataStructures = CXTUResourceUsageKind.CXTUResourceUsage_SourceManager_DataStructures
clang.CXTUResourceUsage_Preprocessor_HeaderSearch = CXTUResourceUsageKind.CXTUResourceUsage_Preprocessor_HeaderSearch
clang.CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = CXTUResourceUsageKind.CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN
clang.CXTUResourceUsage_MEMORY_IN_BYTES_END = CXTUResourceUsageKind.CXTUResourceUsage_MEMORY_IN_BYTES_END
clang.CXTUResourceUsage_First = CXTUResourceUsageKind.CXTUResourceUsage_First
clang.CXTUResourceUsage_Last = CXTUResourceUsageKind.CXTUResourceUsage_Last

---@param kind CXTUResourceUsageKind
---@return string
function clang.clang_getTUResourceUsageName(kind) end
clang.getTUResourceUsageName = clang.clang_getTUResourceUsageName

---@class CXTUResourceUsageEntry
---@field kind CXTUResourceUsageKind
---@field amount integer

---@alias CXTUResourceUsageEntry CXTUResourceUsageEntry

---@class CXTUResourceUsage
---@field data ffi.cdata*
---@field numEntries integer
---@field entries c.pointer<CXTUResourceUsageEntry>?

---@alias CXTUResourceUsage CXTUResourceUsage

---@param TU CXTranslationUnit
---@return CXTUResourceUsage
function clang.clang_getCXTUResourceUsage(TU) end
clang.getCXTUResourceUsage = clang.clang_getCXTUResourceUsage

---@param usage CXTUResourceUsage
---@return nil
function clang.clang_disposeCXTUResourceUsage(usage) end
clang.disposeCXTUResourceUsage = clang.clang_disposeCXTUResourceUsage

---@param CTUnit CXTranslationUnit
---@return CXTargetInfo
function clang.clang_getTranslationUnitTargetInfo(CTUnit) end
clang.getTranslationUnitTargetInfo = clang.clang_getTranslationUnitTargetInfo

---@param Info CXTargetInfo
---@return nil
function clang.clang_TargetInfo_dispose(Info) end
clang.TargetInfo_dispose = clang.clang_TargetInfo_dispose

---@param Info CXTargetInfo
---@return CXString
function clang.clang_TargetInfo_getTriple(Info) end
clang.TargetInfo_getTriple = clang.clang_TargetInfo_getTriple

---@param Info CXTargetInfo
---@return integer
function clang.clang_TargetInfo_getPointerWidth(Info) end
clang.TargetInfo_getPointerWidth = clang.clang_TargetInfo_getPointerWidth

---@enum CXCursorKind
local CXCursorKind = {
    CXCursor_UnexposedDecl = 1,
    CXCursor_StructDecl = 2,
    CXCursor_UnionDecl = 3,
    CXCursor_ClassDecl = 4,
    CXCursor_EnumDecl = 5,
    CXCursor_FieldDecl = 6,
    CXCursor_EnumConstantDecl = 7,
    CXCursor_FunctionDecl = 8,
    CXCursor_VarDecl = 9,
    CXCursor_ParmDecl = 10,
    CXCursor_ObjCInterfaceDecl = 11,
    CXCursor_ObjCCategoryDecl = 12,
    CXCursor_ObjCProtocolDecl = 13,
    CXCursor_ObjCPropertyDecl = 14,
    CXCursor_ObjCIvarDecl = 15,
    CXCursor_ObjCInstanceMethodDecl = 16,
    CXCursor_ObjCClassMethodDecl = 17,
    CXCursor_ObjCImplementationDecl = 18,
    CXCursor_ObjCCategoryImplDecl = 19,
    CXCursor_TypedefDecl = 20,
    CXCursor_CXXMethod = 21,
    CXCursor_Namespace = 22,
    CXCursor_LinkageSpec = 23,
    CXCursor_Constructor = 24,
    CXCursor_Destructor = 25,
    CXCursor_ConversionFunction = 26,
    CXCursor_TemplateTypeParameter = 27,
    CXCursor_NonTypeTemplateParameter = 28,
    CXCursor_TemplateTemplateParameter = 29,
    CXCursor_FunctionTemplate = 30,
    CXCursor_ClassTemplate = 31,
    CXCursor_ClassTemplatePartialSpecialization = 32,
    CXCursor_NamespaceAlias = 33,
    CXCursor_UsingDirective = 34,
    CXCursor_UsingDeclaration = 35,
    CXCursor_TypeAliasDecl = 36,
    CXCursor_ObjCSynthesizeDecl = 37,
    CXCursor_ObjCDynamicDecl = 38,
    CXCursor_CXXAccessSpecifier = 39,
    CXCursor_FirstDecl = 1,
    CXCursor_LastDecl = 39,
    CXCursor_FirstRef = 40,
    CXCursor_ObjCSuperClassRef = 40,
    CXCursor_ObjCProtocolRef = 41,
    CXCursor_ObjCClassRef = 42,
    CXCursor_TypeRef = 43,
    CXCursor_CXXBaseSpecifier = 44,
    CXCursor_TemplateRef = 45,
    CXCursor_NamespaceRef = 46,
    CXCursor_MemberRef = 47,
    CXCursor_LabelRef = 48,
    CXCursor_OverloadedDeclRef = 49,
    CXCursor_VariableRef = 50,
    CXCursor_LastRef = 50,
    CXCursor_FirstInvalid = 70,
    CXCursor_InvalidFile = 70,
    CXCursor_NoDeclFound = 71,
    CXCursor_NotImplemented = 72,
    CXCursor_InvalidCode = 73,
    CXCursor_LastInvalid = 73,
    CXCursor_FirstExpr = 100,
    CXCursor_UnexposedExpr = 100,
    CXCursor_DeclRefExpr = 101,
    CXCursor_MemberRefExpr = 102,
    CXCursor_CallExpr = 103,
    CXCursor_ObjCMessageExpr = 104,
    CXCursor_BlockExpr = 105,
    CXCursor_IntegerLiteral = 106,
    CXCursor_FloatingLiteral = 107,
    CXCursor_ImaginaryLiteral = 108,
    CXCursor_StringLiteral = 109,
    CXCursor_CharacterLiteral = 110,
    CXCursor_ParenExpr = 111,
    CXCursor_UnaryOperator = 112,
    CXCursor_ArraySubscriptExpr = 113,
    CXCursor_BinaryOperator = 114,
    CXCursor_CompoundAssignOperator = 115,
    CXCursor_ConditionalOperator = 116,
    CXCursor_CStyleCastExpr = 117,
    CXCursor_CompoundLiteralExpr = 118,
    CXCursor_InitListExpr = 119,
    CXCursor_AddrLabelExpr = 120,
    CXCursor_StmtExpr = 121,
    CXCursor_GenericSelectionExpr = 122,
    CXCursor_GNUNullExpr = 123,
    CXCursor_CXXStaticCastExpr = 124,
    CXCursor_CXXDynamicCastExpr = 125,
    CXCursor_CXXReinterpretCastExpr = 126,
    CXCursor_CXXConstCastExpr = 127,
    CXCursor_CXXFunctionalCastExpr = 128,
    CXCursor_CXXTypeidExpr = 129,
    CXCursor_CXXBoolLiteralExpr = 130,
    CXCursor_CXXNullPtrLiteralExpr = 131,
    CXCursor_CXXThisExpr = 132,
    CXCursor_CXXThrowExpr = 133,
    CXCursor_CXXNewExpr = 134,
    CXCursor_CXXDeleteExpr = 135,
    CXCursor_UnaryExpr = 136,
    CXCursor_ObjCStringLiteral = 137,
    CXCursor_ObjCEncodeExpr = 138,
    CXCursor_ObjCSelectorExpr = 139,
    CXCursor_ObjCProtocolExpr = 140,
    CXCursor_ObjCBridgedCastExpr = 141,
    CXCursor_PackExpansionExpr = 142,
    CXCursor_SizeOfPackExpr = 143,
    CXCursor_LambdaExpr = 144,
    CXCursor_ObjCBoolLiteralExpr = 145,
    CXCursor_ObjCSelfExpr = 146,
    CXCursor_OMPArraySectionExpr = 147,
    CXCursor_ObjCAvailabilityCheckExpr = 148,
    CXCursor_FixedPointLiteral = 149,
    CXCursor_OMPArrayShapingExpr = 150,
    CXCursor_OMPIteratorExpr = 151,
    CXCursor_CXXAddrspaceCastExpr = 152,
    CXCursor_ConceptSpecializationExpr = 153,
    CXCursor_RequiresExpr = 154,
    CXCursor_CXXParenListInitExpr = 155,
    CXCursor_LastExpr = 155,
    CXCursor_FirstStmt = 200,
    CXCursor_UnexposedStmt = 200,
    CXCursor_LabelStmt = 201,
    CXCursor_CompoundStmt = 202,
    CXCursor_CaseStmt = 203,
    CXCursor_DefaultStmt = 204,
    CXCursor_IfStmt = 205,
    CXCursor_SwitchStmt = 206,
    CXCursor_WhileStmt = 207,
    CXCursor_DoStmt = 208,
    CXCursor_ForStmt = 209,
    CXCursor_GotoStmt = 210,
    CXCursor_IndirectGotoStmt = 211,
    CXCursor_ContinueStmt = 212,
    CXCursor_BreakStmt = 213,
    CXCursor_ReturnStmt = 214,
    CXCursor_GCCAsmStmt = 215,
    CXCursor_AsmStmt = 215,
    CXCursor_ObjCAtTryStmt = 216,
    CXCursor_ObjCAtCatchStmt = 217,
    CXCursor_ObjCAtFinallyStmt = 218,
    CXCursor_ObjCAtThrowStmt = 219,
    CXCursor_ObjCAtSynchronizedStmt = 220,
    CXCursor_ObjCAutoreleasePoolStmt = 221,
    CXCursor_ObjCForCollectionStmt = 222,
    CXCursor_CXXCatchStmt = 223,
    CXCursor_CXXTryStmt = 224,
    CXCursor_CXXForRangeStmt = 225,
    CXCursor_SEHTryStmt = 226,
    CXCursor_SEHExceptStmt = 227,
    CXCursor_SEHFinallyStmt = 228,
    CXCursor_MSAsmStmt = 229,
    CXCursor_NullStmt = 230,
    CXCursor_DeclStmt = 231,
    CXCursor_OMPParallelDirective = 232,
    CXCursor_OMPSimdDirective = 233,
    CXCursor_OMPForDirective = 234,
    CXCursor_OMPSectionsDirective = 235,
    CXCursor_OMPSectionDirective = 236,
    CXCursor_OMPSingleDirective = 237,
    CXCursor_OMPParallelForDirective = 238,
    CXCursor_OMPParallelSectionsDirective = 239,
    CXCursor_OMPTaskDirective = 240,
    CXCursor_OMPMasterDirective = 241,
    CXCursor_OMPCriticalDirective = 242,
    CXCursor_OMPTaskyieldDirective = 243,
    CXCursor_OMPBarrierDirective = 244,
    CXCursor_OMPTaskwaitDirective = 245,
    CXCursor_OMPFlushDirective = 246,
    CXCursor_SEHLeaveStmt = 247,
    CXCursor_OMPOrderedDirective = 248,
    CXCursor_OMPAtomicDirective = 249,
    CXCursor_OMPForSimdDirective = 250,
    CXCursor_OMPParallelForSimdDirective = 251,
    CXCursor_OMPTargetDirective = 252,
    CXCursor_OMPTeamsDirective = 253,
    CXCursor_OMPTaskgroupDirective = 254,
    CXCursor_OMPCancellationPointDirective = 255,
    CXCursor_OMPCancelDirective = 256,
    CXCursor_OMPTargetDataDirective = 257,
    CXCursor_OMPTaskLoopDirective = 258,
    CXCursor_OMPTaskLoopSimdDirective = 259,
    CXCursor_OMPDistributeDirective = 260,
    CXCursor_OMPTargetEnterDataDirective = 261,
    CXCursor_OMPTargetExitDataDirective = 262,
    CXCursor_OMPTargetParallelDirective = 263,
    CXCursor_OMPTargetParallelForDirective = 264,
    CXCursor_OMPTargetUpdateDirective = 265,
    CXCursor_OMPDistributeParallelForDirective = 266,
    CXCursor_OMPDistributeParallelForSimdDirective = 267,
    CXCursor_OMPDistributeSimdDirective = 268,
    CXCursor_OMPTargetParallelForSimdDirective = 269,
    CXCursor_OMPTargetSimdDirective = 270,
    CXCursor_OMPTeamsDistributeDirective = 271,
    CXCursor_OMPTeamsDistributeSimdDirective = 272,
    CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273,
    CXCursor_OMPTeamsDistributeParallelForDirective = 274,
    CXCursor_OMPTargetTeamsDirective = 275,
    CXCursor_OMPTargetTeamsDistributeDirective = 276,
    CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277,
    CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278,
    CXCursor_OMPTargetTeamsDistributeSimdDirective = 279,
    CXCursor_BuiltinBitCastExpr = 280,
    CXCursor_OMPMasterTaskLoopDirective = 281,
    CXCursor_OMPParallelMasterTaskLoopDirective = 282,
    CXCursor_OMPMasterTaskLoopSimdDirective = 283,
    CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284,
    CXCursor_OMPParallelMasterDirective = 285,
    CXCursor_OMPDepobjDirective = 286,
    CXCursor_OMPScanDirective = 287,
    CXCursor_OMPTileDirective = 288,
    CXCursor_OMPCanonicalLoop = 289,
    CXCursor_OMPInteropDirective = 290,
    CXCursor_OMPDispatchDirective = 291,
    CXCursor_OMPMaskedDirective = 292,
    CXCursor_OMPUnrollDirective = 293,
    CXCursor_OMPMetaDirective = 294,
    CXCursor_OMPGenericLoopDirective = 295,
    CXCursor_OMPTeamsGenericLoopDirective = 296,
    CXCursor_OMPTargetTeamsGenericLoopDirective = 297,
    CXCursor_OMPParallelGenericLoopDirective = 298,
    CXCursor_OMPTargetParallelGenericLoopDirective = 299,
    CXCursor_OMPParallelMaskedDirective = 300,
    CXCursor_OMPMaskedTaskLoopDirective = 301,
    CXCursor_OMPMaskedTaskLoopSimdDirective = 302,
    CXCursor_OMPParallelMaskedTaskLoopDirective = 303,
    CXCursor_OMPParallelMaskedTaskLoopSimdDirective = 304,
    CXCursor_OMPErrorDirective = 305,
    CXCursor_OMPScopeDirective = 306,
    CXCursor_LastStmt = 306,
    CXCursor_TranslationUnit = 350,
    CXCursor_FirstAttr = 400,
    CXCursor_UnexposedAttr = 400,
    CXCursor_IBActionAttr = 401,
    CXCursor_IBOutletAttr = 402,
    CXCursor_IBOutletCollectionAttr = 403,
    CXCursor_CXXFinalAttr = 404,
    CXCursor_CXXOverrideAttr = 405,
    CXCursor_AnnotateAttr = 406,
    CXCursor_AsmLabelAttr = 407,
    CXCursor_PackedAttr = 408,
    CXCursor_PureAttr = 409,
    CXCursor_ConstAttr = 410,
    CXCursor_NoDuplicateAttr = 411,
    CXCursor_CUDAConstantAttr = 412,
    CXCursor_CUDADeviceAttr = 413,
    CXCursor_CUDAGlobalAttr = 414,
    CXCursor_CUDAHostAttr = 415,
    CXCursor_CUDASharedAttr = 416,
    CXCursor_VisibilityAttr = 417,
    CXCursor_DLLExport = 418,
    CXCursor_DLLImport = 419,
    CXCursor_NSReturnsRetained = 420,
    CXCursor_NSReturnsNotRetained = 421,
    CXCursor_NSReturnsAutoreleased = 422,
    CXCursor_NSConsumesSelf = 423,
    CXCursor_NSConsumed = 424,
    CXCursor_ObjCException = 425,
    CXCursor_ObjCNSObject = 426,
    CXCursor_ObjCIndependentClass = 427,
    CXCursor_ObjCPreciseLifetime = 428,
    CXCursor_ObjCReturnsInnerPointer = 429,
    CXCursor_ObjCRequiresSuper = 430,
    CXCursor_ObjCRootClass = 431,
    CXCursor_ObjCSubclassingRestricted = 432,
    CXCursor_ObjCExplicitProtocolImpl = 433,
    CXCursor_ObjCDesignatedInitializer = 434,
    CXCursor_ObjCRuntimeVisible = 435,
    CXCursor_ObjCBoxable = 436,
    CXCursor_FlagEnum = 437,
    CXCursor_ConvergentAttr = 438,
    CXCursor_WarnUnusedAttr = 439,
    CXCursor_WarnUnusedResultAttr = 440,
    CXCursor_AlignedAttr = 441,
    CXCursor_LastAttr = 441,
    CXCursor_PreprocessingDirective = 500,
    CXCursor_MacroDefinition = 501,
    CXCursor_MacroExpansion = 502,
    CXCursor_MacroInstantiation = 502,
    CXCursor_InclusionDirective = 503,
    CXCursor_FirstPreprocessing = 500,
    CXCursor_LastPreprocessing = 503,
    CXCursor_ModuleImportDecl = 600,
    CXCursor_TypeAliasTemplateDecl = 601,
    CXCursor_StaticAssert = 602,
    CXCursor_FriendDecl = 603,
    CXCursor_ConceptDecl = 604,
    CXCursor_FirstExtraDecl = 600,
    CXCursor_LastExtraDecl = 604,
    CXCursor_OverloadCandidate = 700,
}

clang.CXCursor_UnexposedDecl = CXCursorKind.CXCursor_UnexposedDecl
clang.CXCursor_StructDecl = CXCursorKind.CXCursor_StructDecl
clang.CXCursor_UnionDecl = CXCursorKind.CXCursor_UnionDecl
clang.CXCursor_ClassDecl = CXCursorKind.CXCursor_ClassDecl
clang.CXCursor_EnumDecl = CXCursorKind.CXCursor_EnumDecl
clang.CXCursor_FieldDecl = CXCursorKind.CXCursor_FieldDecl
clang.CXCursor_EnumConstantDecl = CXCursorKind.CXCursor_EnumConstantDecl
clang.CXCursor_FunctionDecl = CXCursorKind.CXCursor_FunctionDecl
clang.CXCursor_VarDecl = CXCursorKind.CXCursor_VarDecl
clang.CXCursor_ParmDecl = CXCursorKind.CXCursor_ParmDecl
clang.CXCursor_ObjCInterfaceDecl = CXCursorKind.CXCursor_ObjCInterfaceDecl
clang.CXCursor_ObjCCategoryDecl = CXCursorKind.CXCursor_ObjCCategoryDecl
clang.CXCursor_ObjCProtocolDecl = CXCursorKind.CXCursor_ObjCProtocolDecl
clang.CXCursor_ObjCPropertyDecl = CXCursorKind.CXCursor_ObjCPropertyDecl
clang.CXCursor_ObjCIvarDecl = CXCursorKind.CXCursor_ObjCIvarDecl
clang.CXCursor_ObjCInstanceMethodDecl = CXCursorKind.CXCursor_ObjCInstanceMethodDecl
clang.CXCursor_ObjCClassMethodDecl = CXCursorKind.CXCursor_ObjCClassMethodDecl
clang.CXCursor_ObjCImplementationDecl = CXCursorKind.CXCursor_ObjCImplementationDecl
clang.CXCursor_ObjCCategoryImplDecl = CXCursorKind.CXCursor_ObjCCategoryImplDecl
clang.CXCursor_TypedefDecl = CXCursorKind.CXCursor_TypedefDecl
clang.CXCursor_CXXMethod = CXCursorKind.CXCursor_CXXMethod
clang.CXCursor_Namespace = CXCursorKind.CXCursor_Namespace
clang.CXCursor_LinkageSpec = CXCursorKind.CXCursor_LinkageSpec
clang.CXCursor_Constructor = CXCursorKind.CXCursor_Constructor
clang.CXCursor_Destructor = CXCursorKind.CXCursor_Destructor
clang.CXCursor_ConversionFunction = CXCursorKind.CXCursor_ConversionFunction
clang.CXCursor_TemplateTypeParameter = CXCursorKind.CXCursor_TemplateTypeParameter
clang.CXCursor_NonTypeTemplateParameter = CXCursorKind.CXCursor_NonTypeTemplateParameter
clang.CXCursor_TemplateTemplateParameter = CXCursorKind.CXCursor_TemplateTemplateParameter
clang.CXCursor_FunctionTemplate = CXCursorKind.CXCursor_FunctionTemplate
clang.CXCursor_ClassTemplate = CXCursorKind.CXCursor_ClassTemplate
clang.CXCursor_ClassTemplatePartialSpecialization = CXCursorKind.CXCursor_ClassTemplatePartialSpecialization
clang.CXCursor_NamespaceAlias = CXCursorKind.CXCursor_NamespaceAlias
clang.CXCursor_UsingDirective = CXCursorKind.CXCursor_UsingDirective
clang.CXCursor_UsingDeclaration = CXCursorKind.CXCursor_UsingDeclaration
clang.CXCursor_TypeAliasDecl = CXCursorKind.CXCursor_TypeAliasDecl
clang.CXCursor_ObjCSynthesizeDecl = CXCursorKind.CXCursor_ObjCSynthesizeDecl
clang.CXCursor_ObjCDynamicDecl = CXCursorKind.CXCursor_ObjCDynamicDecl
clang.CXCursor_CXXAccessSpecifier = CXCursorKind.CXCursor_CXXAccessSpecifier
clang.CXCursor_FirstDecl = CXCursorKind.CXCursor_FirstDecl
clang.CXCursor_LastDecl = CXCursorKind.CXCursor_LastDecl
clang.CXCursor_FirstRef = CXCursorKind.CXCursor_FirstRef
clang.CXCursor_ObjCSuperClassRef = CXCursorKind.CXCursor_ObjCSuperClassRef
clang.CXCursor_ObjCProtocolRef = CXCursorKind.CXCursor_ObjCProtocolRef
clang.CXCursor_ObjCClassRef = CXCursorKind.CXCursor_ObjCClassRef
clang.CXCursor_TypeRef = CXCursorKind.CXCursor_TypeRef
clang.CXCursor_CXXBaseSpecifier = CXCursorKind.CXCursor_CXXBaseSpecifier
clang.CXCursor_TemplateRef = CXCursorKind.CXCursor_TemplateRef
clang.CXCursor_NamespaceRef = CXCursorKind.CXCursor_NamespaceRef
clang.CXCursor_MemberRef = CXCursorKind.CXCursor_MemberRef
clang.CXCursor_LabelRef = CXCursorKind.CXCursor_LabelRef
clang.CXCursor_OverloadedDeclRef = CXCursorKind.CXCursor_OverloadedDeclRef
clang.CXCursor_VariableRef = CXCursorKind.CXCursor_VariableRef
clang.CXCursor_LastRef = CXCursorKind.CXCursor_LastRef
clang.CXCursor_FirstInvalid = CXCursorKind.CXCursor_FirstInvalid
clang.CXCursor_InvalidFile = CXCursorKind.CXCursor_InvalidFile
clang.CXCursor_NoDeclFound = CXCursorKind.CXCursor_NoDeclFound
clang.CXCursor_NotImplemented = CXCursorKind.CXCursor_NotImplemented
clang.CXCursor_InvalidCode = CXCursorKind.CXCursor_InvalidCode
clang.CXCursor_LastInvalid = CXCursorKind.CXCursor_LastInvalid
clang.CXCursor_FirstExpr = CXCursorKind.CXCursor_FirstExpr
clang.CXCursor_UnexposedExpr = CXCursorKind.CXCursor_UnexposedExpr
clang.CXCursor_DeclRefExpr = CXCursorKind.CXCursor_DeclRefExpr
clang.CXCursor_MemberRefExpr = CXCursorKind.CXCursor_MemberRefExpr
clang.CXCursor_CallExpr = CXCursorKind.CXCursor_CallExpr
clang.CXCursor_ObjCMessageExpr = CXCursorKind.CXCursor_ObjCMessageExpr
clang.CXCursor_BlockExpr = CXCursorKind.CXCursor_BlockExpr
clang.CXCursor_IntegerLiteral = CXCursorKind.CXCursor_IntegerLiteral
clang.CXCursor_FloatingLiteral = CXCursorKind.CXCursor_FloatingLiteral
clang.CXCursor_ImaginaryLiteral = CXCursorKind.CXCursor_ImaginaryLiteral
clang.CXCursor_StringLiteral = CXCursorKind.CXCursor_StringLiteral
clang.CXCursor_CharacterLiteral = CXCursorKind.CXCursor_CharacterLiteral
clang.CXCursor_ParenExpr = CXCursorKind.CXCursor_ParenExpr
clang.CXCursor_UnaryOperator = CXCursorKind.CXCursor_UnaryOperator
clang.CXCursor_ArraySubscriptExpr = CXCursorKind.CXCursor_ArraySubscriptExpr
clang.CXCursor_BinaryOperator = CXCursorKind.CXCursor_BinaryOperator
clang.CXCursor_CompoundAssignOperator = CXCursorKind.CXCursor_CompoundAssignOperator
clang.CXCursor_ConditionalOperator = CXCursorKind.CXCursor_ConditionalOperator
clang.CXCursor_CStyleCastExpr = CXCursorKind.CXCursor_CStyleCastExpr
clang.CXCursor_CompoundLiteralExpr = CXCursorKind.CXCursor_CompoundLiteralExpr
clang.CXCursor_InitListExpr = CXCursorKind.CXCursor_InitListExpr
clang.CXCursor_AddrLabelExpr = CXCursorKind.CXCursor_AddrLabelExpr
clang.CXCursor_StmtExpr = CXCursorKind.CXCursor_StmtExpr
clang.CXCursor_GenericSelectionExpr = CXCursorKind.CXCursor_GenericSelectionExpr
clang.CXCursor_GNUNullExpr = CXCursorKind.CXCursor_GNUNullExpr
clang.CXCursor_CXXStaticCastExpr = CXCursorKind.CXCursor_CXXStaticCastExpr
clang.CXCursor_CXXDynamicCastExpr = CXCursorKind.CXCursor_CXXDynamicCastExpr
clang.CXCursor_CXXReinterpretCastExpr = CXCursorKind.CXCursor_CXXReinterpretCastExpr
clang.CXCursor_CXXConstCastExpr = CXCursorKind.CXCursor_CXXConstCastExpr
clang.CXCursor_CXXFunctionalCastExpr = CXCursorKind.CXCursor_CXXFunctionalCastExpr
clang.CXCursor_CXXTypeidExpr = CXCursorKind.CXCursor_CXXTypeidExpr
clang.CXCursor_CXXBoolLiteralExpr = CXCursorKind.CXCursor_CXXBoolLiteralExpr
clang.CXCursor_CXXNullPtrLiteralExpr = CXCursorKind.CXCursor_CXXNullPtrLiteralExpr
clang.CXCursor_CXXThisExpr = CXCursorKind.CXCursor_CXXThisExpr
clang.CXCursor_CXXThrowExpr = CXCursorKind.CXCursor_CXXThrowExpr
clang.CXCursor_CXXNewExpr = CXCursorKind.CXCursor_CXXNewExpr
clang.CXCursor_CXXDeleteExpr = CXCursorKind.CXCursor_CXXDeleteExpr
clang.CXCursor_UnaryExpr = CXCursorKind.CXCursor_UnaryExpr
clang.CXCursor_ObjCStringLiteral = CXCursorKind.CXCursor_ObjCStringLiteral
clang.CXCursor_ObjCEncodeExpr = CXCursorKind.CXCursor_ObjCEncodeExpr
clang.CXCursor_ObjCSelectorExpr = CXCursorKind.CXCursor_ObjCSelectorExpr
clang.CXCursor_ObjCProtocolExpr = CXCursorKind.CXCursor_ObjCProtocolExpr
clang.CXCursor_ObjCBridgedCastExpr = CXCursorKind.CXCursor_ObjCBridgedCastExpr
clang.CXCursor_PackExpansionExpr = CXCursorKind.CXCursor_PackExpansionExpr
clang.CXCursor_SizeOfPackExpr = CXCursorKind.CXCursor_SizeOfPackExpr
clang.CXCursor_LambdaExpr = CXCursorKind.CXCursor_LambdaExpr
clang.CXCursor_ObjCBoolLiteralExpr = CXCursorKind.CXCursor_ObjCBoolLiteralExpr
clang.CXCursor_ObjCSelfExpr = CXCursorKind.CXCursor_ObjCSelfExpr
clang.CXCursor_OMPArraySectionExpr = CXCursorKind.CXCursor_OMPArraySectionExpr
clang.CXCursor_ObjCAvailabilityCheckExpr = CXCursorKind.CXCursor_ObjCAvailabilityCheckExpr
clang.CXCursor_FixedPointLiteral = CXCursorKind.CXCursor_FixedPointLiteral
clang.CXCursor_OMPArrayShapingExpr = CXCursorKind.CXCursor_OMPArrayShapingExpr
clang.CXCursor_OMPIteratorExpr = CXCursorKind.CXCursor_OMPIteratorExpr
clang.CXCursor_CXXAddrspaceCastExpr = CXCursorKind.CXCursor_CXXAddrspaceCastExpr
clang.CXCursor_ConceptSpecializationExpr = CXCursorKind.CXCursor_ConceptSpecializationExpr
clang.CXCursor_RequiresExpr = CXCursorKind.CXCursor_RequiresExpr
clang.CXCursor_CXXParenListInitExpr = CXCursorKind.CXCursor_CXXParenListInitExpr
clang.CXCursor_LastExpr = CXCursorKind.CXCursor_LastExpr
clang.CXCursor_FirstStmt = CXCursorKind.CXCursor_FirstStmt
clang.CXCursor_UnexposedStmt = CXCursorKind.CXCursor_UnexposedStmt
clang.CXCursor_LabelStmt = CXCursorKind.CXCursor_LabelStmt
clang.CXCursor_CompoundStmt = CXCursorKind.CXCursor_CompoundStmt
clang.CXCursor_CaseStmt = CXCursorKind.CXCursor_CaseStmt
clang.CXCursor_DefaultStmt = CXCursorKind.CXCursor_DefaultStmt
clang.CXCursor_IfStmt = CXCursorKind.CXCursor_IfStmt
clang.CXCursor_SwitchStmt = CXCursorKind.CXCursor_SwitchStmt
clang.CXCursor_WhileStmt = CXCursorKind.CXCursor_WhileStmt
clang.CXCursor_DoStmt = CXCursorKind.CXCursor_DoStmt
clang.CXCursor_ForStmt = CXCursorKind.CXCursor_ForStmt
clang.CXCursor_GotoStmt = CXCursorKind.CXCursor_GotoStmt
clang.CXCursor_IndirectGotoStmt = CXCursorKind.CXCursor_IndirectGotoStmt
clang.CXCursor_ContinueStmt = CXCursorKind.CXCursor_ContinueStmt
clang.CXCursor_BreakStmt = CXCursorKind.CXCursor_BreakStmt
clang.CXCursor_ReturnStmt = CXCursorKind.CXCursor_ReturnStmt
clang.CXCursor_GCCAsmStmt = CXCursorKind.CXCursor_GCCAsmStmt
clang.CXCursor_AsmStmt = CXCursorKind.CXCursor_AsmStmt
clang.CXCursor_ObjCAtTryStmt = CXCursorKind.CXCursor_ObjCAtTryStmt
clang.CXCursor_ObjCAtCatchStmt = CXCursorKind.CXCursor_ObjCAtCatchStmt
clang.CXCursor_ObjCAtFinallyStmt = CXCursorKind.CXCursor_ObjCAtFinallyStmt
clang.CXCursor_ObjCAtThrowStmt = CXCursorKind.CXCursor_ObjCAtThrowStmt
clang.CXCursor_ObjCAtSynchronizedStmt = CXCursorKind.CXCursor_ObjCAtSynchronizedStmt
clang.CXCursor_ObjCAutoreleasePoolStmt = CXCursorKind.CXCursor_ObjCAutoreleasePoolStmt
clang.CXCursor_ObjCForCollectionStmt = CXCursorKind.CXCursor_ObjCForCollectionStmt
clang.CXCursor_CXXCatchStmt = CXCursorKind.CXCursor_CXXCatchStmt
clang.CXCursor_CXXTryStmt = CXCursorKind.CXCursor_CXXTryStmt
clang.CXCursor_CXXForRangeStmt = CXCursorKind.CXCursor_CXXForRangeStmt
clang.CXCursor_SEHTryStmt = CXCursorKind.CXCursor_SEHTryStmt
clang.CXCursor_SEHExceptStmt = CXCursorKind.CXCursor_SEHExceptStmt
clang.CXCursor_SEHFinallyStmt = CXCursorKind.CXCursor_SEHFinallyStmt
clang.CXCursor_MSAsmStmt = CXCursorKind.CXCursor_MSAsmStmt
clang.CXCursor_NullStmt = CXCursorKind.CXCursor_NullStmt
clang.CXCursor_DeclStmt = CXCursorKind.CXCursor_DeclStmt
clang.CXCursor_OMPParallelDirective = CXCursorKind.CXCursor_OMPParallelDirective
clang.CXCursor_OMPSimdDirective = CXCursorKind.CXCursor_OMPSimdDirective
clang.CXCursor_OMPForDirective = CXCursorKind.CXCursor_OMPForDirective
clang.CXCursor_OMPSectionsDirective = CXCursorKind.CXCursor_OMPSectionsDirective
clang.CXCursor_OMPSectionDirective = CXCursorKind.CXCursor_OMPSectionDirective
clang.CXCursor_OMPSingleDirective = CXCursorKind.CXCursor_OMPSingleDirective
clang.CXCursor_OMPParallelForDirective = CXCursorKind.CXCursor_OMPParallelForDirective
clang.CXCursor_OMPParallelSectionsDirective = CXCursorKind.CXCursor_OMPParallelSectionsDirective
clang.CXCursor_OMPTaskDirective = CXCursorKind.CXCursor_OMPTaskDirective
clang.CXCursor_OMPMasterDirective = CXCursorKind.CXCursor_OMPMasterDirective
clang.CXCursor_OMPCriticalDirective = CXCursorKind.CXCursor_OMPCriticalDirective
clang.CXCursor_OMPTaskyieldDirective = CXCursorKind.CXCursor_OMPTaskyieldDirective
clang.CXCursor_OMPBarrierDirective = CXCursorKind.CXCursor_OMPBarrierDirective
clang.CXCursor_OMPTaskwaitDirective = CXCursorKind.CXCursor_OMPTaskwaitDirective
clang.CXCursor_OMPFlushDirective = CXCursorKind.CXCursor_OMPFlushDirective
clang.CXCursor_SEHLeaveStmt = CXCursorKind.CXCursor_SEHLeaveStmt
clang.CXCursor_OMPOrderedDirective = CXCursorKind.CXCursor_OMPOrderedDirective
clang.CXCursor_OMPAtomicDirective = CXCursorKind.CXCursor_OMPAtomicDirective
clang.CXCursor_OMPForSimdDirective = CXCursorKind.CXCursor_OMPForSimdDirective
clang.CXCursor_OMPParallelForSimdDirective = CXCursorKind.CXCursor_OMPParallelForSimdDirective
clang.CXCursor_OMPTargetDirective = CXCursorKind.CXCursor_OMPTargetDirective
clang.CXCursor_OMPTeamsDirective = CXCursorKind.CXCursor_OMPTeamsDirective
clang.CXCursor_OMPTaskgroupDirective = CXCursorKind.CXCursor_OMPTaskgroupDirective
clang.CXCursor_OMPCancellationPointDirective = CXCursorKind.CXCursor_OMPCancellationPointDirective
clang.CXCursor_OMPCancelDirective = CXCursorKind.CXCursor_OMPCancelDirective
clang.CXCursor_OMPTargetDataDirective = CXCursorKind.CXCursor_OMPTargetDataDirective
clang.CXCursor_OMPTaskLoopDirective = CXCursorKind.CXCursor_OMPTaskLoopDirective
clang.CXCursor_OMPTaskLoopSimdDirective = CXCursorKind.CXCursor_OMPTaskLoopSimdDirective
clang.CXCursor_OMPDistributeDirective = CXCursorKind.CXCursor_OMPDistributeDirective
clang.CXCursor_OMPTargetEnterDataDirective = CXCursorKind.CXCursor_OMPTargetEnterDataDirective
clang.CXCursor_OMPTargetExitDataDirective = CXCursorKind.CXCursor_OMPTargetExitDataDirective
clang.CXCursor_OMPTargetParallelDirective = CXCursorKind.CXCursor_OMPTargetParallelDirective
clang.CXCursor_OMPTargetParallelForDirective = CXCursorKind.CXCursor_OMPTargetParallelForDirective
clang.CXCursor_OMPTargetUpdateDirective = CXCursorKind.CXCursor_OMPTargetUpdateDirective
clang.CXCursor_OMPDistributeParallelForDirective = CXCursorKind.CXCursor_OMPDistributeParallelForDirective
clang.CXCursor_OMPDistributeParallelForSimdDirective = CXCursorKind.CXCursor_OMPDistributeParallelForSimdDirective
clang.CXCursor_OMPDistributeSimdDirective = CXCursorKind.CXCursor_OMPDistributeSimdDirective
clang.CXCursor_OMPTargetParallelForSimdDirective = CXCursorKind.CXCursor_OMPTargetParallelForSimdDirective
clang.CXCursor_OMPTargetSimdDirective = CXCursorKind.CXCursor_OMPTargetSimdDirective
clang.CXCursor_OMPTeamsDistributeDirective = CXCursorKind.CXCursor_OMPTeamsDistributeDirective
clang.CXCursor_OMPTeamsDistributeSimdDirective = CXCursorKind.CXCursor_OMPTeamsDistributeSimdDirective
clang.CXCursor_OMPTeamsDistributeParallelForSimdDirective = CXCursorKind.CXCursor_OMPTeamsDistributeParallelForSimdDirective
clang.CXCursor_OMPTeamsDistributeParallelForDirective = CXCursorKind.CXCursor_OMPTeamsDistributeParallelForDirective
clang.CXCursor_OMPTargetTeamsDirective = CXCursorKind.CXCursor_OMPTargetTeamsDirective
clang.CXCursor_OMPTargetTeamsDistributeDirective = CXCursorKind.CXCursor_OMPTargetTeamsDistributeDirective
clang.CXCursor_OMPTargetTeamsDistributeParallelForDirective = CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForDirective
clang.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective
clang.CXCursor_OMPTargetTeamsDistributeSimdDirective = CXCursorKind.CXCursor_OMPTargetTeamsDistributeSimdDirective
clang.CXCursor_BuiltinBitCastExpr = CXCursorKind.CXCursor_BuiltinBitCastExpr
clang.CXCursor_OMPMasterTaskLoopDirective = CXCursorKind.CXCursor_OMPMasterTaskLoopDirective
clang.CXCursor_OMPParallelMasterTaskLoopDirective = CXCursorKind.CXCursor_OMPParallelMasterTaskLoopDirective
clang.CXCursor_OMPMasterTaskLoopSimdDirective = CXCursorKind.CXCursor_OMPMasterTaskLoopSimdDirective
clang.CXCursor_OMPParallelMasterTaskLoopSimdDirective = CXCursorKind.CXCursor_OMPParallelMasterTaskLoopSimdDirective
clang.CXCursor_OMPParallelMasterDirective = CXCursorKind.CXCursor_OMPParallelMasterDirective
clang.CXCursor_OMPDepobjDirective = CXCursorKind.CXCursor_OMPDepobjDirective
clang.CXCursor_OMPScanDirective = CXCursorKind.CXCursor_OMPScanDirective
clang.CXCursor_OMPTileDirective = CXCursorKind.CXCursor_OMPTileDirective
clang.CXCursor_OMPCanonicalLoop = CXCursorKind.CXCursor_OMPCanonicalLoop
clang.CXCursor_OMPInteropDirective = CXCursorKind.CXCursor_OMPInteropDirective
clang.CXCursor_OMPDispatchDirective = CXCursorKind.CXCursor_OMPDispatchDirective
clang.CXCursor_OMPMaskedDirective = CXCursorKind.CXCursor_OMPMaskedDirective
clang.CXCursor_OMPUnrollDirective = CXCursorKind.CXCursor_OMPUnrollDirective
clang.CXCursor_OMPMetaDirective = CXCursorKind.CXCursor_OMPMetaDirective
clang.CXCursor_OMPGenericLoopDirective = CXCursorKind.CXCursor_OMPGenericLoopDirective
clang.CXCursor_OMPTeamsGenericLoopDirective = CXCursorKind.CXCursor_OMPTeamsGenericLoopDirective
clang.CXCursor_OMPTargetTeamsGenericLoopDirective = CXCursorKind.CXCursor_OMPTargetTeamsGenericLoopDirective
clang.CXCursor_OMPParallelGenericLoopDirective = CXCursorKind.CXCursor_OMPParallelGenericLoopDirective
clang.CXCursor_OMPTargetParallelGenericLoopDirective = CXCursorKind.CXCursor_OMPTargetParallelGenericLoopDirective
clang.CXCursor_OMPParallelMaskedDirective = CXCursorKind.CXCursor_OMPParallelMaskedDirective
clang.CXCursor_OMPMaskedTaskLoopDirective = CXCursorKind.CXCursor_OMPMaskedTaskLoopDirective
clang.CXCursor_OMPMaskedTaskLoopSimdDirective = CXCursorKind.CXCursor_OMPMaskedTaskLoopSimdDirective
clang.CXCursor_OMPParallelMaskedTaskLoopDirective = CXCursorKind.CXCursor_OMPParallelMaskedTaskLoopDirective
clang.CXCursor_OMPParallelMaskedTaskLoopSimdDirective = CXCursorKind.CXCursor_OMPParallelMaskedTaskLoopSimdDirective
clang.CXCursor_OMPErrorDirective = CXCursorKind.CXCursor_OMPErrorDirective
clang.CXCursor_OMPScopeDirective = CXCursorKind.CXCursor_OMPScopeDirective
clang.CXCursor_LastStmt = CXCursorKind.CXCursor_LastStmt
clang.CXCursor_TranslationUnit = CXCursorKind.CXCursor_TranslationUnit
clang.CXCursor_FirstAttr = CXCursorKind.CXCursor_FirstAttr
clang.CXCursor_UnexposedAttr = CXCursorKind.CXCursor_UnexposedAttr
clang.CXCursor_IBActionAttr = CXCursorKind.CXCursor_IBActionAttr
clang.CXCursor_IBOutletAttr = CXCursorKind.CXCursor_IBOutletAttr
clang.CXCursor_IBOutletCollectionAttr = CXCursorKind.CXCursor_IBOutletCollectionAttr
clang.CXCursor_CXXFinalAttr = CXCursorKind.CXCursor_CXXFinalAttr
clang.CXCursor_CXXOverrideAttr = CXCursorKind.CXCursor_CXXOverrideAttr
clang.CXCursor_AnnotateAttr = CXCursorKind.CXCursor_AnnotateAttr
clang.CXCursor_AsmLabelAttr = CXCursorKind.CXCursor_AsmLabelAttr
clang.CXCursor_PackedAttr = CXCursorKind.CXCursor_PackedAttr
clang.CXCursor_PureAttr = CXCursorKind.CXCursor_PureAttr
clang.CXCursor_ConstAttr = CXCursorKind.CXCursor_ConstAttr
clang.CXCursor_NoDuplicateAttr = CXCursorKind.CXCursor_NoDuplicateAttr
clang.CXCursor_CUDAConstantAttr = CXCursorKind.CXCursor_CUDAConstantAttr
clang.CXCursor_CUDADeviceAttr = CXCursorKind.CXCursor_CUDADeviceAttr
clang.CXCursor_CUDAGlobalAttr = CXCursorKind.CXCursor_CUDAGlobalAttr
clang.CXCursor_CUDAHostAttr = CXCursorKind.CXCursor_CUDAHostAttr
clang.CXCursor_CUDASharedAttr = CXCursorKind.CXCursor_CUDASharedAttr
clang.CXCursor_VisibilityAttr = CXCursorKind.CXCursor_VisibilityAttr
clang.CXCursor_DLLExport = CXCursorKind.CXCursor_DLLExport
clang.CXCursor_DLLImport = CXCursorKind.CXCursor_DLLImport
clang.CXCursor_NSReturnsRetained = CXCursorKind.CXCursor_NSReturnsRetained
clang.CXCursor_NSReturnsNotRetained = CXCursorKind.CXCursor_NSReturnsNotRetained
clang.CXCursor_NSReturnsAutoreleased = CXCursorKind.CXCursor_NSReturnsAutoreleased
clang.CXCursor_NSConsumesSelf = CXCursorKind.CXCursor_NSConsumesSelf
clang.CXCursor_NSConsumed = CXCursorKind.CXCursor_NSConsumed
clang.CXCursor_ObjCException = CXCursorKind.CXCursor_ObjCException
clang.CXCursor_ObjCNSObject = CXCursorKind.CXCursor_ObjCNSObject
clang.CXCursor_ObjCIndependentClass = CXCursorKind.CXCursor_ObjCIndependentClass
clang.CXCursor_ObjCPreciseLifetime = CXCursorKind.CXCursor_ObjCPreciseLifetime
clang.CXCursor_ObjCReturnsInnerPointer = CXCursorKind.CXCursor_ObjCReturnsInnerPointer
clang.CXCursor_ObjCRequiresSuper = CXCursorKind.CXCursor_ObjCRequiresSuper
clang.CXCursor_ObjCRootClass = CXCursorKind.CXCursor_ObjCRootClass
clang.CXCursor_ObjCSubclassingRestricted = CXCursorKind.CXCursor_ObjCSubclassingRestricted
clang.CXCursor_ObjCExplicitProtocolImpl = CXCursorKind.CXCursor_ObjCExplicitProtocolImpl
clang.CXCursor_ObjCDesignatedInitializer = CXCursorKind.CXCursor_ObjCDesignatedInitializer
clang.CXCursor_ObjCRuntimeVisible = CXCursorKind.CXCursor_ObjCRuntimeVisible
clang.CXCursor_ObjCBoxable = CXCursorKind.CXCursor_ObjCBoxable
clang.CXCursor_FlagEnum = CXCursorKind.CXCursor_FlagEnum
clang.CXCursor_ConvergentAttr = CXCursorKind.CXCursor_ConvergentAttr
clang.CXCursor_WarnUnusedAttr = CXCursorKind.CXCursor_WarnUnusedAttr
clang.CXCursor_WarnUnusedResultAttr = CXCursorKind.CXCursor_WarnUnusedResultAttr
clang.CXCursor_AlignedAttr = CXCursorKind.CXCursor_AlignedAttr
clang.CXCursor_LastAttr = CXCursorKind.CXCursor_LastAttr
clang.CXCursor_PreprocessingDirective = CXCursorKind.CXCursor_PreprocessingDirective
clang.CXCursor_MacroDefinition = CXCursorKind.CXCursor_MacroDefinition
clang.CXCursor_MacroExpansion = CXCursorKind.CXCursor_MacroExpansion
clang.CXCursor_MacroInstantiation = CXCursorKind.CXCursor_MacroInstantiation
clang.CXCursor_InclusionDirective = CXCursorKind.CXCursor_InclusionDirective
clang.CXCursor_FirstPreprocessing = CXCursorKind.CXCursor_FirstPreprocessing
clang.CXCursor_LastPreprocessing = CXCursorKind.CXCursor_LastPreprocessing
clang.CXCursor_ModuleImportDecl = CXCursorKind.CXCursor_ModuleImportDecl
clang.CXCursor_TypeAliasTemplateDecl = CXCursorKind.CXCursor_TypeAliasTemplateDecl
clang.CXCursor_StaticAssert = CXCursorKind.CXCursor_StaticAssert
clang.CXCursor_FriendDecl = CXCursorKind.CXCursor_FriendDecl
clang.CXCursor_ConceptDecl = CXCursorKind.CXCursor_ConceptDecl
clang.CXCursor_FirstExtraDecl = CXCursorKind.CXCursor_FirstExtraDecl
clang.CXCursor_LastExtraDecl = CXCursorKind.CXCursor_LastExtraDecl
clang.CXCursor_OverloadCandidate = CXCursorKind.CXCursor_OverloadCandidate

---@class CXCursor
---@field kind CXCursorKind
---@field xdata integer
---@field data ffi.cdata*[]

---@alias CXCursor CXCursor

---@return CXCursor
function clang.clang_getNullCursor() end
clang.getNullCursor = clang.clang_getNullCursor

---@param arg_1 CXTranslationUnit
---@return CXCursor
function clang.clang_getTranslationUnitCursor(arg_1) end
clang.getTranslationUnitCursor = clang.clang_getTranslationUnitCursor

---@param arg_1 CXCursor
---@param arg_2 CXCursor
---@return integer
function clang.clang_equalCursors(arg_1, arg_2) end
clang.equalCursors = clang.clang_equalCursors

---@param cursor CXCursor
---@return integer
function clang.clang_Cursor_isNull(cursor) end
clang.Cursor_isNull = clang.clang_Cursor_isNull

---@param arg_1 CXCursor
---@return integer
function clang.clang_hashCursor(arg_1) end
clang.hashCursor = clang.clang_hashCursor

---@param arg_1 CXCursor
---@return CXCursorKind
function clang.clang_getCursorKind(arg_1) end
clang.getCursorKind = clang.clang_getCursorKind

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isDeclaration(arg_1) end
clang.isDeclaration = clang.clang_isDeclaration

---@param arg_1 CXCursor
---@return integer
function clang.clang_isInvalidDeclaration(arg_1) end
clang.isInvalidDeclaration = clang.clang_isInvalidDeclaration

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isReference(arg_1) end
clang.isReference = clang.clang_isReference

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isExpression(arg_1) end
clang.isExpression = clang.clang_isExpression

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isStatement(arg_1) end
clang.isStatement = clang.clang_isStatement

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isAttribute(arg_1) end
clang.isAttribute = clang.clang_isAttribute

---@param C CXCursor
---@return integer
function clang.clang_Cursor_hasAttrs(C) end
clang.Cursor_hasAttrs = clang.clang_Cursor_hasAttrs

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isInvalid(arg_1) end
clang.isInvalid = clang.clang_isInvalid

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isTranslationUnit(arg_1) end
clang.isTranslationUnit = clang.clang_isTranslationUnit

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isPreprocessing(arg_1) end
clang.isPreprocessing = clang.clang_isPreprocessing

---@param arg_1 CXCursorKind
---@return integer
function clang.clang_isUnexposed(arg_1) end
clang.isUnexposed = clang.clang_isUnexposed

---@enum CXLinkageKind
local CXLinkageKind = {
    CXLinkage_Invalid = 0,
    CXLinkage_NoLinkage = 1,
    CXLinkage_Internal = 2,
    CXLinkage_UniqueExternal = 3,
    CXLinkage_External = 4,
}

clang.CXLinkage_Invalid = CXLinkageKind.CXLinkage_Invalid
clang.CXLinkage_NoLinkage = CXLinkageKind.CXLinkage_NoLinkage
clang.CXLinkage_Internal = CXLinkageKind.CXLinkage_Internal
clang.CXLinkage_UniqueExternal = CXLinkageKind.CXLinkage_UniqueExternal
clang.CXLinkage_External = CXLinkageKind.CXLinkage_External

---@param cursor CXCursor
---@return CXLinkageKind
function clang.clang_getCursorLinkage(cursor) end
clang.getCursorLinkage = clang.clang_getCursorLinkage

---@enum CXVisibilityKind
local CXVisibilityKind = {
    CXVisibility_Invalid = 0,
    CXVisibility_Hidden = 1,
    CXVisibility_Protected = 2,
    CXVisibility_Default = 3,
}

clang.CXVisibility_Invalid = CXVisibilityKind.CXVisibility_Invalid
clang.CXVisibility_Hidden = CXVisibilityKind.CXVisibility_Hidden
clang.CXVisibility_Protected = CXVisibilityKind.CXVisibility_Protected
clang.CXVisibility_Default = CXVisibilityKind.CXVisibility_Default

---@param cursor CXCursor
---@return CXVisibilityKind
function clang.clang_getCursorVisibility(cursor) end
clang.getCursorVisibility = clang.clang_getCursorVisibility

---@param cursor CXCursor
---@return CXAvailabilityKind
function clang.clang_getCursorAvailability(cursor) end
clang.getCursorAvailability = clang.clang_getCursorAvailability

---@class CXPlatformAvailability
---@field Platform CXString
---@field Introduced CXVersion
---@field Deprecated CXVersion
---@field Obsoleted CXVersion
---@field Unavailable integer
---@field Message CXString

---@alias CXPlatformAvailability CXPlatformAvailability

---@param cursor CXCursor
---@param always_deprecated c.pointer<integer>?
---@param deprecated_message c.pointer<CXString>?
---@param always_unavailable c.pointer<integer>?
---@param unavailable_message c.pointer<CXString>?
---@param availability c.pointer<CXPlatformAvailability>?
---@param availability_size integer
---@return integer
function clang.clang_getCursorPlatformAvailability(cursor, always_deprecated, deprecated_message, always_unavailable, unavailable_message, availability, availability_size) end
clang.getCursorPlatformAvailability = clang.clang_getCursorPlatformAvailability

---@param availability c.pointer<CXPlatformAvailability>?
---@return nil
function clang.clang_disposeCXPlatformAvailability(availability) end
clang.disposeCXPlatformAvailability = clang.clang_disposeCXPlatformAvailability

---@param cursor CXCursor
---@return CXCursor
function clang.clang_Cursor_getVarDeclInitializer(cursor) end
clang.Cursor_getVarDeclInitializer = clang.clang_Cursor_getVarDeclInitializer

---@param cursor CXCursor
---@return integer
function clang.clang_Cursor_hasVarDeclGlobalStorage(cursor) end
clang.Cursor_hasVarDeclGlobalStorage = clang.clang_Cursor_hasVarDeclGlobalStorage

---@param cursor CXCursor
---@return integer
function clang.clang_Cursor_hasVarDeclExternalStorage(cursor) end
clang.Cursor_hasVarDeclExternalStorage = clang.clang_Cursor_hasVarDeclExternalStorage

---@enum CXLanguageKind
local CXLanguageKind = {
    CXLanguage_Invalid = 0,
    CXLanguage_C = 1,
    CXLanguage_ObjC = 2,
    CXLanguage_CPlusPlus = 3,
}

clang.CXLanguage_Invalid = CXLanguageKind.CXLanguage_Invalid
clang.CXLanguage_C = CXLanguageKind.CXLanguage_C
clang.CXLanguage_ObjC = CXLanguageKind.CXLanguage_ObjC
clang.CXLanguage_CPlusPlus = CXLanguageKind.CXLanguage_CPlusPlus

---@param cursor CXCursor
---@return CXLanguageKind
function clang.clang_getCursorLanguage(cursor) end
clang.getCursorLanguage = clang.clang_getCursorLanguage

---@enum CXTLSKind
local CXTLSKind = {
    CXTLS_None = 0,
    CXTLS_Dynamic = 1,
    CXTLS_Static = 2,
}

clang.CXTLS_None = CXTLSKind.CXTLS_None
clang.CXTLS_Dynamic = CXTLSKind.CXTLS_Dynamic
clang.CXTLS_Static = CXTLSKind.CXTLS_Static

---@param cursor CXCursor
---@return CXTLSKind
function clang.clang_getCursorTLSKind(cursor) end
clang.getCursorTLSKind = clang.clang_getCursorTLSKind

---@param arg_1 CXCursor
---@return CXTranslationUnit
function clang.clang_Cursor_getTranslationUnit(arg_1) end
clang.Cursor_getTranslationUnit = clang.clang_Cursor_getTranslationUnit

---@class CXCursorSetImpl

---@alias CXCursorSet c.pointer<CXCursorSetImpl>?

---@return CXCursorSet
function clang.clang_createCXCursorSet() end
clang.createCXCursorSet = clang.clang_createCXCursorSet

---@param cset CXCursorSet
---@return nil
function clang.clang_disposeCXCursorSet(cset) end
clang.disposeCXCursorSet = clang.clang_disposeCXCursorSet

---@param cset CXCursorSet
---@param cursor CXCursor
---@return integer
function clang.clang_CXCursorSet_contains(cset, cursor) end
clang.CXCursorSet_contains = clang.clang_CXCursorSet_contains

---@param cset CXCursorSet
---@param cursor CXCursor
---@return integer
function clang.clang_CXCursorSet_insert(cset, cursor) end
clang.CXCursorSet_insert = clang.clang_CXCursorSet_insert

---@param cursor CXCursor
---@return CXCursor
function clang.clang_getCursorSemanticParent(cursor) end
clang.getCursorSemanticParent = clang.clang_getCursorSemanticParent

---@param cursor CXCursor
---@return CXCursor
function clang.clang_getCursorLexicalParent(cursor) end
clang.getCursorLexicalParent = clang.clang_getCursorLexicalParent

---@param cursor CXCursor
---@param overridden c.pointer<c.pointer<CXCursor>?>?
---@param num_overridden c.pointer<integer>?
---@return nil
function clang.clang_getOverriddenCursors(cursor, overridden, num_overridden) end
clang.getOverriddenCursors = clang.clang_getOverriddenCursors

---@param overridden c.pointer<CXCursor>?
---@return nil
function clang.clang_disposeOverriddenCursors(overridden) end
clang.disposeOverriddenCursors = clang.clang_disposeOverriddenCursors

---@param cursor CXCursor
---@return CXFile
function clang.clang_getIncludedFile(cursor) end
clang.getIncludedFile = clang.clang_getIncludedFile

---@param arg_1 CXTranslationUnit
---@param arg_2 CXSourceLocation
---@return CXCursor
function clang.clang_getCursor(arg_1, arg_2) end
clang.getCursor = clang.clang_getCursor

---@param arg_1 CXCursor
---@return CXSourceLocation
function clang.clang_getCursorLocation(arg_1) end
clang.getCursorLocation = clang.clang_getCursorLocation

---@param arg_1 CXCursor
---@return CXSourceRange
function clang.clang_getCursorExtent(arg_1) end
clang.getCursorExtent = clang.clang_getCursorExtent

---@enum CXTypeKind
local CXTypeKind = {
    CXType_Invalid = 0,
    CXType_Unexposed = 1,
    CXType_Void = 2,
    CXType_Bool = 3,
    CXType_Char_U = 4,
    CXType_UChar = 5,
    CXType_Char16 = 6,
    CXType_Char32 = 7,
    CXType_UShort = 8,
    CXType_UInt = 9,
    CXType_ULong = 10,
    CXType_ULongLong = 11,
    CXType_UInt128 = 12,
    CXType_Char_S = 13,
    CXType_SChar = 14,
    CXType_WChar = 15,
    CXType_Short = 16,
    CXType_Int = 17,
    CXType_Long = 18,
    CXType_LongLong = 19,
    CXType_Int128 = 20,
    CXType_Float = 21,
    CXType_Double = 22,
    CXType_LongDouble = 23,
    CXType_NullPtr = 24,
    CXType_Overload = 25,
    CXType_Dependent = 26,
    CXType_ObjCId = 27,
    CXType_ObjCClass = 28,
    CXType_ObjCSel = 29,
    CXType_Float128 = 30,
    CXType_Half = 31,
    CXType_Float16 = 32,
    CXType_ShortAccum = 33,
    CXType_Accum = 34,
    CXType_LongAccum = 35,
    CXType_UShortAccum = 36,
    CXType_UAccum = 37,
    CXType_ULongAccum = 38,
    CXType_BFloat16 = 39,
    CXType_Ibm128 = 40,
    CXType_FirstBuiltin = 2,
    CXType_LastBuiltin = 40,
    CXType_Complex = 100,
    CXType_Pointer = 101,
    CXType_BlockPointer = 102,
    CXType_LValueReference = 103,
    CXType_RValueReference = 104,
    CXType_Record = 105,
    CXType_Enum = 106,
    CXType_Typedef = 107,
    CXType_ObjCInterface = 108,
    CXType_ObjCObjectPointer = 109,
    CXType_FunctionNoProto = 110,
    CXType_FunctionProto = 111,
    CXType_ConstantArray = 112,
    CXType_Vector = 113,
    CXType_IncompleteArray = 114,
    CXType_VariableArray = 115,
    CXType_DependentSizedArray = 116,
    CXType_MemberPointer = 117,
    CXType_Auto = 118,
    CXType_Elaborated = 119,
    CXType_Pipe = 120,
    CXType_OCLImage1dRO = 121,
    CXType_OCLImage1dArrayRO = 122,
    CXType_OCLImage1dBufferRO = 123,
    CXType_OCLImage2dRO = 124,
    CXType_OCLImage2dArrayRO = 125,
    CXType_OCLImage2dDepthRO = 126,
    CXType_OCLImage2dArrayDepthRO = 127,
    CXType_OCLImage2dMSAARO = 128,
    CXType_OCLImage2dArrayMSAARO = 129,
    CXType_OCLImage2dMSAADepthRO = 130,
    CXType_OCLImage2dArrayMSAADepthRO = 131,
    CXType_OCLImage3dRO = 132,
    CXType_OCLImage1dWO = 133,
    CXType_OCLImage1dArrayWO = 134,
    CXType_OCLImage1dBufferWO = 135,
    CXType_OCLImage2dWO = 136,
    CXType_OCLImage2dArrayWO = 137,
    CXType_OCLImage2dDepthWO = 138,
    CXType_OCLImage2dArrayDepthWO = 139,
    CXType_OCLImage2dMSAAWO = 140,
    CXType_OCLImage2dArrayMSAAWO = 141,
    CXType_OCLImage2dMSAADepthWO = 142,
    CXType_OCLImage2dArrayMSAADepthWO = 143,
    CXType_OCLImage3dWO = 144,
    CXType_OCLImage1dRW = 145,
    CXType_OCLImage1dArrayRW = 146,
    CXType_OCLImage1dBufferRW = 147,
    CXType_OCLImage2dRW = 148,
    CXType_OCLImage2dArrayRW = 149,
    CXType_OCLImage2dDepthRW = 150,
    CXType_OCLImage2dArrayDepthRW = 151,
    CXType_OCLImage2dMSAARW = 152,
    CXType_OCLImage2dArrayMSAARW = 153,
    CXType_OCLImage2dMSAADepthRW = 154,
    CXType_OCLImage2dArrayMSAADepthRW = 155,
    CXType_OCLImage3dRW = 156,
    CXType_OCLSampler = 157,
    CXType_OCLEvent = 158,
    CXType_OCLQueue = 159,
    CXType_OCLReserveID = 160,
    CXType_ObjCObject = 161,
    CXType_ObjCTypeParam = 162,
    CXType_Attributed = 163,
    CXType_OCLIntelSubgroupAVCMcePayload = 164,
    CXType_OCLIntelSubgroupAVCImePayload = 165,
    CXType_OCLIntelSubgroupAVCRefPayload = 166,
    CXType_OCLIntelSubgroupAVCSicPayload = 167,
    CXType_OCLIntelSubgroupAVCMceResult = 168,
    CXType_OCLIntelSubgroupAVCImeResult = 169,
    CXType_OCLIntelSubgroupAVCRefResult = 170,
    CXType_OCLIntelSubgroupAVCSicResult = 171,
    CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout = 172,
    CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout = 173,
    CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin = 174,
    CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin = 175,
    CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172,
    CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173,
    CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174,
    CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175,
    CXType_ExtVector = 176,
    CXType_Atomic = 177,
    CXType_BTFTagAttributed = 178,
}

clang.CXType_Invalid = CXTypeKind.CXType_Invalid
clang.CXType_Unexposed = CXTypeKind.CXType_Unexposed
clang.CXType_Void = CXTypeKind.CXType_Void
clang.CXType_Bool = CXTypeKind.CXType_Bool
clang.CXType_Char_U = CXTypeKind.CXType_Char_U
clang.CXType_UChar = CXTypeKind.CXType_UChar
clang.CXType_Char16 = CXTypeKind.CXType_Char16
clang.CXType_Char32 = CXTypeKind.CXType_Char32
clang.CXType_UShort = CXTypeKind.CXType_UShort
clang.CXType_UInt = CXTypeKind.CXType_UInt
clang.CXType_ULong = CXTypeKind.CXType_ULong
clang.CXType_ULongLong = CXTypeKind.CXType_ULongLong
clang.CXType_UInt128 = CXTypeKind.CXType_UInt128
clang.CXType_Char_S = CXTypeKind.CXType_Char_S
clang.CXType_SChar = CXTypeKind.CXType_SChar
clang.CXType_WChar = CXTypeKind.CXType_WChar
clang.CXType_Short = CXTypeKind.CXType_Short
clang.CXType_Int = CXTypeKind.CXType_Int
clang.CXType_Long = CXTypeKind.CXType_Long
clang.CXType_LongLong = CXTypeKind.CXType_LongLong
clang.CXType_Int128 = CXTypeKind.CXType_Int128
clang.CXType_Float = CXTypeKind.CXType_Float
clang.CXType_Double = CXTypeKind.CXType_Double
clang.CXType_LongDouble = CXTypeKind.CXType_LongDouble
clang.CXType_NullPtr = CXTypeKind.CXType_NullPtr
clang.CXType_Overload = CXTypeKind.CXType_Overload
clang.CXType_Dependent = CXTypeKind.CXType_Dependent
clang.CXType_ObjCId = CXTypeKind.CXType_ObjCId
clang.CXType_ObjCClass = CXTypeKind.CXType_ObjCClass
clang.CXType_ObjCSel = CXTypeKind.CXType_ObjCSel
clang.CXType_Float128 = CXTypeKind.CXType_Float128
clang.CXType_Half = CXTypeKind.CXType_Half
clang.CXType_Float16 = CXTypeKind.CXType_Float16
clang.CXType_ShortAccum = CXTypeKind.CXType_ShortAccum
clang.CXType_Accum = CXTypeKind.CXType_Accum
clang.CXType_LongAccum = CXTypeKind.CXType_LongAccum
clang.CXType_UShortAccum = CXTypeKind.CXType_UShortAccum
clang.CXType_UAccum = CXTypeKind.CXType_UAccum
clang.CXType_ULongAccum = CXTypeKind.CXType_ULongAccum
clang.CXType_BFloat16 = CXTypeKind.CXType_BFloat16
clang.CXType_Ibm128 = CXTypeKind.CXType_Ibm128
clang.CXType_FirstBuiltin = CXTypeKind.CXType_FirstBuiltin
clang.CXType_LastBuiltin = CXTypeKind.CXType_LastBuiltin
clang.CXType_Complex = CXTypeKind.CXType_Complex
clang.CXType_Pointer = CXTypeKind.CXType_Pointer
clang.CXType_BlockPointer = CXTypeKind.CXType_BlockPointer
clang.CXType_LValueReference = CXTypeKind.CXType_LValueReference
clang.CXType_RValueReference = CXTypeKind.CXType_RValueReference
clang.CXType_Record = CXTypeKind.CXType_Record
clang.CXType_Enum = CXTypeKind.CXType_Enum
clang.CXType_Typedef = CXTypeKind.CXType_Typedef
clang.CXType_ObjCInterface = CXTypeKind.CXType_ObjCInterface
clang.CXType_ObjCObjectPointer = CXTypeKind.CXType_ObjCObjectPointer
clang.CXType_FunctionNoProto = CXTypeKind.CXType_FunctionNoProto
clang.CXType_FunctionProto = CXTypeKind.CXType_FunctionProto
clang.CXType_ConstantArray = CXTypeKind.CXType_ConstantArray
clang.CXType_Vector = CXTypeKind.CXType_Vector
clang.CXType_IncompleteArray = CXTypeKind.CXType_IncompleteArray
clang.CXType_VariableArray = CXTypeKind.CXType_VariableArray
clang.CXType_DependentSizedArray = CXTypeKind.CXType_DependentSizedArray
clang.CXType_MemberPointer = CXTypeKind.CXType_MemberPointer
clang.CXType_Auto = CXTypeKind.CXType_Auto
clang.CXType_Elaborated = CXTypeKind.CXType_Elaborated
clang.CXType_Pipe = CXTypeKind.CXType_Pipe
clang.CXType_OCLImage1dRO = CXTypeKind.CXType_OCLImage1dRO
clang.CXType_OCLImage1dArrayRO = CXTypeKind.CXType_OCLImage1dArrayRO
clang.CXType_OCLImage1dBufferRO = CXTypeKind.CXType_OCLImage1dBufferRO
clang.CXType_OCLImage2dRO = CXTypeKind.CXType_OCLImage2dRO
clang.CXType_OCLImage2dArrayRO = CXTypeKind.CXType_OCLImage2dArrayRO
clang.CXType_OCLImage2dDepthRO = CXTypeKind.CXType_OCLImage2dDepthRO
clang.CXType_OCLImage2dArrayDepthRO = CXTypeKind.CXType_OCLImage2dArrayDepthRO
clang.CXType_OCLImage2dMSAARO = CXTypeKind.CXType_OCLImage2dMSAARO
clang.CXType_OCLImage2dArrayMSAARO = CXTypeKind.CXType_OCLImage2dArrayMSAARO
clang.CXType_OCLImage2dMSAADepthRO = CXTypeKind.CXType_OCLImage2dMSAADepthRO
clang.CXType_OCLImage2dArrayMSAADepthRO = CXTypeKind.CXType_OCLImage2dArrayMSAADepthRO
clang.CXType_OCLImage3dRO = CXTypeKind.CXType_OCLImage3dRO
clang.CXType_OCLImage1dWO = CXTypeKind.CXType_OCLImage1dWO
clang.CXType_OCLImage1dArrayWO = CXTypeKind.CXType_OCLImage1dArrayWO
clang.CXType_OCLImage1dBufferWO = CXTypeKind.CXType_OCLImage1dBufferWO
clang.CXType_OCLImage2dWO = CXTypeKind.CXType_OCLImage2dWO
clang.CXType_OCLImage2dArrayWO = CXTypeKind.CXType_OCLImage2dArrayWO
clang.CXType_OCLImage2dDepthWO = CXTypeKind.CXType_OCLImage2dDepthWO
clang.CXType_OCLImage2dArrayDepthWO = CXTypeKind.CXType_OCLImage2dArrayDepthWO
clang.CXType_OCLImage2dMSAAWO = CXTypeKind.CXType_OCLImage2dMSAAWO
clang.CXType_OCLImage2dArrayMSAAWO = CXTypeKind.CXType_OCLImage2dArrayMSAAWO
clang.CXType_OCLImage2dMSAADepthWO = CXTypeKind.CXType_OCLImage2dMSAADepthWO
clang.CXType_OCLImage2dArrayMSAADepthWO = CXTypeKind.CXType_OCLImage2dArrayMSAADepthWO
clang.CXType_OCLImage3dWO = CXTypeKind.CXType_OCLImage3dWO
clang.CXType_OCLImage1dRW = CXTypeKind.CXType_OCLImage1dRW
clang.CXType_OCLImage1dArrayRW = CXTypeKind.CXType_OCLImage1dArrayRW
clang.CXType_OCLImage1dBufferRW = CXTypeKind.CXType_OCLImage1dBufferRW
clang.CXType_OCLImage2dRW = CXTypeKind.CXType_OCLImage2dRW
clang.CXType_OCLImage2dArrayRW = CXTypeKind.CXType_OCLImage2dArrayRW
clang.CXType_OCLImage2dDepthRW = CXTypeKind.CXType_OCLImage2dDepthRW
clang.CXType_OCLImage2dArrayDepthRW = CXTypeKind.CXType_OCLImage2dArrayDepthRW
clang.CXType_OCLImage2dMSAARW = CXTypeKind.CXType_OCLImage2dMSAARW
clang.CXType_OCLImage2dArrayMSAARW = CXTypeKind.CXType_OCLImage2dArrayMSAARW
clang.CXType_OCLImage2dMSAADepthRW = CXTypeKind.CXType_OCLImage2dMSAADepthRW
clang.CXType_OCLImage2dArrayMSAADepthRW = CXTypeKind.CXType_OCLImage2dArrayMSAADepthRW
clang.CXType_OCLImage3dRW = CXTypeKind.CXType_OCLImage3dRW
clang.CXType_OCLSampler = CXTypeKind.CXType_OCLSampler
clang.CXType_OCLEvent = CXTypeKind.CXType_OCLEvent
clang.CXType_OCLQueue = CXTypeKind.CXType_OCLQueue
clang.CXType_OCLReserveID = CXTypeKind.CXType_OCLReserveID
clang.CXType_ObjCObject = CXTypeKind.CXType_ObjCObject
clang.CXType_ObjCTypeParam = CXTypeKind.CXType_ObjCTypeParam
clang.CXType_Attributed = CXTypeKind.CXType_Attributed
clang.CXType_OCLIntelSubgroupAVCMcePayload = CXTypeKind.CXType_OCLIntelSubgroupAVCMcePayload
clang.CXType_OCLIntelSubgroupAVCImePayload = CXTypeKind.CXType_OCLIntelSubgroupAVCImePayload
clang.CXType_OCLIntelSubgroupAVCRefPayload = CXTypeKind.CXType_OCLIntelSubgroupAVCRefPayload
clang.CXType_OCLIntelSubgroupAVCSicPayload = CXTypeKind.CXType_OCLIntelSubgroupAVCSicPayload
clang.CXType_OCLIntelSubgroupAVCMceResult = CXTypeKind.CXType_OCLIntelSubgroupAVCMceResult
clang.CXType_OCLIntelSubgroupAVCImeResult = CXTypeKind.CXType_OCLIntelSubgroupAVCImeResult
clang.CXType_OCLIntelSubgroupAVCRefResult = CXTypeKind.CXType_OCLIntelSubgroupAVCRefResult
clang.CXType_OCLIntelSubgroupAVCSicResult = CXTypeKind.CXType_OCLIntelSubgroupAVCSicResult
clang.CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout = CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout
clang.CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout = CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout
clang.CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin = CXTypeKind.CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin
clang.CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin = CXTypeKind.CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin
clang.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout
clang.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout
clang.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = CXTypeKind.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin
clang.CXType_OCLIntelSubgroupAVCImeDualRefStreamin = CXTypeKind.CXType_OCLIntelSubgroupAVCImeDualRefStreamin
clang.CXType_ExtVector = CXTypeKind.CXType_ExtVector
clang.CXType_Atomic = CXTypeKind.CXType_Atomic
clang.CXType_BTFTagAttributed = CXTypeKind.CXType_BTFTagAttributed

---@enum CXCallingConv
local CXCallingConv = {
    CXCallingConv_Default = 0,
    CXCallingConv_C = 1,
    CXCallingConv_X86StdCall = 2,
    CXCallingConv_X86FastCall = 3,
    CXCallingConv_X86ThisCall = 4,
    CXCallingConv_X86Pascal = 5,
    CXCallingConv_AAPCS = 6,
    CXCallingConv_AAPCS_VFP = 7,
    CXCallingConv_X86RegCall = 8,
    CXCallingConv_IntelOclBicc = 9,
    CXCallingConv_Win64 = 10,
    CXCallingConv_X86_64Win64 = 10,
    CXCallingConv_X86_64SysV = 11,
    CXCallingConv_X86VectorCall = 12,
    CXCallingConv_Swift = 13,
    CXCallingConv_PreserveMost = 14,
    CXCallingConv_PreserveAll = 15,
    CXCallingConv_AArch64VectorCall = 16,
    CXCallingConv_SwiftAsync = 17,
    CXCallingConv_AArch64SVEPCS = 18,
    CXCallingConv_M68kRTD = 19,
    CXCallingConv_Invalid = 100,
    CXCallingConv_Unexposed = 200,
}

clang.CXCallingConv_Default = CXCallingConv.CXCallingConv_Default
clang.CXCallingConv_C = CXCallingConv.CXCallingConv_C
clang.CXCallingConv_X86StdCall = CXCallingConv.CXCallingConv_X86StdCall
clang.CXCallingConv_X86FastCall = CXCallingConv.CXCallingConv_X86FastCall
clang.CXCallingConv_X86ThisCall = CXCallingConv.CXCallingConv_X86ThisCall
clang.CXCallingConv_X86Pascal = CXCallingConv.CXCallingConv_X86Pascal
clang.CXCallingConv_AAPCS = CXCallingConv.CXCallingConv_AAPCS
clang.CXCallingConv_AAPCS_VFP = CXCallingConv.CXCallingConv_AAPCS_VFP
clang.CXCallingConv_X86RegCall = CXCallingConv.CXCallingConv_X86RegCall
clang.CXCallingConv_IntelOclBicc = CXCallingConv.CXCallingConv_IntelOclBicc
clang.CXCallingConv_Win64 = CXCallingConv.CXCallingConv_Win64
clang.CXCallingConv_X86_64Win64 = CXCallingConv.CXCallingConv_X86_64Win64
clang.CXCallingConv_X86_64SysV = CXCallingConv.CXCallingConv_X86_64SysV
clang.CXCallingConv_X86VectorCall = CXCallingConv.CXCallingConv_X86VectorCall
clang.CXCallingConv_Swift = CXCallingConv.CXCallingConv_Swift
clang.CXCallingConv_PreserveMost = CXCallingConv.CXCallingConv_PreserveMost
clang.CXCallingConv_PreserveAll = CXCallingConv.CXCallingConv_PreserveAll
clang.CXCallingConv_AArch64VectorCall = CXCallingConv.CXCallingConv_AArch64VectorCall
clang.CXCallingConv_SwiftAsync = CXCallingConv.CXCallingConv_SwiftAsync
clang.CXCallingConv_AArch64SVEPCS = CXCallingConv.CXCallingConv_AArch64SVEPCS
clang.CXCallingConv_M68kRTD = CXCallingConv.CXCallingConv_M68kRTD
clang.CXCallingConv_Invalid = CXCallingConv.CXCallingConv_Invalid
clang.CXCallingConv_Unexposed = CXCallingConv.CXCallingConv_Unexposed

---@class CXType
---@field kind CXTypeKind
---@field data ffi.cdata*[]

---@alias CXType CXType

---@param C CXCursor
---@return CXType
function clang.clang_getCursorType(C) end
clang.getCursorType = clang.clang_getCursorType

---@param CT CXType
---@return CXString
function clang.clang_getTypeSpelling(CT) end
clang.getTypeSpelling = clang.clang_getTypeSpelling

---@param C CXCursor
---@return CXType
function clang.clang_getTypedefDeclUnderlyingType(C) end
clang.getTypedefDeclUnderlyingType = clang.clang_getTypedefDeclUnderlyingType

---@param C CXCursor
---@return CXType
function clang.clang_getEnumDeclIntegerType(C) end
clang.getEnumDeclIntegerType = clang.clang_getEnumDeclIntegerType

---@param C CXCursor
---@return integer
function clang.clang_getEnumConstantDeclValue(C) end
clang.getEnumConstantDeclValue = clang.clang_getEnumConstantDeclValue

---@param C CXCursor
---@return integer
function clang.clang_getEnumConstantDeclUnsignedValue(C) end
clang.getEnumConstantDeclUnsignedValue = clang.clang_getEnumConstantDeclUnsignedValue

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isBitField(C) end
clang.Cursor_isBitField = clang.clang_Cursor_isBitField

---@param C CXCursor
---@return integer
function clang.clang_getFieldDeclBitWidth(C) end
clang.getFieldDeclBitWidth = clang.clang_getFieldDeclBitWidth

---@param C CXCursor
---@return integer
function clang.clang_Cursor_getNumArguments(C) end
clang.Cursor_getNumArguments = clang.clang_Cursor_getNumArguments

---@param C CXCursor
---@param i integer
---@return CXCursor
function clang.clang_Cursor_getArgument(C, i) end
clang.Cursor_getArgument = clang.clang_Cursor_getArgument

---@enum CXTemplateArgumentKind
local CXTemplateArgumentKind = {
    CXTemplateArgumentKind_Null = 0,
    CXTemplateArgumentKind_Type = 1,
    CXTemplateArgumentKind_Declaration = 2,
    CXTemplateArgumentKind_NullPtr = 3,
    CXTemplateArgumentKind_Integral = 4,
    CXTemplateArgumentKind_Template = 5,
    CXTemplateArgumentKind_TemplateExpansion = 6,
    CXTemplateArgumentKind_Expression = 7,
    CXTemplateArgumentKind_Pack = 8,
    CXTemplateArgumentKind_Invalid = 9,
}

clang.CXTemplateArgumentKind_Null = CXTemplateArgumentKind.CXTemplateArgumentKind_Null
clang.CXTemplateArgumentKind_Type = CXTemplateArgumentKind.CXTemplateArgumentKind_Type
clang.CXTemplateArgumentKind_Declaration = CXTemplateArgumentKind.CXTemplateArgumentKind_Declaration
clang.CXTemplateArgumentKind_NullPtr = CXTemplateArgumentKind.CXTemplateArgumentKind_NullPtr
clang.CXTemplateArgumentKind_Integral = CXTemplateArgumentKind.CXTemplateArgumentKind_Integral
clang.CXTemplateArgumentKind_Template = CXTemplateArgumentKind.CXTemplateArgumentKind_Template
clang.CXTemplateArgumentKind_TemplateExpansion = CXTemplateArgumentKind.CXTemplateArgumentKind_TemplateExpansion
clang.CXTemplateArgumentKind_Expression = CXTemplateArgumentKind.CXTemplateArgumentKind_Expression
clang.CXTemplateArgumentKind_Pack = CXTemplateArgumentKind.CXTemplateArgumentKind_Pack
clang.CXTemplateArgumentKind_Invalid = CXTemplateArgumentKind.CXTemplateArgumentKind_Invalid

---@param C CXCursor
---@return integer
function clang.clang_Cursor_getNumTemplateArguments(C) end
clang.Cursor_getNumTemplateArguments = clang.clang_Cursor_getNumTemplateArguments

---@param C CXCursor
---@param I integer
---@return CXTemplateArgumentKind
function clang.clang_Cursor_getTemplateArgumentKind(C, I) end
clang.Cursor_getTemplateArgumentKind = clang.clang_Cursor_getTemplateArgumentKind

---@param C CXCursor
---@param I integer
---@return CXType
function clang.clang_Cursor_getTemplateArgumentType(C, I) end
clang.Cursor_getTemplateArgumentType = clang.clang_Cursor_getTemplateArgumentType

---@param C CXCursor
---@param I integer
---@return integer
function clang.clang_Cursor_getTemplateArgumentValue(C, I) end
clang.Cursor_getTemplateArgumentValue = clang.clang_Cursor_getTemplateArgumentValue

---@param C CXCursor
---@param I integer
---@return integer
function clang.clang_Cursor_getTemplateArgumentUnsignedValue(C, I) end
clang.Cursor_getTemplateArgumentUnsignedValue = clang.clang_Cursor_getTemplateArgumentUnsignedValue

---@param A CXType
---@param B CXType
---@return integer
function clang.clang_equalTypes(A, B) end
clang.equalTypes = clang.clang_equalTypes

---@param T CXType
---@return CXType
function clang.clang_getCanonicalType(T) end
clang.getCanonicalType = clang.clang_getCanonicalType

---@param T CXType
---@return integer
function clang.clang_isConstQualifiedType(T) end
clang.isConstQualifiedType = clang.clang_isConstQualifiedType

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isMacroFunctionLike(C) end
clang.Cursor_isMacroFunctionLike = clang.clang_Cursor_isMacroFunctionLike

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isMacroBuiltin(C) end
clang.Cursor_isMacroBuiltin = clang.clang_Cursor_isMacroBuiltin

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isFunctionInlined(C) end
clang.Cursor_isFunctionInlined = clang.clang_Cursor_isFunctionInlined

---@param T CXType
---@return integer
function clang.clang_isVolatileQualifiedType(T) end
clang.isVolatileQualifiedType = clang.clang_isVolatileQualifiedType

---@param T CXType
---@return integer
function clang.clang_isRestrictQualifiedType(T) end
clang.isRestrictQualifiedType = clang.clang_isRestrictQualifiedType

---@param T CXType
---@return integer
function clang.clang_getAddressSpace(T) end
clang.getAddressSpace = clang.clang_getAddressSpace

---@param CT CXType
---@return CXString
function clang.clang_getTypedefName(CT) end
clang.getTypedefName = clang.clang_getTypedefName

---@param T CXType
---@return CXType
function clang.clang_getPointeeType(T) end
clang.getPointeeType = clang.clang_getPointeeType

---@param CT CXType
---@return CXType
function clang.clang_getUnqualifiedType(CT) end
clang.getUnqualifiedType = clang.clang_getUnqualifiedType

---@param CT CXType
---@return CXType
function clang.clang_getNonReferenceType(CT) end
clang.getNonReferenceType = clang.clang_getNonReferenceType

---@param T CXType
---@return CXCursor
function clang.clang_getTypeDeclaration(T) end
clang.getTypeDeclaration = clang.clang_getTypeDeclaration

---@param C CXCursor
---@return CXString
function clang.clang_getDeclObjCTypeEncoding(C) end
clang.getDeclObjCTypeEncoding = clang.clang_getDeclObjCTypeEncoding

---@param type CXType
---@return CXString
function clang.clang_Type_getObjCEncoding(type) end
clang.Type_getObjCEncoding = clang.clang_Type_getObjCEncoding

---@param K CXTypeKind
---@return CXString
function clang.clang_getTypeKindSpelling(K) end
clang.getTypeKindSpelling = clang.clang_getTypeKindSpelling

---@param T CXType
---@return CXCallingConv
function clang.clang_getFunctionTypeCallingConv(T) end
clang.getFunctionTypeCallingConv = clang.clang_getFunctionTypeCallingConv

---@param T CXType
---@return CXType
function clang.clang_getResultType(T) end
clang.getResultType = clang.clang_getResultType

---@param T CXType
---@return integer
function clang.clang_getExceptionSpecificationType(T) end
clang.getExceptionSpecificationType = clang.clang_getExceptionSpecificationType

---@param T CXType
---@return integer
function clang.clang_getNumArgTypes(T) end
clang.getNumArgTypes = clang.clang_getNumArgTypes

---@param T CXType
---@param i integer
---@return CXType
function clang.clang_getArgType(T, i) end
clang.getArgType = clang.clang_getArgType

---@param T CXType
---@return CXType
function clang.clang_Type_getObjCObjectBaseType(T) end
clang.Type_getObjCObjectBaseType = clang.clang_Type_getObjCObjectBaseType

---@param T CXType
---@return integer
function clang.clang_Type_getNumObjCProtocolRefs(T) end
clang.Type_getNumObjCProtocolRefs = clang.clang_Type_getNumObjCProtocolRefs

---@param T CXType
---@param i integer
---@return CXCursor
function clang.clang_Type_getObjCProtocolDecl(T, i) end
clang.Type_getObjCProtocolDecl = clang.clang_Type_getObjCProtocolDecl

---@param T CXType
---@return integer
function clang.clang_Type_getNumObjCTypeArgs(T) end
clang.Type_getNumObjCTypeArgs = clang.clang_Type_getNumObjCTypeArgs

---@param T CXType
---@param i integer
---@return CXType
function clang.clang_Type_getObjCTypeArg(T, i) end
clang.Type_getObjCTypeArg = clang.clang_Type_getObjCTypeArg

---@param T CXType
---@return integer
function clang.clang_isFunctionTypeVariadic(T) end
clang.isFunctionTypeVariadic = clang.clang_isFunctionTypeVariadic

---@param C CXCursor
---@return CXType
function clang.clang_getCursorResultType(C) end
clang.getCursorResultType = clang.clang_getCursorResultType

---@param C CXCursor
---@return integer
function clang.clang_getCursorExceptionSpecificationType(C) end
clang.getCursorExceptionSpecificationType = clang.clang_getCursorExceptionSpecificationType

---@param T CXType
---@return integer
function clang.clang_isPODType(T) end
clang.isPODType = clang.clang_isPODType

---@param T CXType
---@return CXType
function clang.clang_getElementType(T) end
clang.getElementType = clang.clang_getElementType

---@param T CXType
---@return integer
function clang.clang_getNumElements(T) end
clang.getNumElements = clang.clang_getNumElements

---@param T CXType
---@return CXType
function clang.clang_getArrayElementType(T) end
clang.getArrayElementType = clang.clang_getArrayElementType

---@param T CXType
---@return integer
function clang.clang_getArraySize(T) end
clang.getArraySize = clang.clang_getArraySize

---@param T CXType
---@return CXType
function clang.clang_Type_getNamedType(T) end
clang.Type_getNamedType = clang.clang_Type_getNamedType

---@param T CXType
---@return integer
function clang.clang_Type_isTransparentTagTypedef(T) end
clang.Type_isTransparentTagTypedef = clang.clang_Type_isTransparentTagTypedef

---@enum CXTypeNullabilityKind
local CXTypeNullabilityKind = {
    CXTypeNullability_NonNull = 0,
    CXTypeNullability_Nullable = 1,
    CXTypeNullability_Unspecified = 2,
    CXTypeNullability_Invalid = 3,
    CXTypeNullability_NullableResult = 4,
}

clang.CXTypeNullability_NonNull = CXTypeNullabilityKind.CXTypeNullability_NonNull
clang.CXTypeNullability_Nullable = CXTypeNullabilityKind.CXTypeNullability_Nullable
clang.CXTypeNullability_Unspecified = CXTypeNullabilityKind.CXTypeNullability_Unspecified
clang.CXTypeNullability_Invalid = CXTypeNullabilityKind.CXTypeNullability_Invalid
clang.CXTypeNullability_NullableResult = CXTypeNullabilityKind.CXTypeNullability_NullableResult

---@param T CXType
---@return CXTypeNullabilityKind
function clang.clang_Type_getNullability(T) end
clang.Type_getNullability = clang.clang_Type_getNullability

---@enum CXTypeLayoutError
local CXTypeLayoutError = {
    CXTypeLayoutError_Invalid = -1,
    CXTypeLayoutError_Incomplete = -2,
    CXTypeLayoutError_Dependent = -3,
    CXTypeLayoutError_NotConstantSize = -4,
    CXTypeLayoutError_InvalidFieldName = -5,
    CXTypeLayoutError_Undeduced = -6,
}

clang.CXTypeLayoutError_Invalid = CXTypeLayoutError.CXTypeLayoutError_Invalid
clang.CXTypeLayoutError_Incomplete = CXTypeLayoutError.CXTypeLayoutError_Incomplete
clang.CXTypeLayoutError_Dependent = CXTypeLayoutError.CXTypeLayoutError_Dependent
clang.CXTypeLayoutError_NotConstantSize = CXTypeLayoutError.CXTypeLayoutError_NotConstantSize
clang.CXTypeLayoutError_InvalidFieldName = CXTypeLayoutError.CXTypeLayoutError_InvalidFieldName
clang.CXTypeLayoutError_Undeduced = CXTypeLayoutError.CXTypeLayoutError_Undeduced

---@param T CXType
---@return integer
function clang.clang_Type_getAlignOf(T) end
clang.Type_getAlignOf = clang.clang_Type_getAlignOf

---@param T CXType
---@return CXType
function clang.clang_Type_getClassType(T) end
clang.Type_getClassType = clang.clang_Type_getClassType

---@param T CXType
---@return integer
function clang.clang_Type_getSizeOf(T) end
clang.Type_getSizeOf = clang.clang_Type_getSizeOf

---@param T CXType
---@param S string
---@return integer
function clang.clang_Type_getOffsetOf(T, S) end
clang.Type_getOffsetOf = clang.clang_Type_getOffsetOf

---@param T CXType
---@return CXType
function clang.clang_Type_getModifiedType(T) end
clang.Type_getModifiedType = clang.clang_Type_getModifiedType

---@param CT CXType
---@return CXType
function clang.clang_Type_getValueType(CT) end
clang.Type_getValueType = clang.clang_Type_getValueType

---@param C CXCursor
---@return integer
function clang.clang_Cursor_getOffsetOfField(C) end
clang.Cursor_getOffsetOfField = clang.clang_Cursor_getOffsetOfField

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isAnonymous(C) end
clang.Cursor_isAnonymous = clang.clang_Cursor_isAnonymous

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isAnonymousRecordDecl(C) end
clang.Cursor_isAnonymousRecordDecl = clang.clang_Cursor_isAnonymousRecordDecl

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isInlineNamespace(C) end
clang.Cursor_isInlineNamespace = clang.clang_Cursor_isInlineNamespace

---@enum CXRefQualifierKind
local CXRefQualifierKind = {
    CXRefQualifier_None = 0,
    CXRefQualifier_LValue = 1,
    CXRefQualifier_RValue = 2,
}

clang.CXRefQualifier_None = CXRefQualifierKind.CXRefQualifier_None
clang.CXRefQualifier_LValue = CXRefQualifierKind.CXRefQualifier_LValue
clang.CXRefQualifier_RValue = CXRefQualifierKind.CXRefQualifier_RValue

---@param T CXType
---@return integer
function clang.clang_Type_getNumTemplateArguments(T) end
clang.Type_getNumTemplateArguments = clang.clang_Type_getNumTemplateArguments

---@param T CXType
---@param i integer
---@return CXType
function clang.clang_Type_getTemplateArgumentAsType(T, i) end
clang.Type_getTemplateArgumentAsType = clang.clang_Type_getTemplateArgumentAsType

---@param T CXType
---@return CXRefQualifierKind
function clang.clang_Type_getCXXRefQualifier(T) end
clang.Type_getCXXRefQualifier = clang.clang_Type_getCXXRefQualifier

---@param arg_1 CXCursor
---@return integer
function clang.clang_isVirtualBase(arg_1) end
clang.isVirtualBase = clang.clang_isVirtualBase

---@enum CX_CXXAccessSpecifier
local CX_CXXAccessSpecifier = {
    CX_CXXInvalidAccessSpecifier = 0,
    CX_CXXPublic = 1,
    CX_CXXProtected = 2,
    CX_CXXPrivate = 3,
}

clang.CX_CXXInvalidAccessSpecifier = CX_CXXAccessSpecifier.CX_CXXInvalidAccessSpecifier
clang.CX_CXXPublic = CX_CXXAccessSpecifier.CX_CXXPublic
clang.CX_CXXProtected = CX_CXXAccessSpecifier.CX_CXXProtected
clang.CX_CXXPrivate = CX_CXXAccessSpecifier.CX_CXXPrivate

---@param arg_1 CXCursor
---@return CX_CXXAccessSpecifier
function clang.clang_getCXXAccessSpecifier(arg_1) end
clang.getCXXAccessSpecifier = clang.clang_getCXXAccessSpecifier

---@enum CX_StorageClass
local CX_StorageClass = {
    CX_SC_Invalid = 0,
    CX_SC_None = 1,
    CX_SC_Extern = 2,
    CX_SC_Static = 3,
    CX_SC_PrivateExtern = 4,
    CX_SC_OpenCLWorkGroupLocal = 5,
    CX_SC_Auto = 6,
    CX_SC_Register = 7,
}

clang.CX_SC_Invalid = CX_StorageClass.CX_SC_Invalid
clang.CX_SC_None = CX_StorageClass.CX_SC_None
clang.CX_SC_Extern = CX_StorageClass.CX_SC_Extern
clang.CX_SC_Static = CX_StorageClass.CX_SC_Static
clang.CX_SC_PrivateExtern = CX_StorageClass.CX_SC_PrivateExtern
clang.CX_SC_OpenCLWorkGroupLocal = CX_StorageClass.CX_SC_OpenCLWorkGroupLocal
clang.CX_SC_Auto = CX_StorageClass.CX_SC_Auto
clang.CX_SC_Register = CX_StorageClass.CX_SC_Register

---@param arg_1 CXCursor
---@return CX_StorageClass
function clang.clang_Cursor_getStorageClass(arg_1) end
clang.Cursor_getStorageClass = clang.clang_Cursor_getStorageClass

---@param cursor CXCursor
---@return integer
function clang.clang_getNumOverloadedDecls(cursor) end
clang.getNumOverloadedDecls = clang.clang_getNumOverloadedDecls

---@param cursor CXCursor
---@param index integer
---@return CXCursor
function clang.clang_getOverloadedDecl(cursor, index) end
clang.getOverloadedDecl = clang.clang_getOverloadedDecl

---@param arg_1 CXCursor
---@return CXType
function clang.clang_getIBOutletCollectionType(arg_1) end
clang.getIBOutletCollectionType = clang.clang_getIBOutletCollectionType

---@enum CXChildVisitResult
local CXChildVisitResult = {
    CXChildVisit_Break = 0,
    CXChildVisit_Continue = 1,
    CXChildVisit_Recurse = 2,
}

clang.CXChildVisit_Break = CXChildVisitResult.CXChildVisit_Break
clang.CXChildVisit_Continue = CXChildVisitResult.CXChildVisit_Continue
clang.CXChildVisit_Recurse = CXChildVisitResult.CXChildVisit_Recurse

---@alias CXCursorVisitor fun(arg_0: CXCursor, arg_1: CXCursor, arg_2: CXClientData): CXChildVisitResult

---@param parent CXCursor
---@param visitor CXCursorVisitor
---@param client_data CXClientData
---@return integer
function clang.clang_visitChildren(parent, visitor, client_data) end
clang.visitChildren = clang.clang_visitChildren

---@class _CXChildVisitResult

---@alias CXCursorVisitorBlock c.pointer<_CXChildVisitResult>?

---@param parent CXCursor
---@param block CXCursorVisitorBlock
---@return integer
function clang.clang_visitChildrenWithBlock(parent, block) end
clang.visitChildrenWithBlock = clang.clang_visitChildrenWithBlock

---@param arg_1 CXCursor
---@return CXString
function clang.clang_getCursorUSR(arg_1) end
clang.getCursorUSR = clang.clang_getCursorUSR

---@param class_name string
---@return CXString
function clang.clang_constructUSR_ObjCClass(class_name) end
clang.constructUSR_ObjCClass = clang.clang_constructUSR_ObjCClass

---@param class_name string
---@param category_name string
---@return CXString
function clang.clang_constructUSR_ObjCCategory(class_name, category_name) end
clang.constructUSR_ObjCCategory = clang.clang_constructUSR_ObjCCategory

---@param protocol_name string
---@return CXString
function clang.clang_constructUSR_ObjCProtocol(protocol_name) end
clang.constructUSR_ObjCProtocol = clang.clang_constructUSR_ObjCProtocol

---@param name string
---@param classUSR CXString
---@return CXString
function clang.clang_constructUSR_ObjCIvar(name, classUSR) end
clang.constructUSR_ObjCIvar = clang.clang_constructUSR_ObjCIvar

---@param name string
---@param isInstanceMethod integer
---@param classUSR CXString
---@return CXString
function clang.clang_constructUSR_ObjCMethod(name, isInstanceMethod, classUSR) end
clang.constructUSR_ObjCMethod = clang.clang_constructUSR_ObjCMethod

---@param property string
---@param classUSR CXString
---@return CXString
function clang.clang_constructUSR_ObjCProperty(property, classUSR) end
clang.constructUSR_ObjCProperty = clang.clang_constructUSR_ObjCProperty

---@param arg_1 CXCursor
---@return CXString
function clang.clang_getCursorSpelling(arg_1) end
clang.getCursorSpelling = clang.clang_getCursorSpelling

---@param arg_1 CXCursor
---@param pieceIndex integer
---@param options integer
---@return CXSourceRange
function clang.clang_Cursor_getSpellingNameRange(arg_1, pieceIndex, options) end
clang.Cursor_getSpellingNameRange = clang.clang_Cursor_getSpellingNameRange

---@alias CXPrintingPolicy ffi.cdata*

---@enum CXPrintingPolicyProperty
local CXPrintingPolicyProperty = {
    CXPrintingPolicy_Indentation = 0,
    CXPrintingPolicy_SuppressSpecifiers = 1,
    CXPrintingPolicy_SuppressTagKeyword = 2,
    CXPrintingPolicy_IncludeTagDefinition = 3,
    CXPrintingPolicy_SuppressScope = 4,
    CXPrintingPolicy_SuppressUnwrittenScope = 5,
    CXPrintingPolicy_SuppressInitializers = 6,
    CXPrintingPolicy_ConstantArraySizeAsWritten = 7,
    CXPrintingPolicy_AnonymousTagLocations = 8,
    CXPrintingPolicy_SuppressStrongLifetime = 9,
    CXPrintingPolicy_SuppressLifetimeQualifiers = 10,
    CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11,
    CXPrintingPolicy_Bool = 12,
    CXPrintingPolicy_Restrict = 13,
    CXPrintingPolicy_Alignof = 14,
    CXPrintingPolicy_UnderscoreAlignof = 15,
    CXPrintingPolicy_UseVoidForZeroParams = 16,
    CXPrintingPolicy_TerseOutput = 17,
    CXPrintingPolicy_PolishForDeclaration = 18,
    CXPrintingPolicy_Half = 19,
    CXPrintingPolicy_MSWChar = 20,
    CXPrintingPolicy_IncludeNewlines = 21,
    CXPrintingPolicy_MSVCFormatting = 22,
    CXPrintingPolicy_ConstantsAsWritten = 23,
    CXPrintingPolicy_SuppressImplicitBase = 24,
    CXPrintingPolicy_FullyQualifiedName = 25,
    CXPrintingPolicy_LastProperty = 25,
}

clang.CXPrintingPolicy_Indentation = CXPrintingPolicyProperty.CXPrintingPolicy_Indentation
clang.CXPrintingPolicy_SuppressSpecifiers = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressSpecifiers
clang.CXPrintingPolicy_SuppressTagKeyword = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTagKeyword
clang.CXPrintingPolicy_IncludeTagDefinition = CXPrintingPolicyProperty.CXPrintingPolicy_IncludeTagDefinition
clang.CXPrintingPolicy_SuppressScope = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressScope
clang.CXPrintingPolicy_SuppressUnwrittenScope = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressUnwrittenScope
clang.CXPrintingPolicy_SuppressInitializers = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressInitializers
clang.CXPrintingPolicy_ConstantArraySizeAsWritten = CXPrintingPolicyProperty.CXPrintingPolicy_ConstantArraySizeAsWritten
clang.CXPrintingPolicy_AnonymousTagLocations = CXPrintingPolicyProperty.CXPrintingPolicy_AnonymousTagLocations
clang.CXPrintingPolicy_SuppressStrongLifetime = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressStrongLifetime
clang.CXPrintingPolicy_SuppressLifetimeQualifiers = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressLifetimeQualifiers
clang.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors
clang.CXPrintingPolicy_Bool = CXPrintingPolicyProperty.CXPrintingPolicy_Bool
clang.CXPrintingPolicy_Restrict = CXPrintingPolicyProperty.CXPrintingPolicy_Restrict
clang.CXPrintingPolicy_Alignof = CXPrintingPolicyProperty.CXPrintingPolicy_Alignof
clang.CXPrintingPolicy_UnderscoreAlignof = CXPrintingPolicyProperty.CXPrintingPolicy_UnderscoreAlignof
clang.CXPrintingPolicy_UseVoidForZeroParams = CXPrintingPolicyProperty.CXPrintingPolicy_UseVoidForZeroParams
clang.CXPrintingPolicy_TerseOutput = CXPrintingPolicyProperty.CXPrintingPolicy_TerseOutput
clang.CXPrintingPolicy_PolishForDeclaration = CXPrintingPolicyProperty.CXPrintingPolicy_PolishForDeclaration
clang.CXPrintingPolicy_Half = CXPrintingPolicyProperty.CXPrintingPolicy_Half
clang.CXPrintingPolicy_MSWChar = CXPrintingPolicyProperty.CXPrintingPolicy_MSWChar
clang.CXPrintingPolicy_IncludeNewlines = CXPrintingPolicyProperty.CXPrintingPolicy_IncludeNewlines
clang.CXPrintingPolicy_MSVCFormatting = CXPrintingPolicyProperty.CXPrintingPolicy_MSVCFormatting
clang.CXPrintingPolicy_ConstantsAsWritten = CXPrintingPolicyProperty.CXPrintingPolicy_ConstantsAsWritten
clang.CXPrintingPolicy_SuppressImplicitBase = CXPrintingPolicyProperty.CXPrintingPolicy_SuppressImplicitBase
clang.CXPrintingPolicy_FullyQualifiedName = CXPrintingPolicyProperty.CXPrintingPolicy_FullyQualifiedName
clang.CXPrintingPolicy_LastProperty = CXPrintingPolicyProperty.CXPrintingPolicy_LastProperty

---@param Policy CXPrintingPolicy
---@param Property CXPrintingPolicyProperty
---@return integer
function clang.clang_PrintingPolicy_getProperty(Policy, Property) end
clang.PrintingPolicy_getProperty = clang.clang_PrintingPolicy_getProperty

---@param Policy CXPrintingPolicy
---@param Property CXPrintingPolicyProperty
---@param Value integer
---@return nil
function clang.clang_PrintingPolicy_setProperty(Policy, Property, Value) end
clang.PrintingPolicy_setProperty = clang.clang_PrintingPolicy_setProperty

---@param arg_1 CXCursor
---@return CXPrintingPolicy
function clang.clang_getCursorPrintingPolicy(arg_1) end
clang.getCursorPrintingPolicy = clang.clang_getCursorPrintingPolicy

---@param Policy CXPrintingPolicy
---@return nil
function clang.clang_PrintingPolicy_dispose(Policy) end
clang.PrintingPolicy_dispose = clang.clang_PrintingPolicy_dispose

---@param Cursor CXCursor
---@param Policy CXPrintingPolicy
---@return CXString
function clang.clang_getCursorPrettyPrinted(Cursor, Policy) end
clang.getCursorPrettyPrinted = clang.clang_getCursorPrettyPrinted

---@param arg_1 CXCursor
---@return CXString
function clang.clang_getCursorDisplayName(arg_1) end
clang.getCursorDisplayName = clang.clang_getCursorDisplayName

---@param arg_1 CXCursor
---@return CXCursor
function clang.clang_getCursorReferenced(arg_1) end
clang.getCursorReferenced = clang.clang_getCursorReferenced

---@param arg_1 CXCursor
---@return CXCursor
function clang.clang_getCursorDefinition(arg_1) end
clang.getCursorDefinition = clang.clang_getCursorDefinition

---@param arg_1 CXCursor
---@return integer
function clang.clang_isCursorDefinition(arg_1) end
clang.isCursorDefinition = clang.clang_isCursorDefinition

---@param arg_1 CXCursor
---@return CXCursor
function clang.clang_getCanonicalCursor(arg_1) end
clang.getCanonicalCursor = clang.clang_getCanonicalCursor

---@param arg_1 CXCursor
---@return integer
function clang.clang_Cursor_getObjCSelectorIndex(arg_1) end
clang.Cursor_getObjCSelectorIndex = clang.clang_Cursor_getObjCSelectorIndex

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isDynamicCall(C) end
clang.Cursor_isDynamicCall = clang.clang_Cursor_isDynamicCall

---@param C CXCursor
---@return CXType
function clang.clang_Cursor_getReceiverType(C) end
clang.Cursor_getReceiverType = clang.clang_Cursor_getReceiverType

---@enum CXObjCPropertyAttrKind
local CXObjCPropertyAttrKind = {
    CXObjCPropertyAttr_noattr = 0,
    CXObjCPropertyAttr_readonly = 1,
    CXObjCPropertyAttr_getter = 2,
    CXObjCPropertyAttr_assign = 4,
    CXObjCPropertyAttr_readwrite = 8,
    CXObjCPropertyAttr_retain = 16,
    CXObjCPropertyAttr_copy = 32,
    CXObjCPropertyAttr_nonatomic = 64,
    CXObjCPropertyAttr_setter = 128,
    CXObjCPropertyAttr_atomic = 256,
    CXObjCPropertyAttr_weak = 512,
    CXObjCPropertyAttr_strong = 1024,
    CXObjCPropertyAttr_unsafe_unretained = 2048,
    CXObjCPropertyAttr_class = 4096,
}

clang.CXObjCPropertyAttr_noattr = CXObjCPropertyAttrKind.CXObjCPropertyAttr_noattr
clang.CXObjCPropertyAttr_readonly = CXObjCPropertyAttrKind.CXObjCPropertyAttr_readonly
clang.CXObjCPropertyAttr_getter = CXObjCPropertyAttrKind.CXObjCPropertyAttr_getter
clang.CXObjCPropertyAttr_assign = CXObjCPropertyAttrKind.CXObjCPropertyAttr_assign
clang.CXObjCPropertyAttr_readwrite = CXObjCPropertyAttrKind.CXObjCPropertyAttr_readwrite
clang.CXObjCPropertyAttr_retain = CXObjCPropertyAttrKind.CXObjCPropertyAttr_retain
clang.CXObjCPropertyAttr_copy = CXObjCPropertyAttrKind.CXObjCPropertyAttr_copy
clang.CXObjCPropertyAttr_nonatomic = CXObjCPropertyAttrKind.CXObjCPropertyAttr_nonatomic
clang.CXObjCPropertyAttr_setter = CXObjCPropertyAttrKind.CXObjCPropertyAttr_setter
clang.CXObjCPropertyAttr_atomic = CXObjCPropertyAttrKind.CXObjCPropertyAttr_atomic
clang.CXObjCPropertyAttr_weak = CXObjCPropertyAttrKind.CXObjCPropertyAttr_weak
clang.CXObjCPropertyAttr_strong = CXObjCPropertyAttrKind.CXObjCPropertyAttr_strong
clang.CXObjCPropertyAttr_unsafe_unretained = CXObjCPropertyAttrKind.CXObjCPropertyAttr_unsafe_unretained
clang.CXObjCPropertyAttr_class = CXObjCPropertyAttrKind.CXObjCPropertyAttr_class

---@alias CXObjCPropertyAttrKind CXObjCPropertyAttrKind

---@param C CXCursor
---@param reserved integer
---@return integer
function clang.clang_Cursor_getObjCPropertyAttributes(C, reserved) end
clang.Cursor_getObjCPropertyAttributes = clang.clang_Cursor_getObjCPropertyAttributes

---@param C CXCursor
---@return CXString
function clang.clang_Cursor_getObjCPropertyGetterName(C) end
clang.Cursor_getObjCPropertyGetterName = clang.clang_Cursor_getObjCPropertyGetterName

---@param C CXCursor
---@return CXString
function clang.clang_Cursor_getObjCPropertySetterName(C) end
clang.Cursor_getObjCPropertySetterName = clang.clang_Cursor_getObjCPropertySetterName

---@enum CXObjCDeclQualifierKind
local CXObjCDeclQualifierKind = {
    CXObjCDeclQualifier_None = 0,
    CXObjCDeclQualifier_In = 1,
    CXObjCDeclQualifier_Inout = 2,
    CXObjCDeclQualifier_Out = 4,
    CXObjCDeclQualifier_Bycopy = 8,
    CXObjCDeclQualifier_Byref = 16,
    CXObjCDeclQualifier_Oneway = 32,
}

clang.CXObjCDeclQualifier_None = CXObjCDeclQualifierKind.CXObjCDeclQualifier_None
clang.CXObjCDeclQualifier_In = CXObjCDeclQualifierKind.CXObjCDeclQualifier_In
clang.CXObjCDeclQualifier_Inout = CXObjCDeclQualifierKind.CXObjCDeclQualifier_Inout
clang.CXObjCDeclQualifier_Out = CXObjCDeclQualifierKind.CXObjCDeclQualifier_Out
clang.CXObjCDeclQualifier_Bycopy = CXObjCDeclQualifierKind.CXObjCDeclQualifier_Bycopy
clang.CXObjCDeclQualifier_Byref = CXObjCDeclQualifierKind.CXObjCDeclQualifier_Byref
clang.CXObjCDeclQualifier_Oneway = CXObjCDeclQualifierKind.CXObjCDeclQualifier_Oneway

---@alias CXObjCDeclQualifierKind CXObjCDeclQualifierKind

---@param C CXCursor
---@return integer
function clang.clang_Cursor_getObjCDeclQualifiers(C) end
clang.Cursor_getObjCDeclQualifiers = clang.clang_Cursor_getObjCDeclQualifiers

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isObjCOptional(C) end
clang.Cursor_isObjCOptional = clang.clang_Cursor_isObjCOptional

---@param C CXCursor
---@return integer
function clang.clang_Cursor_isVariadic(C) end
clang.Cursor_isVariadic = clang.clang_Cursor_isVariadic

---@param C CXCursor
---@param language c.pointer<CXString>?
---@param definedIn c.pointer<CXString>?
---@param isGenerated c.pointer<integer>?
---@return integer
function clang.clang_Cursor_isExternalSymbol(C, language, definedIn, isGenerated) end
clang.Cursor_isExternalSymbol = clang.clang_Cursor_isExternalSymbol

---@param C CXCursor
---@return CXSourceRange
function clang.clang_Cursor_getCommentRange(C) end
clang.Cursor_getCommentRange = clang.clang_Cursor_getCommentRange

---@param C CXCursor
---@return CXString
function clang.clang_Cursor_getRawCommentText(C) end
clang.Cursor_getRawCommentText = clang.clang_Cursor_getRawCommentText

---@param C CXCursor
---@return CXString
function clang.clang_Cursor_getBriefCommentText(C) end
clang.Cursor_getBriefCommentText = clang.clang_Cursor_getBriefCommentText

---@param arg_1 CXCursor
---@return CXString
function clang.clang_Cursor_getMangling(arg_1) end
clang.Cursor_getMangling = clang.clang_Cursor_getMangling

---@param arg_1 CXCursor
---@return c.pointer<CXStringSet>?
function clang.clang_Cursor_getCXXManglings(arg_1) end
clang.Cursor_getCXXManglings = clang.clang_Cursor_getCXXManglings

---@param arg_1 CXCursor
---@return c.pointer<CXStringSet>?
function clang.clang_Cursor_getObjCManglings(arg_1) end
clang.Cursor_getObjCManglings = clang.clang_Cursor_getObjCManglings

---@alias CXModule ffi.cdata*

---@param C CXCursor
---@return CXModule
function clang.clang_Cursor_getModule(C) end
clang.Cursor_getModule = clang.clang_Cursor_getModule

---@param arg_1 CXTranslationUnit
---@param arg_2 CXFile
---@return CXModule
function clang.clang_getModuleForFile(arg_1, arg_2) end
clang.getModuleForFile = clang.clang_getModuleForFile

---@param Module CXModule
---@return CXFile
function clang.clang_Module_getASTFile(Module) end
clang.Module_getASTFile = clang.clang_Module_getASTFile

---@param Module CXModule
---@return CXModule
function clang.clang_Module_getParent(Module) end
clang.Module_getParent = clang.clang_Module_getParent

---@param Module CXModule
---@return CXString
function clang.clang_Module_getName(Module) end
clang.Module_getName = clang.clang_Module_getName

---@param Module CXModule
---@return CXString
function clang.clang_Module_getFullName(Module) end
clang.Module_getFullName = clang.clang_Module_getFullName

---@param Module CXModule
---@return integer
function clang.clang_Module_isSystem(Module) end
clang.Module_isSystem = clang.clang_Module_isSystem

---@param arg_1 CXTranslationUnit
---@param Module CXModule
---@return integer
function clang.clang_Module_getNumTopLevelHeaders(arg_1, Module) end
clang.Module_getNumTopLevelHeaders = clang.clang_Module_getNumTopLevelHeaders

---@param arg_1 CXTranslationUnit
---@param Module CXModule
---@param Index integer
---@return CXFile
function clang.clang_Module_getTopLevelHeader(arg_1, Module, Index) end
clang.Module_getTopLevelHeader = clang.clang_Module_getTopLevelHeader

---@param C CXCursor
---@return integer
function clang.clang_CXXConstructor_isConvertingConstructor(C) end
clang.CXXConstructor_isConvertingConstructor = clang.clang_CXXConstructor_isConvertingConstructor

---@param C CXCursor
---@return integer
function clang.clang_CXXConstructor_isCopyConstructor(C) end
clang.CXXConstructor_isCopyConstructor = clang.clang_CXXConstructor_isCopyConstructor

---@param C CXCursor
---@return integer
function clang.clang_CXXConstructor_isDefaultConstructor(C) end
clang.CXXConstructor_isDefaultConstructor = clang.clang_CXXConstructor_isDefaultConstructor

---@param C CXCursor
---@return integer
function clang.clang_CXXConstructor_isMoveConstructor(C) end
clang.CXXConstructor_isMoveConstructor = clang.clang_CXXConstructor_isMoveConstructor

---@param C CXCursor
---@return integer
function clang.clang_CXXField_isMutable(C) end
clang.CXXField_isMutable = clang.clang_CXXField_isMutable

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isDefaulted(C) end
clang.CXXMethod_isDefaulted = clang.clang_CXXMethod_isDefaulted

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isDeleted(C) end
clang.CXXMethod_isDeleted = clang.clang_CXXMethod_isDeleted

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isPureVirtual(C) end
clang.CXXMethod_isPureVirtual = clang.clang_CXXMethod_isPureVirtual

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isStatic(C) end
clang.CXXMethod_isStatic = clang.clang_CXXMethod_isStatic

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isVirtual(C) end
clang.CXXMethod_isVirtual = clang.clang_CXXMethod_isVirtual

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isCopyAssignmentOperator(C) end
clang.CXXMethod_isCopyAssignmentOperator = clang.clang_CXXMethod_isCopyAssignmentOperator

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isMoveAssignmentOperator(C) end
clang.CXXMethod_isMoveAssignmentOperator = clang.clang_CXXMethod_isMoveAssignmentOperator

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isExplicit(C) end
clang.CXXMethod_isExplicit = clang.clang_CXXMethod_isExplicit

---@param C CXCursor
---@return integer
function clang.clang_CXXRecord_isAbstract(C) end
clang.CXXRecord_isAbstract = clang.clang_CXXRecord_isAbstract

---@param C CXCursor
---@return integer
function clang.clang_EnumDecl_isScoped(C) end
clang.EnumDecl_isScoped = clang.clang_EnumDecl_isScoped

---@param C CXCursor
---@return integer
function clang.clang_CXXMethod_isConst(C) end
clang.CXXMethod_isConst = clang.clang_CXXMethod_isConst

---@param C CXCursor
---@return CXCursorKind
function clang.clang_getTemplateCursorKind(C) end
clang.getTemplateCursorKind = clang.clang_getTemplateCursorKind

---@param C CXCursor
---@return CXCursor
function clang.clang_getSpecializedCursorTemplate(C) end
clang.getSpecializedCursorTemplate = clang.clang_getSpecializedCursorTemplate

---@param C CXCursor
---@param NameFlags integer
---@param PieceIndex integer
---@return CXSourceRange
function clang.clang_getCursorReferenceNameRange(C, NameFlags, PieceIndex) end
clang.getCursorReferenceNameRange = clang.clang_getCursorReferenceNameRange

---@enum CXNameRefFlags
local CXNameRefFlags = {
    CXNameRange_WantQualifier = 1,
    CXNameRange_WantTemplateArgs = 2,
    CXNameRange_WantSinglePiece = 4,
}

clang.CXNameRange_WantQualifier = CXNameRefFlags.CXNameRange_WantQualifier
clang.CXNameRange_WantTemplateArgs = CXNameRefFlags.CXNameRange_WantTemplateArgs
clang.CXNameRange_WantSinglePiece = CXNameRefFlags.CXNameRange_WantSinglePiece

---@enum CXTokenKind
local CXTokenKind = {
    CXToken_Punctuation = 0,
    CXToken_Keyword = 1,
    CXToken_Identifier = 2,
    CXToken_Literal = 3,
    CXToken_Comment = 4,
}

clang.CXToken_Punctuation = CXTokenKind.CXToken_Punctuation
clang.CXToken_Keyword = CXTokenKind.CXToken_Keyword
clang.CXToken_Identifier = CXTokenKind.CXToken_Identifier
clang.CXToken_Literal = CXTokenKind.CXToken_Literal
clang.CXToken_Comment = CXTokenKind.CXToken_Comment

---@alias CXTokenKind CXTokenKind

---@class CXToken
---@field int_data integer[]
---@field ptr_data ffi.cdata*

---@alias CXToken CXToken

---@param TU CXTranslationUnit
---@param Location CXSourceLocation
---@return c.pointer<CXToken>?
function clang.clang_getToken(TU, Location) end
clang.getToken = clang.clang_getToken

---@param arg_1 CXToken
---@return CXTokenKind
function clang.clang_getTokenKind(arg_1) end
clang.getTokenKind = clang.clang_getTokenKind

---@param arg_1 CXTranslationUnit
---@param arg_2 CXToken
---@return CXString
function clang.clang_getTokenSpelling(arg_1, arg_2) end
clang.getTokenSpelling = clang.clang_getTokenSpelling

---@param arg_1 CXTranslationUnit
---@param arg_2 CXToken
---@return CXSourceLocation
function clang.clang_getTokenLocation(arg_1, arg_2) end
clang.getTokenLocation = clang.clang_getTokenLocation

---@param arg_1 CXTranslationUnit
---@param arg_2 CXToken
---@return CXSourceRange
function clang.clang_getTokenExtent(arg_1, arg_2) end
clang.getTokenExtent = clang.clang_getTokenExtent

---@param TU CXTranslationUnit
---@param Range CXSourceRange
---@param Tokens c.pointer<c.pointer<CXToken>?>?
---@param NumTokens c.pointer<integer>?
---@return nil
function clang.clang_tokenize(TU, Range, Tokens, NumTokens) end
clang.tokenize = clang.clang_tokenize

---@param TU CXTranslationUnit
---@param Tokens c.pointer<CXToken>?
---@param NumTokens integer
---@param Cursors c.pointer<CXCursor>?
---@return nil
function clang.clang_annotateTokens(TU, Tokens, NumTokens, Cursors) end
clang.annotateTokens = clang.clang_annotateTokens

---@param TU CXTranslationUnit
---@param Tokens c.pointer<CXToken>?
---@param NumTokens integer
---@return nil
function clang.clang_disposeTokens(TU, Tokens, NumTokens) end
clang.disposeTokens = clang.clang_disposeTokens

---@param Kind CXCursorKind
---@return CXString
function clang.clang_getCursorKindSpelling(Kind) end
clang.getCursorKindSpelling = clang.clang_getCursorKindSpelling

---@param arg_1 CXCursor
---@param startBuf c.pointer<string>?
---@param endBuf c.pointer<string>?
---@param startLine c.pointer<integer>?
---@param startColumn c.pointer<integer>?
---@param endLine c.pointer<integer>?
---@param endColumn c.pointer<integer>?
---@return nil
function clang.clang_getDefinitionSpellingAndExtent(arg_1, startBuf, endBuf, startLine, startColumn, endLine, endColumn) end
clang.getDefinitionSpellingAndExtent = clang.clang_getDefinitionSpellingAndExtent

---@return nil
function clang.clang_enableStackTraces() end
clang.enableStackTraces = clang.clang_enableStackTraces

---@param fn fun(arg_0: ffi.cdata*): nil
---@param user_data ffi.cdata*
---@param stack_size integer
---@return nil
function clang.clang_executeOnThread(fn, user_data, stack_size) end
clang.executeOnThread = clang.clang_executeOnThread

---@alias CXCompletionString ffi.cdata*

---@class CXCompletionResult
---@field CursorKind CXCursorKind
---@field CompletionString CXCompletionString

---@alias CXCompletionResult CXCompletionResult

---@enum CXCompletionChunkKind
local CXCompletionChunkKind = {
    CXCompletionChunk_Optional = 0,
    CXCompletionChunk_TypedText = 1,
    CXCompletionChunk_Text = 2,
    CXCompletionChunk_Placeholder = 3,
    CXCompletionChunk_Informative = 4,
    CXCompletionChunk_CurrentParameter = 5,
    CXCompletionChunk_LeftParen = 6,
    CXCompletionChunk_RightParen = 7,
    CXCompletionChunk_LeftBracket = 8,
    CXCompletionChunk_RightBracket = 9,
    CXCompletionChunk_LeftBrace = 10,
    CXCompletionChunk_RightBrace = 11,
    CXCompletionChunk_LeftAngle = 12,
    CXCompletionChunk_RightAngle = 13,
    CXCompletionChunk_Comma = 14,
    CXCompletionChunk_ResultType = 15,
    CXCompletionChunk_Colon = 16,
    CXCompletionChunk_SemiColon = 17,
    CXCompletionChunk_Equal = 18,
    CXCompletionChunk_HorizontalSpace = 19,
    CXCompletionChunk_VerticalSpace = 20,
}

clang.CXCompletionChunk_Optional = CXCompletionChunkKind.CXCompletionChunk_Optional
clang.CXCompletionChunk_TypedText = CXCompletionChunkKind.CXCompletionChunk_TypedText
clang.CXCompletionChunk_Text = CXCompletionChunkKind.CXCompletionChunk_Text
clang.CXCompletionChunk_Placeholder = CXCompletionChunkKind.CXCompletionChunk_Placeholder
clang.CXCompletionChunk_Informative = CXCompletionChunkKind.CXCompletionChunk_Informative
clang.CXCompletionChunk_CurrentParameter = CXCompletionChunkKind.CXCompletionChunk_CurrentParameter
clang.CXCompletionChunk_LeftParen = CXCompletionChunkKind.CXCompletionChunk_LeftParen
clang.CXCompletionChunk_RightParen = CXCompletionChunkKind.CXCompletionChunk_RightParen
clang.CXCompletionChunk_LeftBracket = CXCompletionChunkKind.CXCompletionChunk_LeftBracket
clang.CXCompletionChunk_RightBracket = CXCompletionChunkKind.CXCompletionChunk_RightBracket
clang.CXCompletionChunk_LeftBrace = CXCompletionChunkKind.CXCompletionChunk_LeftBrace
clang.CXCompletionChunk_RightBrace = CXCompletionChunkKind.CXCompletionChunk_RightBrace
clang.CXCompletionChunk_LeftAngle = CXCompletionChunkKind.CXCompletionChunk_LeftAngle
clang.CXCompletionChunk_RightAngle = CXCompletionChunkKind.CXCompletionChunk_RightAngle
clang.CXCompletionChunk_Comma = CXCompletionChunkKind.CXCompletionChunk_Comma
clang.CXCompletionChunk_ResultType = CXCompletionChunkKind.CXCompletionChunk_ResultType
clang.CXCompletionChunk_Colon = CXCompletionChunkKind.CXCompletionChunk_Colon
clang.CXCompletionChunk_SemiColon = CXCompletionChunkKind.CXCompletionChunk_SemiColon
clang.CXCompletionChunk_Equal = CXCompletionChunkKind.CXCompletionChunk_Equal
clang.CXCompletionChunk_HorizontalSpace = CXCompletionChunkKind.CXCompletionChunk_HorizontalSpace
clang.CXCompletionChunk_VerticalSpace = CXCompletionChunkKind.CXCompletionChunk_VerticalSpace

---@param completion_string CXCompletionString
---@param chunk_number integer
---@return CXCompletionChunkKind
function clang.clang_getCompletionChunkKind(completion_string, chunk_number) end
clang.getCompletionChunkKind = clang.clang_getCompletionChunkKind

---@param completion_string CXCompletionString
---@param chunk_number integer
---@return CXString
function clang.clang_getCompletionChunkText(completion_string, chunk_number) end
clang.getCompletionChunkText = clang.clang_getCompletionChunkText

---@param completion_string CXCompletionString
---@param chunk_number integer
---@return CXCompletionString
function clang.clang_getCompletionChunkCompletionString(completion_string, chunk_number) end
clang.getCompletionChunkCompletionString = clang.clang_getCompletionChunkCompletionString

---@param completion_string CXCompletionString
---@return integer
function clang.clang_getNumCompletionChunks(completion_string) end
clang.getNumCompletionChunks = clang.clang_getNumCompletionChunks

---@param completion_string CXCompletionString
---@return integer
function clang.clang_getCompletionPriority(completion_string) end
clang.getCompletionPriority = clang.clang_getCompletionPriority

---@param completion_string CXCompletionString
---@return CXAvailabilityKind
function clang.clang_getCompletionAvailability(completion_string) end
clang.getCompletionAvailability = clang.clang_getCompletionAvailability

---@param completion_string CXCompletionString
---@return integer
function clang.clang_getCompletionNumAnnotations(completion_string) end
clang.getCompletionNumAnnotations = clang.clang_getCompletionNumAnnotations

---@param completion_string CXCompletionString
---@param annotation_number integer
---@return CXString
function clang.clang_getCompletionAnnotation(completion_string, annotation_number) end
clang.getCompletionAnnotation = clang.clang_getCompletionAnnotation

---@param completion_string CXCompletionString
---@param kind c.pointer<CXCursorKind>?
---@return CXString
function clang.clang_getCompletionParent(completion_string, kind) end
clang.getCompletionParent = clang.clang_getCompletionParent

---@param completion_string CXCompletionString
---@return CXString
function clang.clang_getCompletionBriefComment(completion_string) end
clang.getCompletionBriefComment = clang.clang_getCompletionBriefComment

---@param cursor CXCursor
---@return CXCompletionString
function clang.clang_getCursorCompletionString(cursor) end
clang.getCursorCompletionString = clang.clang_getCursorCompletionString

---@class CXCodeCompleteResults
---@field Results c.pointer<CXCompletionResult>?
---@field NumResults integer

---@alias CXCodeCompleteResults CXCodeCompleteResults

---@param results c.pointer<CXCodeCompleteResults>?
---@param completion_index integer
---@return integer
function clang.clang_getCompletionNumFixIts(results, completion_index) end
clang.getCompletionNumFixIts = clang.clang_getCompletionNumFixIts

---@param results c.pointer<CXCodeCompleteResults>?
---@param completion_index integer
---@param fixit_index integer
---@param replacement_range c.pointer<CXSourceRange>?
---@return CXString
function clang.clang_getCompletionFixIt(results, completion_index, fixit_index, replacement_range) end
clang.getCompletionFixIt = clang.clang_getCompletionFixIt

---@enum CXCodeComplete_Flags
local CXCodeComplete_Flags = {
    CXCodeComplete_IncludeMacros = 1,
    CXCodeComplete_IncludeCodePatterns = 2,
    CXCodeComplete_IncludeBriefComments = 4,
    CXCodeComplete_SkipPreamble = 8,
    CXCodeComplete_IncludeCompletionsWithFixIts = 16,
}

clang.CXCodeComplete_IncludeMacros = CXCodeComplete_Flags.CXCodeComplete_IncludeMacros
clang.CXCodeComplete_IncludeCodePatterns = CXCodeComplete_Flags.CXCodeComplete_IncludeCodePatterns
clang.CXCodeComplete_IncludeBriefComments = CXCodeComplete_Flags.CXCodeComplete_IncludeBriefComments
clang.CXCodeComplete_SkipPreamble = CXCodeComplete_Flags.CXCodeComplete_SkipPreamble
clang.CXCodeComplete_IncludeCompletionsWithFixIts = CXCodeComplete_Flags.CXCodeComplete_IncludeCompletionsWithFixIts

---@enum CXCompletionContext
local CXCompletionContext = {
    CXCompletionContext_Unexposed = 0,
    CXCompletionContext_AnyType = 1,
    CXCompletionContext_AnyValue = 2,
    CXCompletionContext_ObjCObjectValue = 4,
    CXCompletionContext_ObjCSelectorValue = 8,
    CXCompletionContext_CXXClassTypeValue = 16,
    CXCompletionContext_DotMemberAccess = 32,
    CXCompletionContext_ArrowMemberAccess = 64,
    CXCompletionContext_ObjCPropertyAccess = 128,
    CXCompletionContext_EnumTag = 256,
    CXCompletionContext_UnionTag = 512,
    CXCompletionContext_StructTag = 1024,
    CXCompletionContext_ClassTag = 2048,
    CXCompletionContext_Namespace = 4096,
    CXCompletionContext_NestedNameSpecifier = 8192,
    CXCompletionContext_ObjCInterface = 16384,
    CXCompletionContext_ObjCProtocol = 32768,
    CXCompletionContext_ObjCCategory = 65536,
    CXCompletionContext_ObjCInstanceMessage = 131072,
    CXCompletionContext_ObjCClassMessage = 262144,
    CXCompletionContext_ObjCSelectorName = 524288,
    CXCompletionContext_MacroName = 1048576,
    CXCompletionContext_NaturalLanguage = 2097152,
    CXCompletionContext_IncludedFile = 4194304,
    CXCompletionContext_Unknown = 8388607,
}

clang.CXCompletionContext_Unexposed = CXCompletionContext.CXCompletionContext_Unexposed
clang.CXCompletionContext_AnyType = CXCompletionContext.CXCompletionContext_AnyType
clang.CXCompletionContext_AnyValue = CXCompletionContext.CXCompletionContext_AnyValue
clang.CXCompletionContext_ObjCObjectValue = CXCompletionContext.CXCompletionContext_ObjCObjectValue
clang.CXCompletionContext_ObjCSelectorValue = CXCompletionContext.CXCompletionContext_ObjCSelectorValue
clang.CXCompletionContext_CXXClassTypeValue = CXCompletionContext.CXCompletionContext_CXXClassTypeValue
clang.CXCompletionContext_DotMemberAccess = CXCompletionContext.CXCompletionContext_DotMemberAccess
clang.CXCompletionContext_ArrowMemberAccess = CXCompletionContext.CXCompletionContext_ArrowMemberAccess
clang.CXCompletionContext_ObjCPropertyAccess = CXCompletionContext.CXCompletionContext_ObjCPropertyAccess
clang.CXCompletionContext_EnumTag = CXCompletionContext.CXCompletionContext_EnumTag
clang.CXCompletionContext_UnionTag = CXCompletionContext.CXCompletionContext_UnionTag
clang.CXCompletionContext_StructTag = CXCompletionContext.CXCompletionContext_StructTag
clang.CXCompletionContext_ClassTag = CXCompletionContext.CXCompletionContext_ClassTag
clang.CXCompletionContext_Namespace = CXCompletionContext.CXCompletionContext_Namespace
clang.CXCompletionContext_NestedNameSpecifier = CXCompletionContext.CXCompletionContext_NestedNameSpecifier
clang.CXCompletionContext_ObjCInterface = CXCompletionContext.CXCompletionContext_ObjCInterface
clang.CXCompletionContext_ObjCProtocol = CXCompletionContext.CXCompletionContext_ObjCProtocol
clang.CXCompletionContext_ObjCCategory = CXCompletionContext.CXCompletionContext_ObjCCategory
clang.CXCompletionContext_ObjCInstanceMessage = CXCompletionContext.CXCompletionContext_ObjCInstanceMessage
clang.CXCompletionContext_ObjCClassMessage = CXCompletionContext.CXCompletionContext_ObjCClassMessage
clang.CXCompletionContext_ObjCSelectorName = CXCompletionContext.CXCompletionContext_ObjCSelectorName
clang.CXCompletionContext_MacroName = CXCompletionContext.CXCompletionContext_MacroName
clang.CXCompletionContext_NaturalLanguage = CXCompletionContext.CXCompletionContext_NaturalLanguage
clang.CXCompletionContext_IncludedFile = CXCompletionContext.CXCompletionContext_IncludedFile
clang.CXCompletionContext_Unknown = CXCompletionContext.CXCompletionContext_Unknown

---@return integer
function clang.clang_defaultCodeCompleteOptions() end
clang.defaultCodeCompleteOptions = clang.clang_defaultCodeCompleteOptions

---@param TU CXTranslationUnit
---@param complete_filename string
---@param complete_line integer
---@param complete_column integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param num_unsaved_files integer
---@param options integer
---@return c.pointer<CXCodeCompleteResults>?
function clang.clang_codeCompleteAt(TU, complete_filename, complete_line, complete_column, unsaved_files, num_unsaved_files, options) end
clang.codeCompleteAt = clang.clang_codeCompleteAt

---@param Results c.pointer<CXCompletionResult>?
---@param NumResults integer
---@return nil
function clang.clang_sortCodeCompletionResults(Results, NumResults) end
clang.sortCodeCompletionResults = clang.clang_sortCodeCompletionResults

---@param Results c.pointer<CXCodeCompleteResults>?
---@return nil
function clang.clang_disposeCodeCompleteResults(Results) end
clang.disposeCodeCompleteResults = clang.clang_disposeCodeCompleteResults

---@param Results c.pointer<CXCodeCompleteResults>?
---@return integer
function clang.clang_codeCompleteGetNumDiagnostics(Results) end
clang.codeCompleteGetNumDiagnostics = clang.clang_codeCompleteGetNumDiagnostics

---@param Results c.pointer<CXCodeCompleteResults>?
---@param Index integer
---@return CXDiagnostic
function clang.clang_codeCompleteGetDiagnostic(Results, Index) end
clang.codeCompleteGetDiagnostic = clang.clang_codeCompleteGetDiagnostic

---@param Results c.pointer<CXCodeCompleteResults>?
---@return integer
function clang.clang_codeCompleteGetContexts(Results) end
clang.codeCompleteGetContexts = clang.clang_codeCompleteGetContexts

---@param Results c.pointer<CXCodeCompleteResults>?
---@param IsIncomplete c.pointer<integer>?
---@return CXCursorKind
function clang.clang_codeCompleteGetContainerKind(Results, IsIncomplete) end
clang.codeCompleteGetContainerKind = clang.clang_codeCompleteGetContainerKind

---@param Results c.pointer<CXCodeCompleteResults>?
---@return CXString
function clang.clang_codeCompleteGetContainerUSR(Results) end
clang.codeCompleteGetContainerUSR = clang.clang_codeCompleteGetContainerUSR

---@param Results c.pointer<CXCodeCompleteResults>?
---@return CXString
function clang.clang_codeCompleteGetObjCSelector(Results) end
clang.codeCompleteGetObjCSelector = clang.clang_codeCompleteGetObjCSelector

---@return CXString
function clang.clang_getClangVersion() end
clang.getClangVersion = clang.clang_getClangVersion

---@param isEnabled integer
---@return nil
function clang.clang_toggleCrashRecovery(isEnabled) end
clang.toggleCrashRecovery = clang.clang_toggleCrashRecovery

---@alias CXInclusionVisitor fun(arg_0: CXFile, arg_1: c.pointer<CXSourceLocation>?, arg_2: integer, arg_3: CXClientData): nil

---@param tu CXTranslationUnit
---@param visitor CXInclusionVisitor
---@param client_data CXClientData
---@return nil
function clang.clang_getInclusions(tu, visitor, client_data) end
clang.getInclusions = clang.clang_getInclusions

---@enum CXEvalResultKind
local CXEvalResultKind = {
    CXEval_Int = 1,
    CXEval_Float = 2,
    CXEval_ObjCStrLiteral = 3,
    CXEval_StrLiteral = 4,
    CXEval_CFStr = 5,
    CXEval_Other = 6,
    CXEval_UnExposed = 0,
}

clang.CXEval_Int = CXEvalResultKind.CXEval_Int
clang.CXEval_Float = CXEvalResultKind.CXEval_Float
clang.CXEval_ObjCStrLiteral = CXEvalResultKind.CXEval_ObjCStrLiteral
clang.CXEval_StrLiteral = CXEvalResultKind.CXEval_StrLiteral
clang.CXEval_CFStr = CXEvalResultKind.CXEval_CFStr
clang.CXEval_Other = CXEvalResultKind.CXEval_Other
clang.CXEval_UnExposed = CXEvalResultKind.CXEval_UnExposed

---@alias CXEvalResultKind CXEvalResultKind

---@alias CXEvalResult ffi.cdata*

---@param C CXCursor
---@return CXEvalResult
function clang.clang_Cursor_Evaluate(C) end
clang.Cursor_Evaluate = clang.clang_Cursor_Evaluate

---@param E CXEvalResult
---@return CXEvalResultKind
function clang.clang_EvalResult_getKind(E) end
clang.EvalResult_getKind = clang.clang_EvalResult_getKind

---@param E CXEvalResult
---@return integer
function clang.clang_EvalResult_getAsInt(E) end
clang.EvalResult_getAsInt = clang.clang_EvalResult_getAsInt

---@param E CXEvalResult
---@return integer
function clang.clang_EvalResult_getAsLongLong(E) end
clang.EvalResult_getAsLongLong = clang.clang_EvalResult_getAsLongLong

---@param E CXEvalResult
---@return integer
function clang.clang_EvalResult_isUnsignedInt(E) end
clang.EvalResult_isUnsignedInt = clang.clang_EvalResult_isUnsignedInt

---@param E CXEvalResult
---@return integer
function clang.clang_EvalResult_getAsUnsigned(E) end
clang.EvalResult_getAsUnsigned = clang.clang_EvalResult_getAsUnsigned

---@param E CXEvalResult
---@return number
function clang.clang_EvalResult_getAsDouble(E) end
clang.EvalResult_getAsDouble = clang.clang_EvalResult_getAsDouble

---@param E CXEvalResult
---@return string
function clang.clang_EvalResult_getAsStr(E) end
clang.EvalResult_getAsStr = clang.clang_EvalResult_getAsStr

---@param E CXEvalResult
---@return nil
function clang.clang_EvalResult_dispose(E) end
clang.EvalResult_dispose = clang.clang_EvalResult_dispose

---@alias CXRemapping ffi.cdata*

---@param path string
---@return CXRemapping
function clang.clang_getRemappings(path) end
clang.getRemappings = clang.clang_getRemappings

---@param filePaths c.pointer<string>?
---@param numFiles integer
---@return CXRemapping
function clang.clang_getRemappingsFromFileList(filePaths, numFiles) end
clang.getRemappingsFromFileList = clang.clang_getRemappingsFromFileList

---@param arg_1 CXRemapping
---@return integer
function clang.clang_remap_getNumFiles(arg_1) end
clang.remap_getNumFiles = clang.clang_remap_getNumFiles

---@param arg_1 CXRemapping
---@param index integer
---@param original c.pointer<CXString>?
---@param transformed c.pointer<CXString>?
---@return nil
function clang.clang_remap_getFilenames(arg_1, index, original, transformed) end
clang.remap_getFilenames = clang.clang_remap_getFilenames

---@param arg_1 CXRemapping
---@return nil
function clang.clang_remap_dispose(arg_1) end
clang.remap_dispose = clang.clang_remap_dispose

---@enum CXVisitorResult
local CXVisitorResult = {
    CXVisit_Break = 0,
    CXVisit_Continue = 1,
}

clang.CXVisit_Break = CXVisitorResult.CXVisit_Break
clang.CXVisit_Continue = CXVisitorResult.CXVisit_Continue

---@class CXCursorAndRangeVisitor
---@field context ffi.cdata*
---@field visit fun(arg_0: ffi.cdata*, arg_1: CXCursor, arg_2: CXSourceRange): CXVisitorResult

---@alias CXCursorAndRangeVisitor CXCursorAndRangeVisitor

---@enum CXResult
local CXResult = {
    CXResult_Success = 0,
    CXResult_Invalid = 1,
    CXResult_VisitBreak = 2,
}

clang.CXResult_Success = CXResult.CXResult_Success
clang.CXResult_Invalid = CXResult.CXResult_Invalid
clang.CXResult_VisitBreak = CXResult.CXResult_VisitBreak

---@alias CXResult CXResult

---@param cursor CXCursor
---@param file CXFile
---@param visitor CXCursorAndRangeVisitor
---@return CXResult
function clang.clang_findReferencesInFile(cursor, file, visitor) end
clang.findReferencesInFile = clang.clang_findReferencesInFile

---@param TU CXTranslationUnit
---@param file CXFile
---@param visitor CXCursorAndRangeVisitor
---@return CXResult
function clang.clang_findIncludesInFile(TU, file, visitor) end
clang.findIncludesInFile = clang.clang_findIncludesInFile

---@class _CXCursorAndRangeVisitorBlock

---@alias CXCursorAndRangeVisitorBlock c.pointer<_CXCursorAndRangeVisitorBlock>?

---@param arg_1 CXCursor
---@param arg_2 CXFile
---@param arg_3 CXCursorAndRangeVisitorBlock
---@return CXResult
function clang.clang_findReferencesInFileWithBlock(arg_1, arg_2, arg_3) end
clang.findReferencesInFileWithBlock = clang.clang_findReferencesInFileWithBlock

---@param arg_1 CXTranslationUnit
---@param arg_2 CXFile
---@param arg_3 CXCursorAndRangeVisitorBlock
---@return CXResult
function clang.clang_findIncludesInFileWithBlock(arg_1, arg_2, arg_3) end
clang.findIncludesInFileWithBlock = clang.clang_findIncludesInFileWithBlock

---@alias CXIdxClientFile ffi.cdata*

---@alias CXIdxClientEntity ffi.cdata*

---@alias CXIdxClientContainer ffi.cdata*

---@alias CXIdxClientASTFile ffi.cdata*

---@class CXIdxLoc
---@field ptr_data ffi.cdata*[]
---@field int_data integer

---@alias CXIdxLoc CXIdxLoc

---@class CXIdxIncludedFileInfo
---@field hashLoc CXIdxLoc
---@field filename string
---@field file CXFile
---@field isImport integer
---@field isAngled integer
---@field isModuleImport integer

---@alias CXIdxIncludedFileInfo CXIdxIncludedFileInfo

---@class CXIdxImportedASTFileInfo
---@field file CXFile
---@field module CXModule
---@field loc CXIdxLoc
---@field isImplicit integer

---@alias CXIdxImportedASTFileInfo CXIdxImportedASTFileInfo

---@enum CXIdxEntityKind
local CXIdxEntityKind = {
    CXIdxEntity_Unexposed = 0,
    CXIdxEntity_Typedef = 1,
    CXIdxEntity_Function = 2,
    CXIdxEntity_Variable = 3,
    CXIdxEntity_Field = 4,
    CXIdxEntity_EnumConstant = 5,
    CXIdxEntity_ObjCClass = 6,
    CXIdxEntity_ObjCProtocol = 7,
    CXIdxEntity_ObjCCategory = 8,
    CXIdxEntity_ObjCInstanceMethod = 9,
    CXIdxEntity_ObjCClassMethod = 10,
    CXIdxEntity_ObjCProperty = 11,
    CXIdxEntity_ObjCIvar = 12,
    CXIdxEntity_Enum = 13,
    CXIdxEntity_Struct = 14,
    CXIdxEntity_Union = 15,
    CXIdxEntity_CXXClass = 16,
    CXIdxEntity_CXXNamespace = 17,
    CXIdxEntity_CXXNamespaceAlias = 18,
    CXIdxEntity_CXXStaticVariable = 19,
    CXIdxEntity_CXXStaticMethod = 20,
    CXIdxEntity_CXXInstanceMethod = 21,
    CXIdxEntity_CXXConstructor = 22,
    CXIdxEntity_CXXDestructor = 23,
    CXIdxEntity_CXXConversionFunction = 24,
    CXIdxEntity_CXXTypeAlias = 25,
    CXIdxEntity_CXXInterface = 26,
    CXIdxEntity_CXXConcept = 27,
}

clang.CXIdxEntity_Unexposed = CXIdxEntityKind.CXIdxEntity_Unexposed
clang.CXIdxEntity_Typedef = CXIdxEntityKind.CXIdxEntity_Typedef
clang.CXIdxEntity_Function = CXIdxEntityKind.CXIdxEntity_Function
clang.CXIdxEntity_Variable = CXIdxEntityKind.CXIdxEntity_Variable
clang.CXIdxEntity_Field = CXIdxEntityKind.CXIdxEntity_Field
clang.CXIdxEntity_EnumConstant = CXIdxEntityKind.CXIdxEntity_EnumConstant
clang.CXIdxEntity_ObjCClass = CXIdxEntityKind.CXIdxEntity_ObjCClass
clang.CXIdxEntity_ObjCProtocol = CXIdxEntityKind.CXIdxEntity_ObjCProtocol
clang.CXIdxEntity_ObjCCategory = CXIdxEntityKind.CXIdxEntity_ObjCCategory
clang.CXIdxEntity_ObjCInstanceMethod = CXIdxEntityKind.CXIdxEntity_ObjCInstanceMethod
clang.CXIdxEntity_ObjCClassMethod = CXIdxEntityKind.CXIdxEntity_ObjCClassMethod
clang.CXIdxEntity_ObjCProperty = CXIdxEntityKind.CXIdxEntity_ObjCProperty
clang.CXIdxEntity_ObjCIvar = CXIdxEntityKind.CXIdxEntity_ObjCIvar
clang.CXIdxEntity_Enum = CXIdxEntityKind.CXIdxEntity_Enum
clang.CXIdxEntity_Struct = CXIdxEntityKind.CXIdxEntity_Struct
clang.CXIdxEntity_Union = CXIdxEntityKind.CXIdxEntity_Union
clang.CXIdxEntity_CXXClass = CXIdxEntityKind.CXIdxEntity_CXXClass
clang.CXIdxEntity_CXXNamespace = CXIdxEntityKind.CXIdxEntity_CXXNamespace
clang.CXIdxEntity_CXXNamespaceAlias = CXIdxEntityKind.CXIdxEntity_CXXNamespaceAlias
clang.CXIdxEntity_CXXStaticVariable = CXIdxEntityKind.CXIdxEntity_CXXStaticVariable
clang.CXIdxEntity_CXXStaticMethod = CXIdxEntityKind.CXIdxEntity_CXXStaticMethod
clang.CXIdxEntity_CXXInstanceMethod = CXIdxEntityKind.CXIdxEntity_CXXInstanceMethod
clang.CXIdxEntity_CXXConstructor = CXIdxEntityKind.CXIdxEntity_CXXConstructor
clang.CXIdxEntity_CXXDestructor = CXIdxEntityKind.CXIdxEntity_CXXDestructor
clang.CXIdxEntity_CXXConversionFunction = CXIdxEntityKind.CXIdxEntity_CXXConversionFunction
clang.CXIdxEntity_CXXTypeAlias = CXIdxEntityKind.CXIdxEntity_CXXTypeAlias
clang.CXIdxEntity_CXXInterface = CXIdxEntityKind.CXIdxEntity_CXXInterface
clang.CXIdxEntity_CXXConcept = CXIdxEntityKind.CXIdxEntity_CXXConcept

---@alias CXIdxEntityKind CXIdxEntityKind

---@enum CXIdxEntityLanguage
local CXIdxEntityLanguage = {
    CXIdxEntityLang_None = 0,
    CXIdxEntityLang_C = 1,
    CXIdxEntityLang_ObjC = 2,
    CXIdxEntityLang_CXX = 3,
    CXIdxEntityLang_Swift = 4,
}

clang.CXIdxEntityLang_None = CXIdxEntityLanguage.CXIdxEntityLang_None
clang.CXIdxEntityLang_C = CXIdxEntityLanguage.CXIdxEntityLang_C
clang.CXIdxEntityLang_ObjC = CXIdxEntityLanguage.CXIdxEntityLang_ObjC
clang.CXIdxEntityLang_CXX = CXIdxEntityLanguage.CXIdxEntityLang_CXX
clang.CXIdxEntityLang_Swift = CXIdxEntityLanguage.CXIdxEntityLang_Swift

---@alias CXIdxEntityLanguage CXIdxEntityLanguage

---@enum CXIdxEntityCXXTemplateKind
local CXIdxEntityCXXTemplateKind = {
    CXIdxEntity_NonTemplate = 0,
    CXIdxEntity_Template = 1,
    CXIdxEntity_TemplatePartialSpecialization = 2,
    CXIdxEntity_TemplateSpecialization = 3,
}

clang.CXIdxEntity_NonTemplate = CXIdxEntityCXXTemplateKind.CXIdxEntity_NonTemplate
clang.CXIdxEntity_Template = CXIdxEntityCXXTemplateKind.CXIdxEntity_Template
clang.CXIdxEntity_TemplatePartialSpecialization = CXIdxEntityCXXTemplateKind.CXIdxEntity_TemplatePartialSpecialization
clang.CXIdxEntity_TemplateSpecialization = CXIdxEntityCXXTemplateKind.CXIdxEntity_TemplateSpecialization

---@alias CXIdxEntityCXXTemplateKind CXIdxEntityCXXTemplateKind

---@enum CXIdxAttrKind
local CXIdxAttrKind = {
    CXIdxAttr_Unexposed = 0,
    CXIdxAttr_IBAction = 1,
    CXIdxAttr_IBOutlet = 2,
    CXIdxAttr_IBOutletCollection = 3,
}

clang.CXIdxAttr_Unexposed = CXIdxAttrKind.CXIdxAttr_Unexposed
clang.CXIdxAttr_IBAction = CXIdxAttrKind.CXIdxAttr_IBAction
clang.CXIdxAttr_IBOutlet = CXIdxAttrKind.CXIdxAttr_IBOutlet
clang.CXIdxAttr_IBOutletCollection = CXIdxAttrKind.CXIdxAttr_IBOutletCollection

---@alias CXIdxAttrKind CXIdxAttrKind

---@class CXIdxAttrInfo
---@field kind CXIdxAttrKind
---@field cursor CXCursor
---@field loc CXIdxLoc

---@alias CXIdxAttrInfo CXIdxAttrInfo

---@class CXIdxEntityInfo
---@field kind CXIdxEntityKind
---@field templateKind CXIdxEntityCXXTemplateKind
---@field lang CXIdxEntityLanguage
---@field name string
---@field USR string
---@field cursor CXCursor
---@field attributes c.pointer<c.pointer<CXIdxAttrInfo>?>?
---@field numAttributes integer

---@alias CXIdxEntityInfo CXIdxEntityInfo

---@class CXIdxContainerInfo
---@field cursor CXCursor

---@alias CXIdxContainerInfo CXIdxContainerInfo

---@class CXIdxIBOutletCollectionAttrInfo
---@field attrInfo c.pointer<CXIdxAttrInfo>?
---@field objcClass c.pointer<CXIdxEntityInfo>?
---@field classCursor CXCursor
---@field classLoc CXIdxLoc

---@alias CXIdxIBOutletCollectionAttrInfo CXIdxIBOutletCollectionAttrInfo

---@enum CXIdxDeclInfoFlags
local CXIdxDeclInfoFlags = {
    CXIdxDeclFlag_Skipped = 1,
}

clang.CXIdxDeclFlag_Skipped = CXIdxDeclInfoFlags.CXIdxDeclFlag_Skipped

---@alias CXIdxDeclInfoFlags CXIdxDeclInfoFlags

---@class CXIdxDeclInfo
---@field entityInfo c.pointer<CXIdxEntityInfo>?
---@field cursor CXCursor
---@field loc CXIdxLoc
---@field semanticContainer c.pointer<CXIdxContainerInfo>?
---@field lexicalContainer c.pointer<CXIdxContainerInfo>?
---@field isRedeclaration integer
---@field isDefinition integer
---@field isContainer integer
---@field declAsContainer c.pointer<CXIdxContainerInfo>?
---@field isImplicit integer
---@field attributes c.pointer<c.pointer<CXIdxAttrInfo>?>?
---@field numAttributes integer
---@field flags integer

---@alias CXIdxDeclInfo CXIdxDeclInfo

---@enum CXIdxObjCContainerKind
local CXIdxObjCContainerKind = {
    CXIdxObjCContainer_ForwardRef = 0,
    CXIdxObjCContainer_Interface = 1,
    CXIdxObjCContainer_Implementation = 2,
}

clang.CXIdxObjCContainer_ForwardRef = CXIdxObjCContainerKind.CXIdxObjCContainer_ForwardRef
clang.CXIdxObjCContainer_Interface = CXIdxObjCContainerKind.CXIdxObjCContainer_Interface
clang.CXIdxObjCContainer_Implementation = CXIdxObjCContainerKind.CXIdxObjCContainer_Implementation

---@alias CXIdxObjCContainerKind CXIdxObjCContainerKind

---@class CXIdxObjCContainerDeclInfo
---@field declInfo c.pointer<CXIdxDeclInfo>?
---@field kind CXIdxObjCContainerKind

---@alias CXIdxObjCContainerDeclInfo CXIdxObjCContainerDeclInfo

---@class CXIdxBaseClassInfo
---@field base c.pointer<CXIdxEntityInfo>?
---@field cursor CXCursor
---@field loc CXIdxLoc

---@alias CXIdxBaseClassInfo CXIdxBaseClassInfo

---@class CXIdxObjCProtocolRefInfo
---@field protocol c.pointer<CXIdxEntityInfo>?
---@field cursor CXCursor
---@field loc CXIdxLoc

---@alias CXIdxObjCProtocolRefInfo CXIdxObjCProtocolRefInfo

---@class CXIdxObjCProtocolRefListInfo
---@field protocols c.pointer<c.pointer<CXIdxObjCProtocolRefInfo>?>?
---@field numProtocols integer

---@alias CXIdxObjCProtocolRefListInfo CXIdxObjCProtocolRefListInfo

---@class CXIdxObjCInterfaceDeclInfo
---@field containerInfo c.pointer<CXIdxObjCContainerDeclInfo>?
---@field superInfo c.pointer<CXIdxBaseClassInfo>?
---@field protocols c.pointer<CXIdxObjCProtocolRefListInfo>?

---@alias CXIdxObjCInterfaceDeclInfo CXIdxObjCInterfaceDeclInfo

---@class CXIdxObjCCategoryDeclInfo
---@field containerInfo c.pointer<CXIdxObjCContainerDeclInfo>?
---@field objcClass c.pointer<CXIdxEntityInfo>?
---@field classCursor CXCursor
---@field classLoc CXIdxLoc
---@field protocols c.pointer<CXIdxObjCProtocolRefListInfo>?

---@alias CXIdxObjCCategoryDeclInfo CXIdxObjCCategoryDeclInfo

---@class CXIdxObjCPropertyDeclInfo
---@field declInfo c.pointer<CXIdxDeclInfo>?
---@field getter c.pointer<CXIdxEntityInfo>?
---@field setter c.pointer<CXIdxEntityInfo>?

---@alias CXIdxObjCPropertyDeclInfo CXIdxObjCPropertyDeclInfo

---@class CXIdxCXXClassDeclInfo
---@field declInfo c.pointer<CXIdxDeclInfo>?
---@field bases c.pointer<c.pointer<CXIdxBaseClassInfo>?>?
---@field numBases integer

---@alias CXIdxCXXClassDeclInfo CXIdxCXXClassDeclInfo

---@enum CXIdxEntityRefKind
local CXIdxEntityRefKind = {
    CXIdxEntityRef_Direct = 1,
    CXIdxEntityRef_Implicit = 2,
}

clang.CXIdxEntityRef_Direct = CXIdxEntityRefKind.CXIdxEntityRef_Direct
clang.CXIdxEntityRef_Implicit = CXIdxEntityRefKind.CXIdxEntityRef_Implicit

---@alias CXIdxEntityRefKind CXIdxEntityRefKind

---@enum CXSymbolRole
local CXSymbolRole = {
    CXSymbolRole_None = 0,
    CXSymbolRole_Declaration = 1,
    CXSymbolRole_Definition = 2,
    CXSymbolRole_Reference = 4,
    CXSymbolRole_Read = 8,
    CXSymbolRole_Write = 16,
    CXSymbolRole_Call = 32,
    CXSymbolRole_Dynamic = 64,
    CXSymbolRole_AddressOf = 128,
    CXSymbolRole_Implicit = 256,
}

clang.CXSymbolRole_None = CXSymbolRole.CXSymbolRole_None
clang.CXSymbolRole_Declaration = CXSymbolRole.CXSymbolRole_Declaration
clang.CXSymbolRole_Definition = CXSymbolRole.CXSymbolRole_Definition
clang.CXSymbolRole_Reference = CXSymbolRole.CXSymbolRole_Reference
clang.CXSymbolRole_Read = CXSymbolRole.CXSymbolRole_Read
clang.CXSymbolRole_Write = CXSymbolRole.CXSymbolRole_Write
clang.CXSymbolRole_Call = CXSymbolRole.CXSymbolRole_Call
clang.CXSymbolRole_Dynamic = CXSymbolRole.CXSymbolRole_Dynamic
clang.CXSymbolRole_AddressOf = CXSymbolRole.CXSymbolRole_AddressOf
clang.CXSymbolRole_Implicit = CXSymbolRole.CXSymbolRole_Implicit

---@alias CXSymbolRole CXSymbolRole

---@class CXIdxEntityRefInfo
---@field kind CXIdxEntityRefKind
---@field cursor CXCursor
---@field loc CXIdxLoc
---@field referencedEntity c.pointer<CXIdxEntityInfo>?
---@field parentEntity c.pointer<CXIdxEntityInfo>?
---@field container c.pointer<CXIdxContainerInfo>?
---@field role CXSymbolRole

---@alias CXIdxEntityRefInfo CXIdxEntityRefInfo

---@class IndexerCallbacks
---@field abortQuery fun(arg_0: CXClientData, arg_1: ffi.cdata*): integer
---@field diagnostic fun(arg_0: CXClientData, arg_1: CXDiagnosticSet, arg_2: ffi.cdata*): nil
---@field enteredMainFile fun(arg_0: CXClientData, arg_1: CXFile, arg_2: ffi.cdata*): CXIdxClientFile
---@field ppIncludedFile fun(arg_0: CXClientData, arg_1: c.pointer<CXIdxIncludedFileInfo>?): CXIdxClientFile
---@field importedASTFile fun(arg_0: CXClientData, arg_1: c.pointer<CXIdxImportedASTFileInfo>?): CXIdxClientASTFile
---@field startedTranslationUnit fun(arg_0: CXClientData, arg_1: ffi.cdata*): CXIdxClientContainer
---@field indexDeclaration fun(arg_0: CXClientData, arg_1: c.pointer<CXIdxDeclInfo>?): nil
---@field indexEntityReference fun(arg_0: CXClientData, arg_1: c.pointer<CXIdxEntityRefInfo>?): nil

---@alias IndexerCallbacks IndexerCallbacks

---@param arg_1 CXIdxEntityKind
---@return integer
function clang.clang_index_isEntityObjCContainerKind(arg_1) end
clang.index_isEntityObjCContainerKind = clang.clang_index_isEntityObjCContainerKind

---@param arg_1 c.pointer<CXIdxDeclInfo>?
---@return c.pointer<CXIdxObjCContainerDeclInfo>?
function clang.clang_index_getObjCContainerDeclInfo(arg_1) end
clang.index_getObjCContainerDeclInfo = clang.clang_index_getObjCContainerDeclInfo

---@param arg_1 c.pointer<CXIdxDeclInfo>?
---@return c.pointer<CXIdxObjCInterfaceDeclInfo>?
function clang.clang_index_getObjCInterfaceDeclInfo(arg_1) end
clang.index_getObjCInterfaceDeclInfo = clang.clang_index_getObjCInterfaceDeclInfo

---@param arg_1 c.pointer<CXIdxDeclInfo>?
---@return c.pointer<CXIdxObjCCategoryDeclInfo>?
function clang.clang_index_getObjCCategoryDeclInfo(arg_1) end
clang.index_getObjCCategoryDeclInfo = clang.clang_index_getObjCCategoryDeclInfo

---@param arg_1 c.pointer<CXIdxDeclInfo>?
---@return c.pointer<CXIdxObjCProtocolRefListInfo>?
function clang.clang_index_getObjCProtocolRefListInfo(arg_1) end
clang.index_getObjCProtocolRefListInfo = clang.clang_index_getObjCProtocolRefListInfo

---@param arg_1 c.pointer<CXIdxDeclInfo>?
---@return c.pointer<CXIdxObjCPropertyDeclInfo>?
function clang.clang_index_getObjCPropertyDeclInfo(arg_1) end
clang.index_getObjCPropertyDeclInfo = clang.clang_index_getObjCPropertyDeclInfo

---@param arg_1 c.pointer<CXIdxAttrInfo>?
---@return c.pointer<CXIdxIBOutletCollectionAttrInfo>?
function clang.clang_index_getIBOutletCollectionAttrInfo(arg_1) end
clang.index_getIBOutletCollectionAttrInfo = clang.clang_index_getIBOutletCollectionAttrInfo

---@param arg_1 c.pointer<CXIdxDeclInfo>?
---@return c.pointer<CXIdxCXXClassDeclInfo>?
function clang.clang_index_getCXXClassDeclInfo(arg_1) end
clang.index_getCXXClassDeclInfo = clang.clang_index_getCXXClassDeclInfo

---@param arg_1 c.pointer<CXIdxContainerInfo>?
---@return CXIdxClientContainer
function clang.clang_index_getClientContainer(arg_1) end
clang.index_getClientContainer = clang.clang_index_getClientContainer

---@param arg_1 c.pointer<CXIdxContainerInfo>?
---@param arg_2 CXIdxClientContainer
---@return nil
function clang.clang_index_setClientContainer(arg_1, arg_2) end
clang.index_setClientContainer = clang.clang_index_setClientContainer

---@param arg_1 c.pointer<CXIdxEntityInfo>?
---@return CXIdxClientEntity
function clang.clang_index_getClientEntity(arg_1) end
clang.index_getClientEntity = clang.clang_index_getClientEntity

---@param arg_1 c.pointer<CXIdxEntityInfo>?
---@param arg_2 CXIdxClientEntity
---@return nil
function clang.clang_index_setClientEntity(arg_1, arg_2) end
clang.index_setClientEntity = clang.clang_index_setClientEntity

---@alias CXIndexAction ffi.cdata*

---@param CIdx CXIndex
---@return CXIndexAction
function clang.clang_IndexAction_create(CIdx) end
clang.IndexAction_create = clang.clang_IndexAction_create

---@param arg_1 CXIndexAction
---@return nil
function clang.clang_IndexAction_dispose(arg_1) end
clang.IndexAction_dispose = clang.clang_IndexAction_dispose

---@enum CXIndexOptFlags
local CXIndexOptFlags = {
    CXIndexOpt_None = 0,
    CXIndexOpt_SuppressRedundantRefs = 1,
    CXIndexOpt_IndexFunctionLocalSymbols = 2,
    CXIndexOpt_IndexImplicitTemplateInstantiations = 4,
    CXIndexOpt_SuppressWarnings = 8,
    CXIndexOpt_SkipParsedBodiesInSession = 16,
}

clang.CXIndexOpt_None = CXIndexOptFlags.CXIndexOpt_None
clang.CXIndexOpt_SuppressRedundantRefs = CXIndexOptFlags.CXIndexOpt_SuppressRedundantRefs
clang.CXIndexOpt_IndexFunctionLocalSymbols = CXIndexOptFlags.CXIndexOpt_IndexFunctionLocalSymbols
clang.CXIndexOpt_IndexImplicitTemplateInstantiations = CXIndexOptFlags.CXIndexOpt_IndexImplicitTemplateInstantiations
clang.CXIndexOpt_SuppressWarnings = CXIndexOptFlags.CXIndexOpt_SuppressWarnings
clang.CXIndexOpt_SkipParsedBodiesInSession = CXIndexOptFlags.CXIndexOpt_SkipParsedBodiesInSession

---@alias CXIndexOptFlags CXIndexOptFlags

---@param arg_1 CXIndexAction
---@param client_data CXClientData
---@param index_callbacks c.pointer<IndexerCallbacks>?
---@param index_callbacks_size integer
---@param index_options integer
---@param source_filename string
---@param command_line_args c.pointer<string>?
---@param num_command_line_args integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param num_unsaved_files integer
---@param out_TU c.pointer<CXTranslationUnit>?
---@param TU_options integer
---@return integer
function clang.clang_indexSourceFile(arg_1, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options) end
clang.indexSourceFile = clang.clang_indexSourceFile

---@param arg_1 CXIndexAction
---@param client_data CXClientData
---@param index_callbacks c.pointer<IndexerCallbacks>?
---@param index_callbacks_size integer
---@param index_options integer
---@param source_filename string
---@param command_line_args c.pointer<string>?
---@param num_command_line_args integer
---@param unsaved_files c.pointer<CXUnsavedFile>?
---@param num_unsaved_files integer
---@param out_TU c.pointer<CXTranslationUnit>?
---@param TU_options integer
---@return integer
function clang.clang_indexSourceFileFullArgv(arg_1, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options) end
clang.indexSourceFileFullArgv = clang.clang_indexSourceFileFullArgv

---@param arg_1 CXIndexAction
---@param client_data CXClientData
---@param index_callbacks c.pointer<IndexerCallbacks>?
---@param index_callbacks_size integer
---@param index_options integer
---@param arg_6 CXTranslationUnit
---@return integer
function clang.clang_indexTranslationUnit(arg_1, client_data, index_callbacks, index_callbacks_size, index_options, arg_6) end
clang.indexTranslationUnit = clang.clang_indexTranslationUnit

---@param loc CXIdxLoc
---@param indexFile c.pointer<CXIdxClientFile>?
---@param file c.pointer<CXFile>?
---@param line c.pointer<integer>?
---@param column c.pointer<integer>?
---@param offset c.pointer<integer>?
---@return nil
function clang.clang_indexLoc_getFileLocation(loc, indexFile, file, line, column, offset) end
clang.indexLoc_getFileLocation = clang.clang_indexLoc_getFileLocation

---@param loc CXIdxLoc
---@return CXSourceLocation
function clang.clang_indexLoc_getCXSourceLocation(loc) end
clang.indexLoc_getCXSourceLocation = clang.clang_indexLoc_getCXSourceLocation

---@alias CXFieldVisitor fun(arg_0: CXCursor, arg_1: CXClientData): CXVisitorResult

---@param T CXType
---@param visitor CXFieldVisitor
---@param client_data CXClientData
---@return integer
function clang.clang_Type_visitFields(T, visitor, client_data) end
clang.Type_visitFields = clang.clang_Type_visitFields

---@enum CXBinaryOperatorKind
local CXBinaryOperatorKind = {
    CXBinaryOperator_Invalid = 0,
    CXBinaryOperator_PtrMemD = 1,
    CXBinaryOperator_PtrMemI = 2,
    CXBinaryOperator_Mul = 3,
    CXBinaryOperator_Div = 4,
    CXBinaryOperator_Rem = 5,
    CXBinaryOperator_Add = 6,
    CXBinaryOperator_Sub = 7,
    CXBinaryOperator_Shl = 8,
    CXBinaryOperator_Shr = 9,
    CXBinaryOperator_Cmp = 10,
    CXBinaryOperator_LT = 11,
    CXBinaryOperator_GT = 12,
    CXBinaryOperator_LE = 13,
    CXBinaryOperator_GE = 14,
    CXBinaryOperator_EQ = 15,
    CXBinaryOperator_NE = 16,
    CXBinaryOperator_And = 17,
    CXBinaryOperator_Xor = 18,
    CXBinaryOperator_Or = 19,
    CXBinaryOperator_LAnd = 20,
    CXBinaryOperator_LOr = 21,
    CXBinaryOperator_Assign = 22,
    CXBinaryOperator_MulAssign = 23,
    CXBinaryOperator_DivAssign = 24,
    CXBinaryOperator_RemAssign = 25,
    CXBinaryOperator_AddAssign = 26,
    CXBinaryOperator_SubAssign = 27,
    CXBinaryOperator_ShlAssign = 28,
    CXBinaryOperator_ShrAssign = 29,
    CXBinaryOperator_AndAssign = 30,
    CXBinaryOperator_XorAssign = 31,
    CXBinaryOperator_OrAssign = 32,
    CXBinaryOperator_Comma = 33,
}

clang.CXBinaryOperator_Invalid = CXBinaryOperatorKind.CXBinaryOperator_Invalid
clang.CXBinaryOperator_PtrMemD = CXBinaryOperatorKind.CXBinaryOperator_PtrMemD
clang.CXBinaryOperator_PtrMemI = CXBinaryOperatorKind.CXBinaryOperator_PtrMemI
clang.CXBinaryOperator_Mul = CXBinaryOperatorKind.CXBinaryOperator_Mul
clang.CXBinaryOperator_Div = CXBinaryOperatorKind.CXBinaryOperator_Div
clang.CXBinaryOperator_Rem = CXBinaryOperatorKind.CXBinaryOperator_Rem
clang.CXBinaryOperator_Add = CXBinaryOperatorKind.CXBinaryOperator_Add
clang.CXBinaryOperator_Sub = CXBinaryOperatorKind.CXBinaryOperator_Sub
clang.CXBinaryOperator_Shl = CXBinaryOperatorKind.CXBinaryOperator_Shl
clang.CXBinaryOperator_Shr = CXBinaryOperatorKind.CXBinaryOperator_Shr
clang.CXBinaryOperator_Cmp = CXBinaryOperatorKind.CXBinaryOperator_Cmp
clang.CXBinaryOperator_LT = CXBinaryOperatorKind.CXBinaryOperator_LT
clang.CXBinaryOperator_GT = CXBinaryOperatorKind.CXBinaryOperator_GT
clang.CXBinaryOperator_LE = CXBinaryOperatorKind.CXBinaryOperator_LE
clang.CXBinaryOperator_GE = CXBinaryOperatorKind.CXBinaryOperator_GE
clang.CXBinaryOperator_EQ = CXBinaryOperatorKind.CXBinaryOperator_EQ
clang.CXBinaryOperator_NE = CXBinaryOperatorKind.CXBinaryOperator_NE
clang.CXBinaryOperator_And = CXBinaryOperatorKind.CXBinaryOperator_And
clang.CXBinaryOperator_Xor = CXBinaryOperatorKind.CXBinaryOperator_Xor
clang.CXBinaryOperator_Or = CXBinaryOperatorKind.CXBinaryOperator_Or
clang.CXBinaryOperator_LAnd = CXBinaryOperatorKind.CXBinaryOperator_LAnd
clang.CXBinaryOperator_LOr = CXBinaryOperatorKind.CXBinaryOperator_LOr
clang.CXBinaryOperator_Assign = CXBinaryOperatorKind.CXBinaryOperator_Assign
clang.CXBinaryOperator_MulAssign = CXBinaryOperatorKind.CXBinaryOperator_MulAssign
clang.CXBinaryOperator_DivAssign = CXBinaryOperatorKind.CXBinaryOperator_DivAssign
clang.CXBinaryOperator_RemAssign = CXBinaryOperatorKind.CXBinaryOperator_RemAssign
clang.CXBinaryOperator_AddAssign = CXBinaryOperatorKind.CXBinaryOperator_AddAssign
clang.CXBinaryOperator_SubAssign = CXBinaryOperatorKind.CXBinaryOperator_SubAssign
clang.CXBinaryOperator_ShlAssign = CXBinaryOperatorKind.CXBinaryOperator_ShlAssign
clang.CXBinaryOperator_ShrAssign = CXBinaryOperatorKind.CXBinaryOperator_ShrAssign
clang.CXBinaryOperator_AndAssign = CXBinaryOperatorKind.CXBinaryOperator_AndAssign
clang.CXBinaryOperator_XorAssign = CXBinaryOperatorKind.CXBinaryOperator_XorAssign
clang.CXBinaryOperator_OrAssign = CXBinaryOperatorKind.CXBinaryOperator_OrAssign
clang.CXBinaryOperator_Comma = CXBinaryOperatorKind.CXBinaryOperator_Comma

---@param kind CXBinaryOperatorKind
---@return CXString
function clang.clang_getBinaryOperatorKindSpelling(kind) end
clang.getBinaryOperatorKindSpelling = clang.clang_getBinaryOperatorKindSpelling

---@param cursor CXCursor
---@return CXBinaryOperatorKind
function clang.clang_getCursorBinaryOperatorKind(cursor) end
clang.getCursorBinaryOperatorKind = clang.clang_getCursorBinaryOperatorKind

---@enum CXUnaryOperatorKind
local CXUnaryOperatorKind = {
    CXUnaryOperator_Invalid = 0,
    CXUnaryOperator_PostInc = 1,
    CXUnaryOperator_PostDec = 2,
    CXUnaryOperator_PreInc = 3,
    CXUnaryOperator_PreDec = 4,
    CXUnaryOperator_AddrOf = 5,
    CXUnaryOperator_Deref = 6,
    CXUnaryOperator_Plus = 7,
    CXUnaryOperator_Minus = 8,
    CXUnaryOperator_Not = 9,
    CXUnaryOperator_LNot = 10,
    CXUnaryOperator_Real = 11,
    CXUnaryOperator_Imag = 12,
    CXUnaryOperator_Extension = 13,
    CXUnaryOperator_Coawait = 14,
}

clang.CXUnaryOperator_Invalid = CXUnaryOperatorKind.CXUnaryOperator_Invalid
clang.CXUnaryOperator_PostInc = CXUnaryOperatorKind.CXUnaryOperator_PostInc
clang.CXUnaryOperator_PostDec = CXUnaryOperatorKind.CXUnaryOperator_PostDec
clang.CXUnaryOperator_PreInc = CXUnaryOperatorKind.CXUnaryOperator_PreInc
clang.CXUnaryOperator_PreDec = CXUnaryOperatorKind.CXUnaryOperator_PreDec
clang.CXUnaryOperator_AddrOf = CXUnaryOperatorKind.CXUnaryOperator_AddrOf
clang.CXUnaryOperator_Deref = CXUnaryOperatorKind.CXUnaryOperator_Deref
clang.CXUnaryOperator_Plus = CXUnaryOperatorKind.CXUnaryOperator_Plus
clang.CXUnaryOperator_Minus = CXUnaryOperatorKind.CXUnaryOperator_Minus
clang.CXUnaryOperator_Not = CXUnaryOperatorKind.CXUnaryOperator_Not
clang.CXUnaryOperator_LNot = CXUnaryOperatorKind.CXUnaryOperator_LNot
clang.CXUnaryOperator_Real = CXUnaryOperatorKind.CXUnaryOperator_Real
clang.CXUnaryOperator_Imag = CXUnaryOperatorKind.CXUnaryOperator_Imag
clang.CXUnaryOperator_Extension = CXUnaryOperatorKind.CXUnaryOperator_Extension
clang.CXUnaryOperator_Coawait = CXUnaryOperatorKind.CXUnaryOperator_Coawait

---@param kind CXUnaryOperatorKind
---@return CXString
function clang.clang_getUnaryOperatorKindSpelling(kind) end
clang.getUnaryOperatorKindSpelling = clang.clang_getUnaryOperatorKindSpelling

---@param cursor CXCursor
---@return CXUnaryOperatorKind
function clang.clang_getCursorUnaryOperatorKind(cursor) end
clang.getCursorUnaryOperatorKind = clang.clang_getCursorUnaryOperatorKind

return clang
