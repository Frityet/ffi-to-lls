---Automatically generated bindings generated by ffi-to-lls.lua (https://github.com/Frityet/ffi-to-lls/)
---You can edit this file!
---The following prefix was removed: `SDL_`
---Lua language server will autocomplete both with and without the prefix.
---@meta sdl

---@class string* : ffi.cdata*
---@field [integer] ffi.cdata*

---@class integer* : ffi.cdata*
---@field [integer] integer

---@class number* : ffi.cdata*
---@field [integer] number

---@class boolean* : ffi.cdata*
---@field [integer] boolean

---@alias size_t integer
---@class size_t* : ffi.cdata*
---@field [integer] size_t

---@alias uint8_t integer
---@class uint8_t* : ffi.cdata*
---@field [integer] uint8_t

---@alias uint16_t integer
---@class uint16_t* : ffi.cdata*
---@field [integer] uint16_t

---@alias uint32_t integer
---@class uint32_t* : ffi.cdata*
---@field [integer] uint32_t

---@alias uint64_t integer
---@class uint64_t* : ffi.cdata*
---@field [integer] uint64_t

---@alias int8_t integer
---@class int8_t* : ffi.cdata*
---@field [integer] int8_t

---@alias int16_t integer
---@class int16_t* : ffi.cdata*
---@field [integer] int16_t

---@alias int32_t integer
---@class int32_t* : ffi.cdata*
---@field [integer] int32_t

---@alias int64_t integer
---@class int64_t* : ffi.cdata*
---@field [integer] int64_t

---@alias va_list ffi.cdata

---@class sdl
local sdl = {}

---@return string
function sdl.GetPlatform() end
sdl.SDL_GetPlatform = sdl.GetPlatform

---@alias SDL_bool boolean

---@class SDL_bool* : ffi.cdata*
---@field [integer] SDL_bool

---@class SDL_bool** : ffi.cdata*
---@field [integer] SDL_bool*

---@alias Sint8 int8_t

---@class Sint8* : ffi.cdata*
---@field [integer] Sint8

---@class Sint8** : ffi.cdata*
---@field [integer] Sint8*

---@alias Uint8 uint8_t

---@class Uint8* : ffi.cdata*
---@field [integer] Uint8

---@class Uint8** : ffi.cdata*
---@field [integer] Uint8*

---@alias Sint16 int16_t

---@class Sint16* : ffi.cdata*
---@field [integer] Sint16

---@class Sint16** : ffi.cdata*
---@field [integer] Sint16*

---@alias Uint16 uint16_t

---@class Uint16* : ffi.cdata*
---@field [integer] Uint16

---@class Uint16** : ffi.cdata*
---@field [integer] Uint16*

---@alias Sint32 int32_t

---@class Sint32* : ffi.cdata*
---@field [integer] Sint32

---@class Sint32** : ffi.cdata*
---@field [integer] Sint32*

---@alias Uint32 uint32_t

---@class Uint32* : ffi.cdata*
---@field [integer] Uint32

---@class Uint32** : ffi.cdata*
---@field [integer] Uint32*

---@alias Sint64 int64_t

---@class Sint64* : ffi.cdata*
---@field [integer] Sint64

---@class Sint64** : ffi.cdata*
---@field [integer] Sint64*

---@alias Uint64 uint64_t

---@class Uint64* : ffi.cdata*
---@field [integer] Uint64

---@class Uint64** : ffi.cdata*
---@field [integer] Uint64*

---@enum SDL_DUMMY_ENUM
local SDL_DUMMY_ENUM = {
    DUMMY_ENUM_VALUE = 0,
}

sdl.DUMMY_ENUM_VALUE = SDL_DUMMY_ENUM.DUMMY_ENUM_VALUE

---@class SDL_DUMMY_ENUM* : ffi.cdata*
---@field [integer] SDL_DUMMY_ENUM

---@class SDL_DUMMY_ENUM** : ffi.cdata*
---@field [integer] SDL_DUMMY_ENUM*

---@param size size_t
---@return ffi.cdata*
function sdl.malloc(size) end
sdl.SDL_malloc = sdl.malloc

---@param nmemb size_t
---@param size size_t
---@return ffi.cdata*
function sdl.calloc(nmemb, size) end
sdl.SDL_calloc = sdl.calloc

---@param mem ffi.cdata*
---@param size size_t
---@return ffi.cdata*
function sdl.realloc(mem, size) end
sdl.SDL_realloc = sdl.realloc

---@param mem ffi.cdata*
---@return nil
function sdl.free(mem) end
sdl.SDL_free = sdl.free

---@alias SDL_malloc_func fun(arg_0: size_t): ffi.cdata*

---@class SDL_malloc_func* : ffi.cdata*
---@field [integer] SDL_malloc_func

---@class SDL_malloc_func** : ffi.cdata*
---@field [integer] SDL_malloc_func*

---@alias SDL_calloc_func fun(arg_0: size_t, arg_1: size_t): ffi.cdata*

---@class SDL_calloc_func* : ffi.cdata*
---@field [integer] SDL_calloc_func

---@class SDL_calloc_func** : ffi.cdata*
---@field [integer] SDL_calloc_func*

---@alias SDL_realloc_func fun(arg_0: ffi.cdata*, arg_1: size_t): ffi.cdata*

---@class SDL_realloc_func* : ffi.cdata*
---@field [integer] SDL_realloc_func

---@class SDL_realloc_func** : ffi.cdata*
---@field [integer] SDL_realloc_func*

---@alias SDL_free_func fun(arg_0: ffi.cdata*): nil

---@class SDL_free_func* : ffi.cdata*
---@field [integer] SDL_free_func

---@class SDL_free_func** : ffi.cdata*
---@field [integer] SDL_free_func*

---@param malloc_func SDL_malloc_func*?
---@param calloc_func SDL_calloc_func*?
---@param realloc_func SDL_realloc_func*?
---@param free_func SDL_free_func*?
---@return nil
function sdl.GetOriginalMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func) end
sdl.SDL_GetOriginalMemoryFunctions = sdl.GetOriginalMemoryFunctions

---@param malloc_func SDL_malloc_func*?
---@param calloc_func SDL_calloc_func*?
---@param realloc_func SDL_realloc_func*?
---@param free_func SDL_free_func*?
---@return nil
function sdl.GetMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func) end
sdl.SDL_GetMemoryFunctions = sdl.GetMemoryFunctions

---@param malloc_func SDL_malloc_func
---@param calloc_func SDL_calloc_func
---@param realloc_func SDL_realloc_func
---@param free_func SDL_free_func
---@return integer
function sdl.SetMemoryFunctions(malloc_func, calloc_func, realloc_func, free_func) end
sdl.SDL_SetMemoryFunctions = sdl.SetMemoryFunctions

---@return integer
function sdl.GetNumAllocations() end
sdl.SDL_GetNumAllocations = sdl.GetNumAllocations

---@param name string
---@return string
function sdl.getenv(name) end
sdl.SDL_getenv = sdl.getenv

---@param name string
---@param value string
---@param overwrite integer
---@return integer
function sdl.setenv(name, value, overwrite) end
sdl.SDL_setenv = sdl.setenv

---@param base ffi.cdata*
---@param nmemb size_t
---@param size size_t
---@param compare fun(arg_0: ffi.cdata*, arg_1: ffi.cdata*): integer
---@return nil
function sdl.qsort(base, nmemb, size, compare) end
sdl.SDL_qsort = sdl.qsort

---@param key ffi.cdata*
---@param base ffi.cdata*
---@param nmemb size_t
---@param size size_t
---@param compare fun(arg_0: ffi.cdata*, arg_1: ffi.cdata*): integer
---@return ffi.cdata*
function sdl.bsearch(key, base, nmemb, size, compare) end
sdl.SDL_bsearch = sdl.bsearch

---@param x integer
---@return integer
function sdl.abs(x) end
sdl.SDL_abs = sdl.abs

---@param x integer
---@return integer
function sdl.isalpha(x) end
sdl.SDL_isalpha = sdl.isalpha

---@param x integer
---@return integer
function sdl.isalnum(x) end
sdl.SDL_isalnum = sdl.isalnum

---@param x integer
---@return integer
function sdl.isblank(x) end
sdl.SDL_isblank = sdl.isblank

---@param x integer
---@return integer
function sdl.iscntrl(x) end
sdl.SDL_iscntrl = sdl.iscntrl

---@param x integer
---@return integer
function sdl.isdigit(x) end
sdl.SDL_isdigit = sdl.isdigit

---@param x integer
---@return integer
function sdl.isxdigit(x) end
sdl.SDL_isxdigit = sdl.isxdigit

---@param x integer
---@return integer
function sdl.ispunct(x) end
sdl.SDL_ispunct = sdl.ispunct

---@param x integer
---@return integer
function sdl.isspace(x) end
sdl.SDL_isspace = sdl.isspace

---@param x integer
---@return integer
function sdl.isupper(x) end
sdl.SDL_isupper = sdl.isupper

---@param x integer
---@return integer
function sdl.islower(x) end
sdl.SDL_islower = sdl.islower

---@param x integer
---@return integer
function sdl.isprint(x) end
sdl.SDL_isprint = sdl.isprint

---@param x integer
---@return integer
function sdl.isgraph(x) end
sdl.SDL_isgraph = sdl.isgraph

---@param x integer
---@return integer
function sdl.toupper(x) end
sdl.SDL_toupper = sdl.toupper

---@param x integer
---@return integer
function sdl.tolower(x) end
sdl.SDL_tolower = sdl.tolower

---@param crc Uint16
---@param data ffi.cdata*
---@param len size_t
---@return Uint16
function sdl.crc16(crc, data, len) end
sdl.SDL_crc16 = sdl.crc16

---@param crc Uint32
---@param data ffi.cdata*
---@param len size_t
---@return Uint32
function sdl.crc32(crc, data, len) end
sdl.SDL_crc32 = sdl.crc32

---@param dst ffi.cdata*
---@param c integer
---@param len size_t
---@return ffi.cdata*
function sdl.memset(dst, c, len) end
sdl.SDL_memset = sdl.memset

---@param dst ffi.cdata*
---@param val Uint32
---@param dwords size_t
---@return nil
function sdl.memset4(dst, val, dwords) end
sdl.SDL_memset4 = sdl.memset4

---@param dst ffi.cdata*
---@param src ffi.cdata*
---@param len size_t
---@return ffi.cdata*
function sdl.memcpy(dst, src, len) end
sdl.SDL_memcpy = sdl.memcpy

---@param dst ffi.cdata*
---@param src ffi.cdata*
---@param len size_t
---@return ffi.cdata*
function sdl.memmove(dst, src, len) end
sdl.SDL_memmove = sdl.memmove

---@param s1 ffi.cdata*
---@param s2 ffi.cdata*
---@param len size_t
---@return integer
function sdl.memcmp(s1, s2, len) end
sdl.SDL_memcmp = sdl.memcmp

---@alias wchar_t integer
---@class wchar_t* : ffi.cdata*
---@field [integer] wchar_t

---@param wstr wchar_t*?
---@return size_t
function sdl.wcslen(wstr) end
sdl.SDL_wcslen = sdl.wcslen

---@param dst wchar_t*?
---@param src wchar_t*?
---@param maxlen size_t
---@return size_t
function sdl.wcslcpy(dst, src, maxlen) end
sdl.SDL_wcslcpy = sdl.wcslcpy

---@param dst wchar_t*?
---@param src wchar_t*?
---@param maxlen size_t
---@return size_t
function sdl.wcslcat(dst, src, maxlen) end
sdl.SDL_wcslcat = sdl.wcslcat

---@param wstr wchar_t*?
---@return wchar_t*?
function sdl.wcsdup(wstr) end
sdl.SDL_wcsdup = sdl.wcsdup

---@param haystack wchar_t*?
---@param needle wchar_t*?
---@return wchar_t*?
function sdl.wcsstr(haystack, needle) end
sdl.SDL_wcsstr = sdl.wcsstr

---@param str1 wchar_t*?
---@param str2 wchar_t*?
---@return integer
function sdl.wcscmp(str1, str2) end
sdl.SDL_wcscmp = sdl.wcscmp

---@param str1 wchar_t*?
---@param str2 wchar_t*?
---@param maxlen size_t
---@return integer
function sdl.wcsncmp(str1, str2, maxlen) end
sdl.SDL_wcsncmp = sdl.wcsncmp

---@param str1 wchar_t*?
---@param str2 wchar_t*?
---@return integer
function sdl.wcscasecmp(str1, str2) end
sdl.SDL_wcscasecmp = sdl.wcscasecmp

---@param str1 wchar_t*?
---@param str2 wchar_t*?
---@param len size_t
---@return integer
function sdl.wcsncasecmp(str1, str2, len) end
sdl.SDL_wcsncasecmp = sdl.wcsncasecmp

---@param str string
---@return size_t
function sdl.strlen(str) end
sdl.SDL_strlen = sdl.strlen

---@param dst string
---@param src string
---@param maxlen size_t
---@return size_t
function sdl.strlcpy(dst, src, maxlen) end
sdl.SDL_strlcpy = sdl.strlcpy

---@param dst string
---@param src string
---@param dst_bytes size_t
---@return size_t
function sdl.utf8strlcpy(dst, src, dst_bytes) end
sdl.SDL_utf8strlcpy = sdl.utf8strlcpy

---@param dst string
---@param src string
---@param maxlen size_t
---@return size_t
function sdl.strlcat(dst, src, maxlen) end
sdl.SDL_strlcat = sdl.strlcat

---@param str string
---@return string
function sdl.strdup(str) end
sdl.SDL_strdup = sdl.strdup

---@param str string
---@return string
function sdl.strrev(str) end
sdl.SDL_strrev = sdl.strrev

---@param str string
---@return string
function sdl.strupr(str) end
sdl.SDL_strupr = sdl.strupr

---@param str string
---@return string
function sdl.strlwr(str) end
sdl.SDL_strlwr = sdl.strlwr

---@param str string
---@param c integer
---@return string
function sdl.strchr(str, c) end
sdl.SDL_strchr = sdl.strchr

---@param str string
---@param c integer
---@return string
function sdl.strrchr(str, c) end
sdl.SDL_strrchr = sdl.strrchr

---@param haystack string
---@param needle string
---@return string
function sdl.strstr(haystack, needle) end
sdl.SDL_strstr = sdl.strstr

---@param haystack string
---@param needle string
---@return string
function sdl.strcasestr(haystack, needle) end
sdl.SDL_strcasestr = sdl.strcasestr

---@param s1 string
---@param s2 string
---@param saveptr string*?
---@return string
function sdl.strtokr(s1, s2, saveptr) end
sdl.SDL_strtokr = sdl.strtokr

---@param str string
---@return size_t
function sdl.utf8strlen(str) end
sdl.SDL_utf8strlen = sdl.utf8strlen

---@param str string
---@param bytes size_t
---@return size_t
function sdl.utf8strnlen(str, bytes) end
sdl.SDL_utf8strnlen = sdl.utf8strnlen

---@param value integer
---@param str string
---@param radix integer
---@return string
function sdl.itoa(value, str, radix) end
sdl.SDL_itoa = sdl.itoa

---@param value integer
---@param str string
---@param radix integer
---@return string
function sdl.uitoa(value, str, radix) end
sdl.SDL_uitoa = sdl.uitoa

---@param value integer
---@param str string
---@param radix integer
---@return string
function sdl.ltoa(value, str, radix) end
sdl.SDL_ltoa = sdl.ltoa

---@param value integer
---@param str string
---@param radix integer
---@return string
function sdl.ultoa(value, str, radix) end
sdl.SDL_ultoa = sdl.ultoa

---@param value Sint64
---@param str string
---@param radix integer
---@return string
function sdl.lltoa(value, str, radix) end
sdl.SDL_lltoa = sdl.lltoa

---@param value Uint64
---@param str string
---@param radix integer
---@return string
function sdl.ulltoa(value, str, radix) end
sdl.SDL_ulltoa = sdl.ulltoa

---@param str string
---@return integer
function sdl.atoi(str) end
sdl.SDL_atoi = sdl.atoi

---@param str string
---@return number
function sdl.atof(str) end
sdl.SDL_atof = sdl.atof

---@param str string
---@param endp string*?
---@param base integer
---@return integer
function sdl.strtol(str, endp, base) end
sdl.SDL_strtol = sdl.strtol

---@param str string
---@param endp string*?
---@param base integer
---@return integer
function sdl.strtoul(str, endp, base) end
sdl.SDL_strtoul = sdl.strtoul

---@param str string
---@param endp string*?
---@param base integer
---@return Sint64
function sdl.strtoll(str, endp, base) end
sdl.SDL_strtoll = sdl.strtoll

---@param str string
---@param endp string*?
---@param base integer
---@return Uint64
function sdl.strtoull(str, endp, base) end
sdl.SDL_strtoull = sdl.strtoull

---@param str string
---@param endp string*?
---@return number
function sdl.strtod(str, endp) end
sdl.SDL_strtod = sdl.strtod

---@param str1 string
---@param str2 string
---@return integer
function sdl.strcmp(str1, str2) end
sdl.SDL_strcmp = sdl.strcmp

---@param str1 string
---@param str2 string
---@param maxlen size_t
---@return integer
function sdl.strncmp(str1, str2, maxlen) end
sdl.SDL_strncmp = sdl.strncmp

---@param str1 string
---@param str2 string
---@return integer
function sdl.strcasecmp(str1, str2) end
sdl.SDL_strcasecmp = sdl.strcasecmp

---@param str1 string
---@param str2 string
---@param len size_t
---@return integer
function sdl.strncasecmp(str1, str2, len) end
sdl.SDL_strncasecmp = sdl.strncasecmp

---@param text string
---@param fmt string
---@param ... any
---@return integer
function sdl.sscanf(text, fmt, ...) end
sdl.SDL_sscanf = sdl.sscanf

---@param text string
---@param fmt string
---@param ap va_list
---@return integer
function sdl.vsscanf(text, fmt, ap) end
sdl.SDL_vsscanf = sdl.vsscanf

---@param text string
---@param maxlen size_t
---@param fmt string
---@param ... any
---@return integer
function sdl.snprintf(text, maxlen, fmt, ...) end
sdl.SDL_snprintf = sdl.snprintf

---@param text string
---@param maxlen size_t
---@param fmt string
---@param ap va_list
---@return integer
function sdl.vsnprintf(text, maxlen, fmt, ap) end
sdl.SDL_vsnprintf = sdl.vsnprintf

---@param strp string*?
---@param fmt string
---@param ... any
---@return integer
function sdl.asprintf(strp, fmt, ...) end
sdl.SDL_asprintf = sdl.asprintf

---@param strp string*?
---@param fmt string
---@param ap va_list
---@return integer
function sdl.vasprintf(strp, fmt, ap) end
sdl.SDL_vasprintf = sdl.vasprintf

---@param x number
---@return number
function sdl.acos(x) end
sdl.SDL_acos = sdl.acos

---@param x number
---@return number
function sdl.acosf(x) end
sdl.SDL_acosf = sdl.acosf

---@param x number
---@return number
function sdl.asin(x) end
sdl.SDL_asin = sdl.asin

---@param x number
---@return number
function sdl.asinf(x) end
sdl.SDL_asinf = sdl.asinf

---@param x number
---@return number
function sdl.atan(x) end
sdl.SDL_atan = sdl.atan

---@param x number
---@return number
function sdl.atanf(x) end
sdl.SDL_atanf = sdl.atanf

---@param y number
---@param x number
---@return number
function sdl.atan2(y, x) end
sdl.SDL_atan2 = sdl.atan2

---@param y number
---@param x number
---@return number
function sdl.atan2f(y, x) end
sdl.SDL_atan2f = sdl.atan2f

---@param x number
---@return number
function sdl.ceil(x) end
sdl.SDL_ceil = sdl.ceil

---@param x number
---@return number
function sdl.ceilf(x) end
sdl.SDL_ceilf = sdl.ceilf

---@param x number
---@param y number
---@return number
function sdl.copysign(x, y) end
sdl.SDL_copysign = sdl.copysign

---@param x number
---@param y number
---@return number
function sdl.copysignf(x, y) end
sdl.SDL_copysignf = sdl.copysignf

---@param x number
---@return number
function sdl.cos(x) end
sdl.SDL_cos = sdl.cos

---@param x number
---@return number
function sdl.cosf(x) end
sdl.SDL_cosf = sdl.cosf

---@param x number
---@return number
function sdl.exp(x) end
sdl.SDL_exp = sdl.exp

---@param x number
---@return number
function sdl.expf(x) end
sdl.SDL_expf = sdl.expf

---@param x number
---@return number
function sdl.fabs(x) end
sdl.SDL_fabs = sdl.fabs

---@param x number
---@return number
function sdl.fabsf(x) end
sdl.SDL_fabsf = sdl.fabsf

---@param x number
---@return number
function sdl.floor(x) end
sdl.SDL_floor = sdl.floor

---@param x number
---@return number
function sdl.floorf(x) end
sdl.SDL_floorf = sdl.floorf

---@param x number
---@return number
function sdl.trunc(x) end
sdl.SDL_trunc = sdl.trunc

---@param x number
---@return number
function sdl.truncf(x) end
sdl.SDL_truncf = sdl.truncf

---@param x number
---@param y number
---@return number
function sdl.fmod(x, y) end
sdl.SDL_fmod = sdl.fmod

---@param x number
---@param y number
---@return number
function sdl.fmodf(x, y) end
sdl.SDL_fmodf = sdl.fmodf

---@param x number
---@return number
function sdl.log(x) end
sdl.SDL_log = sdl.log

---@param x number
---@return number
function sdl.logf(x) end
sdl.SDL_logf = sdl.logf

---@param x number
---@return number
function sdl.log10(x) end
sdl.SDL_log10 = sdl.log10

---@param x number
---@return number
function sdl.log10f(x) end
sdl.SDL_log10f = sdl.log10f

---@param x number
---@param y number
---@return number
function sdl.pow(x, y) end
sdl.SDL_pow = sdl.pow

---@param x number
---@param y number
---@return number
function sdl.powf(x, y) end
sdl.SDL_powf = sdl.powf

---@param x number
---@return number
function sdl.round(x) end
sdl.SDL_round = sdl.round

---@param x number
---@return number
function sdl.roundf(x) end
sdl.SDL_roundf = sdl.roundf

---@param x number
---@return integer
function sdl.lround(x) end
sdl.SDL_lround = sdl.lround

---@param x number
---@return integer
function sdl.lroundf(x) end
sdl.SDL_lroundf = sdl.lroundf

---@param x number
---@param n integer
---@return number
function sdl.scalbn(x, n) end
sdl.SDL_scalbn = sdl.scalbn

---@param x number
---@param n integer
---@return number
function sdl.scalbnf(x, n) end
sdl.SDL_scalbnf = sdl.scalbnf

---@param x number
---@return number
function sdl.sin(x) end
sdl.SDL_sin = sdl.sin

---@param x number
---@return number
function sdl.sinf(x) end
sdl.SDL_sinf = sdl.sinf

---@param x number
---@return number
function sdl.sqrt(x) end
sdl.SDL_sqrt = sdl.sqrt

---@param x number
---@return number
function sdl.sqrtf(x) end
sdl.SDL_sqrtf = sdl.sqrtf

---@param x number
---@return number
function sdl.tan(x) end
sdl.SDL_tan = sdl.tan

---@param x number
---@return number
function sdl.tanf(x) end
sdl.SDL_tanf = sdl.tanf

---@class _SDL_iconv_t

---@class _SDL_iconv_t* : ffi.cdata*
---@field [integer] _SDL_iconv_t

---@class _SDL_iconv_t** : ffi.cdata*
---@field [integer] _SDL_iconv_t*

---@alias SDL_iconv_t _SDL_iconv_t*?

---@class SDL_iconv_t* : ffi.cdata*
---@field [integer] SDL_iconv_t

---@class SDL_iconv_t** : ffi.cdata*
---@field [integer] SDL_iconv_t*

---@param tocode string
---@param fromcode string
---@return SDL_iconv_t
function sdl.iconv_open(tocode, fromcode) end
sdl.SDL_iconv_open = sdl.iconv_open

---@param cd SDL_iconv_t
---@return integer
function sdl.iconv_close(cd) end
sdl.SDL_iconv_close = sdl.iconv_close

---@param cd SDL_iconv_t
---@param inbuf string*?
---@param inbytesleft size_t*?
---@param outbuf string*?
---@param outbytesleft size_t*?
---@return size_t
function sdl.iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft) end
sdl.SDL_iconv = sdl.iconv

---@param tocode string
---@param fromcode string
---@param inbuf string
---@param inbytesleft size_t
---@return string
function sdl.iconv_string(tocode, fromcode, inbuf, inbytesleft) end
sdl.SDL_iconv_string = sdl.iconv_string

---@param dst ffi.cdata*
---@param src ffi.cdata*
---@param dwords size_t
---@return ffi.cdata*
function sdl.memcpy4(dst, src, dwords) end
sdl.SDL_memcpy4 = sdl.memcpy4

---@param a size_t
---@param b size_t
---@param ret size_t*?
---@return integer
function sdl.size_mul_overflow(a, b, ret) end
sdl.SDL_size_mul_overflow = sdl.size_mul_overflow

---@param a size_t
---@param b size_t
---@param ret size_t*?
---@return integer
function sdl._size_mul_overflow_builtin(a, b, ret) end
sdl.SDL__size_mul_overflow_builtin = sdl._size_mul_overflow_builtin

---@param a size_t
---@param b size_t
---@param ret size_t*?
---@return integer
function sdl.size_add_overflow(a, b, ret) end
sdl.SDL_size_add_overflow = sdl.size_add_overflow

---@param a size_t
---@param b size_t
---@param ret size_t*?
---@return integer
function sdl._size_add_overflow_builtin(a, b, ret) end
sdl.SDL__size_add_overflow_builtin = sdl._size_add_overflow_builtin

---@alias SDL_main_func fun(arg_0: integer, arg_1: string[]): integer

---@class SDL_main_func* : ffi.cdata*
---@field [integer] SDL_main_func

---@class SDL_main_func** : ffi.cdata*
---@field [integer] SDL_main_func*

---@param argc integer
---@param argv string[]
---@return integer
function sdl.main(argc, argv) end
sdl.SDL_main = sdl.main

---@return nil
function sdl.SetMainReady() end
sdl.SDL_SetMainReady = sdl.SetMainReady

---@enum SDL_AssertState
local SDL_AssertState = {
    SDL_ASSERTION_RETRY = 0,
    SDL_ASSERTION_BREAK = 1,
    SDL_ASSERTION_ABORT = 2,
    SDL_ASSERTION_IGNORE = 3,
    SDL_ASSERTION_ALWAYS_IGNORE = 4,
}

sdl.SDL_ASSERTION_RETRY = SDL_AssertState.SDL_ASSERTION_RETRY
sdl.SDL_ASSERTION_BREAK = SDL_AssertState.SDL_ASSERTION_BREAK
sdl.SDL_ASSERTION_ABORT = SDL_AssertState.SDL_ASSERTION_ABORT
sdl.SDL_ASSERTION_IGNORE = SDL_AssertState.SDL_ASSERTION_IGNORE
sdl.SDL_ASSERTION_ALWAYS_IGNORE = SDL_AssertState.SDL_ASSERTION_ALWAYS_IGNORE

---@class SDL_AssertState* : ffi.cdata*
---@field [integer] SDL_AssertState

---@class SDL_AssertState** : ffi.cdata*
---@field [integer] SDL_AssertState*

---@class SDL_AssertData
---@field always_ignore integer
---@field trigger_count integer
---@field condition string
---@field filename string
---@field linenum integer
---@field function string
---@field next SDL_AssertData*?

---@class SDL_AssertData* : ffi.cdata*
---@field [integer] SDL_AssertData

---@class SDL_AssertData** : ffi.cdata*
---@field [integer] SDL_AssertData*

---@param arg_1 SDL_AssertData*?
---@param arg_2 string
---@param arg_3 string
---@param arg_4 integer
---@return SDL_AssertState
function sdl.ReportAssertion(arg_1, arg_2, arg_3, arg_4) end
sdl.SDL_ReportAssertion = sdl.ReportAssertion

---@alias SDL_AssertionHandler fun(arg_0: SDL_AssertData*?, arg_1: ffi.cdata*): SDL_AssertState

---@class SDL_AssertionHandler* : ffi.cdata*
---@field [integer] SDL_AssertionHandler

---@class SDL_AssertionHandler** : ffi.cdata*
---@field [integer] SDL_AssertionHandler*

---@param handler SDL_AssertionHandler
---@param userdata ffi.cdata*
---@return nil
function sdl.SetAssertionHandler(handler, userdata) end
sdl.SDL_SetAssertionHandler = sdl.SetAssertionHandler

---@return SDL_AssertionHandler
function sdl.GetDefaultAssertionHandler() end
sdl.SDL_GetDefaultAssertionHandler = sdl.GetDefaultAssertionHandler

---@param puserdata ffi.cdata*?
---@return SDL_AssertionHandler
function sdl.GetAssertionHandler(puserdata) end
sdl.SDL_GetAssertionHandler = sdl.GetAssertionHandler

---@return SDL_AssertData*?
function sdl.GetAssertionReport() end
sdl.SDL_GetAssertionReport = sdl.GetAssertionReport

---@return nil
function sdl.ResetAssertionReport() end
sdl.SDL_ResetAssertionReport = sdl.ResetAssertionReport

---@alias SDL_SpinLock integer

---@class SDL_SpinLock* : ffi.cdata*
---@field [integer] SDL_SpinLock

---@class SDL_SpinLock** : ffi.cdata*
---@field [integer] SDL_SpinLock*

---@param lock SDL_SpinLock*?
---@return SDL_bool
function sdl.AtomicTryLock(lock) end
sdl.SDL_AtomicTryLock = sdl.AtomicTryLock

---@param lock SDL_SpinLock*?
---@return nil
function sdl.AtomicLock(lock) end
sdl.SDL_AtomicLock = sdl.AtomicLock

---@param lock SDL_SpinLock*?
---@return nil
function sdl.AtomicUnlock(lock) end
sdl.SDL_AtomicUnlock = sdl.AtomicUnlock

---@return nil
function sdl.MemoryBarrierReleaseFunction() end
sdl.SDL_MemoryBarrierReleaseFunction = sdl.MemoryBarrierReleaseFunction

---@return nil
function sdl.MemoryBarrierAcquireFunction() end
sdl.SDL_MemoryBarrierAcquireFunction = sdl.MemoryBarrierAcquireFunction

---@class SDL_atomic_t
---@field value integer

---@class SDL_atomic_t* : ffi.cdata*
---@field [integer] SDL_atomic_t

---@class SDL_atomic_t** : ffi.cdata*
---@field [integer] SDL_atomic_t*

---@param a SDL_atomic_t*?
---@param oldval integer
---@param newval integer
---@return SDL_bool
function sdl.AtomicCAS(a, oldval, newval) end
sdl.SDL_AtomicCAS = sdl.AtomicCAS

---@param a SDL_atomic_t*?
---@param v integer
---@return integer
function sdl.AtomicSet(a, v) end
sdl.SDL_AtomicSet = sdl.AtomicSet

---@param a SDL_atomic_t*?
---@return integer
function sdl.AtomicGet(a) end
sdl.SDL_AtomicGet = sdl.AtomicGet

---@param a SDL_atomic_t*?
---@param v integer
---@return integer
function sdl.AtomicAdd(a, v) end
sdl.SDL_AtomicAdd = sdl.AtomicAdd

---@param a ffi.cdata*?
---@param oldval ffi.cdata*
---@param newval ffi.cdata*
---@return SDL_bool
function sdl.AtomicCASPtr(a, oldval, newval) end
sdl.SDL_AtomicCASPtr = sdl.AtomicCASPtr

---@param a ffi.cdata*?
---@param v ffi.cdata*
---@return ffi.cdata*
function sdl.AtomicSetPtr(a, v) end
sdl.SDL_AtomicSetPtr = sdl.AtomicSetPtr

---@param a ffi.cdata*?
---@return ffi.cdata*
function sdl.AtomicGetPtr(a) end
sdl.SDL_AtomicGetPtr = sdl.AtomicGetPtr

---@param fmt string
---@param ... any
---@return integer
function sdl.SetError(fmt, ...) end
sdl.SDL_SetError = sdl.SetError

---@return string
function sdl.GetError() end
sdl.SDL_GetError = sdl.GetError

---@param errstr string
---@param maxlen integer
---@return string
function sdl.GetErrorMsg(errstr, maxlen) end
sdl.SDL_GetErrorMsg = sdl.GetErrorMsg

---@return nil
function sdl.ClearError() end
sdl.SDL_ClearError = sdl.ClearError

---@enum SDL_errorcode
local SDL_errorcode = {
    SDL_ENOMEM = 0,
    SDL_EFREAD = 1,
    SDL_EFWRITE = 2,
    SDL_EFSEEK = 3,
    SDL_UNSUPPORTED = 4,
    SDL_LASTERROR = 5,
}

sdl.SDL_ENOMEM = SDL_errorcode.SDL_ENOMEM
sdl.SDL_EFREAD = SDL_errorcode.SDL_EFREAD
sdl.SDL_EFWRITE = SDL_errorcode.SDL_EFWRITE
sdl.SDL_EFSEEK = SDL_errorcode.SDL_EFSEEK
sdl.SDL_UNSUPPORTED = SDL_errorcode.SDL_UNSUPPORTED
sdl.SDL_LASTERROR = SDL_errorcode.SDL_LASTERROR

---@class SDL_errorcode* : ffi.cdata*
---@field [integer] SDL_errorcode

---@class SDL_errorcode** : ffi.cdata*
---@field [integer] SDL_errorcode*

---@param code SDL_errorcode
---@return integer
function sdl.Error(code) end
sdl.SDL_Error = sdl.Error

---@param x number
---@return number
function sdl.SwapFloat(x) end
sdl.SDL_SwapFloat = sdl.SwapFloat

---@class SDL_mutex

---@class SDL_mutex* : ffi.cdata*
---@field [integer] SDL_mutex

---@class SDL_mutex** : ffi.cdata*
---@field [integer] SDL_mutex*

---@return SDL_mutex*?
function sdl.CreateMutex() end
sdl.SDL_CreateMutex = sdl.CreateMutex

---@param mutex SDL_mutex*?
---@return integer
function sdl.LockMutex(mutex) end
sdl.SDL_LockMutex = sdl.LockMutex

---@param mutex SDL_mutex*?
---@return integer
function sdl.TryLockMutex(mutex) end
sdl.SDL_TryLockMutex = sdl.TryLockMutex

---@param mutex SDL_mutex*?
---@return integer
function sdl.UnlockMutex(mutex) end
sdl.SDL_UnlockMutex = sdl.UnlockMutex

---@param mutex SDL_mutex*?
---@return nil
function sdl.DestroyMutex(mutex) end
sdl.SDL_DestroyMutex = sdl.DestroyMutex

---@class SDL_semaphore

---@class SDL_semaphore* : ffi.cdata*
---@field [integer] SDL_semaphore

---@class SDL_semaphore** : ffi.cdata*
---@field [integer] SDL_semaphore*

---@alias SDL_sem SDL_semaphore

---@class SDL_sem* : ffi.cdata*
---@field [integer] SDL_sem

---@class SDL_sem** : ffi.cdata*
---@field [integer] SDL_sem*

---@param initial_value Uint32
---@return SDL_sem*?
function sdl.CreateSemaphore(initial_value) end
sdl.SDL_CreateSemaphore = sdl.CreateSemaphore

---@param sem SDL_sem*?
---@return nil
function sdl.DestroySemaphore(sem) end
sdl.SDL_DestroySemaphore = sdl.DestroySemaphore

---@param sem SDL_sem*?
---@return integer
function sdl.SemWait(sem) end
sdl.SDL_SemWait = sdl.SemWait

---@param sem SDL_sem*?
---@return integer
function sdl.SemTryWait(sem) end
sdl.SDL_SemTryWait = sdl.SemTryWait

---@param sem SDL_sem*?
---@param timeout Uint32
---@return integer
function sdl.SemWaitTimeout(sem, timeout) end
sdl.SDL_SemWaitTimeout = sdl.SemWaitTimeout

---@param sem SDL_sem*?
---@return integer
function sdl.SemPost(sem) end
sdl.SDL_SemPost = sdl.SemPost

---@param sem SDL_sem*?
---@return Uint32
function sdl.SemValue(sem) end
sdl.SDL_SemValue = sdl.SemValue

---@class SDL_cond

---@class SDL_cond* : ffi.cdata*
---@field [integer] SDL_cond

---@class SDL_cond** : ffi.cdata*
---@field [integer] SDL_cond*

---@return SDL_cond*?
function sdl.CreateCond() end
sdl.SDL_CreateCond = sdl.CreateCond

---@param cond SDL_cond*?
---@return nil
function sdl.DestroyCond(cond) end
sdl.SDL_DestroyCond = sdl.DestroyCond

---@param cond SDL_cond*?
---@return integer
function sdl.CondSignal(cond) end
sdl.SDL_CondSignal = sdl.CondSignal

---@param cond SDL_cond*?
---@return integer
function sdl.CondBroadcast(cond) end
sdl.SDL_CondBroadcast = sdl.CondBroadcast

---@param cond SDL_cond*?
---@param mutex SDL_mutex*?
---@return integer
function sdl.CondWait(cond, mutex) end
sdl.SDL_CondWait = sdl.CondWait

---@param cond SDL_cond*?
---@param mutex SDL_mutex*?
---@param ms Uint32
---@return integer
function sdl.CondWaitTimeout(cond, mutex, ms) end
sdl.SDL_CondWaitTimeout = sdl.CondWaitTimeout

---@class SDL_Thread

---@class SDL_Thread* : ffi.cdata*
---@field [integer] SDL_Thread

---@class SDL_Thread** : ffi.cdata*
---@field [integer] SDL_Thread*

---@alias SDL_threadID integer

---@class SDL_threadID* : ffi.cdata*
---@field [integer] SDL_threadID

---@class SDL_threadID** : ffi.cdata*
---@field [integer] SDL_threadID*

---@alias SDL_TLSID integer

---@class SDL_TLSID* : ffi.cdata*
---@field [integer] SDL_TLSID

---@class SDL_TLSID** : ffi.cdata*
---@field [integer] SDL_TLSID*

---@enum SDL_ThreadPriority
local SDL_ThreadPriority = {
    SDL_THREAD_PRIORITY_LOW = 0,
    SDL_THREAD_PRIORITY_NORMAL = 1,
    SDL_THREAD_PRIORITY_HIGH = 2,
    SDL_THREAD_PRIORITY_TIME_CRITICAL = 3,
}

sdl.SDL_THREAD_PRIORITY_LOW = SDL_ThreadPriority.SDL_THREAD_PRIORITY_LOW
sdl.SDL_THREAD_PRIORITY_NORMAL = SDL_ThreadPriority.SDL_THREAD_PRIORITY_NORMAL
sdl.SDL_THREAD_PRIORITY_HIGH = SDL_ThreadPriority.SDL_THREAD_PRIORITY_HIGH
sdl.SDL_THREAD_PRIORITY_TIME_CRITICAL = SDL_ThreadPriority.SDL_THREAD_PRIORITY_TIME_CRITICAL

---@class SDL_ThreadPriority* : ffi.cdata*
---@field [integer] SDL_ThreadPriority

---@class SDL_ThreadPriority** : ffi.cdata*
---@field [integer] SDL_ThreadPriority*

---@alias SDL_ThreadFunction fun(arg_0: ffi.cdata*): integer

---@class SDL_ThreadFunction* : ffi.cdata*
---@field [integer] SDL_ThreadFunction

---@class SDL_ThreadFunction** : ffi.cdata*
---@field [integer] SDL_ThreadFunction*

---@param fn SDL_ThreadFunction
---@param name string
---@param data ffi.cdata*
---@return SDL_Thread*?
function sdl.CreateThread(fn, name, data) end
sdl.SDL_CreateThread = sdl.CreateThread

---@param fn SDL_ThreadFunction
---@param name string
---@param stacksize size_t
---@param data ffi.cdata*
---@return SDL_Thread*?
function sdl.CreateThreadWithStackSize(fn, name, stacksize, data) end
sdl.SDL_CreateThreadWithStackSize = sdl.CreateThreadWithStackSize

---@param thread SDL_Thread*?
---@return string
function sdl.GetThreadName(thread) end
sdl.SDL_GetThreadName = sdl.GetThreadName

---@return SDL_threadID
function sdl.ThreadID() end
sdl.SDL_ThreadID = sdl.ThreadID

---@param thread SDL_Thread*?
---@return SDL_threadID
function sdl.GetThreadID(thread) end
sdl.SDL_GetThreadID = sdl.GetThreadID

---@param priority SDL_ThreadPriority
---@return integer
function sdl.SetThreadPriority(priority) end
sdl.SDL_SetThreadPriority = sdl.SetThreadPriority

---@param thread SDL_Thread*?
---@param status integer*?
---@return nil
function sdl.WaitThread(thread, status) end
sdl.SDL_WaitThread = sdl.WaitThread

---@param thread SDL_Thread*?
---@return nil
function sdl.DetachThread(thread) end
sdl.SDL_DetachThread = sdl.DetachThread

---@return SDL_TLSID
function sdl.TLSCreate() end
sdl.SDL_TLSCreate = sdl.TLSCreate

---@param id SDL_TLSID
---@return ffi.cdata*
function sdl.TLSGet(id) end
sdl.SDL_TLSGet = sdl.TLSGet

---@param id SDL_TLSID
---@param value ffi.cdata*
---@param destructor fun(arg_0: ffi.cdata*): nil
---@return integer
function sdl.TLSSet(id, value, destructor) end
sdl.SDL_TLSSet = sdl.TLSSet

---@return nil
function sdl.TLSCleanup() end
sdl.SDL_TLSCleanup = sdl.TLSCleanup

---@class SDL_RWops
---@field size fun(arg_0: SDL_RWops*?): Sint64
---@field seek fun(arg_0: SDL_RWops*?, arg_1: Sint64, arg_2: integer): Sint64
---@field read fun(arg_0: SDL_RWops*?, arg_1: ffi.cdata*, arg_2: size_t, arg_3: size_t): size_t
---@field write fun(arg_0: SDL_RWops*?, arg_1: ffi.cdata*, arg_2: size_t, arg_3: size_t): size_t
---@field close fun(arg_0: SDL_RWops*?): integer
---@field type Uint32
---@field hidden SDL_RWops*?

---@class SDL_RWops* : ffi.cdata*
---@field [integer] SDL_RWops

---@class SDL_RWops** : ffi.cdata*
---@field [integer] SDL_RWops*

---@param file string
---@param mode string
---@return SDL_RWops*?
function sdl.RWFromFile(file, mode) end
sdl.SDL_RWFromFile = sdl.RWFromFile

---@param fp file*?
---@param autoclose SDL_bool
---@return SDL_RWops*?
function sdl.RWFromFP(fp, autoclose) end
sdl.SDL_RWFromFP = sdl.RWFromFP

---@param mem ffi.cdata*
---@param size integer
---@return SDL_RWops*?
function sdl.RWFromMem(mem, size) end
sdl.SDL_RWFromMem = sdl.RWFromMem

---@param mem ffi.cdata*
---@param size integer
---@return SDL_RWops*?
function sdl.RWFromConstMem(mem, size) end
sdl.SDL_RWFromConstMem = sdl.RWFromConstMem

---@return SDL_RWops*?
function sdl.AllocRW() end
sdl.SDL_AllocRW = sdl.AllocRW

---@param area SDL_RWops*?
---@return nil
function sdl.FreeRW(area) end
sdl.SDL_FreeRW = sdl.FreeRW

---@param context SDL_RWops*?
---@return Sint64
function sdl.RWsize(context) end
sdl.SDL_RWsize = sdl.RWsize

---@param context SDL_RWops*?
---@param offset Sint64
---@param whence integer
---@return Sint64
function sdl.RWseek(context, offset, whence) end
sdl.SDL_RWseek = sdl.RWseek

---@param context SDL_RWops*?
---@return Sint64
function sdl.RWtell(context) end
sdl.SDL_RWtell = sdl.RWtell

---@param context SDL_RWops*?
---@param ptr ffi.cdata*
---@param size size_t
---@param maxnum size_t
---@return size_t
function sdl.RWread(context, ptr, size, maxnum) end
sdl.SDL_RWread = sdl.RWread

---@param context SDL_RWops*?
---@param ptr ffi.cdata*
---@param size size_t
---@param num size_t
---@return size_t
function sdl.RWwrite(context, ptr, size, num) end
sdl.SDL_RWwrite = sdl.RWwrite

---@param context SDL_RWops*?
---@return integer
function sdl.RWclose(context) end
sdl.SDL_RWclose = sdl.RWclose

---@param src SDL_RWops*?
---@param datasize size_t*?
---@param freesrc integer
---@return ffi.cdata*
function sdl.LoadFile_RW(src, datasize, freesrc) end
sdl.SDL_LoadFile_RW = sdl.LoadFile_RW

---@param file string
---@param datasize size_t*?
---@return ffi.cdata*
function sdl.LoadFile(file, datasize) end
sdl.SDL_LoadFile = sdl.LoadFile

---@param src SDL_RWops*?
---@return Uint8
function sdl.ReadU8(src) end
sdl.SDL_ReadU8 = sdl.ReadU8

---@param src SDL_RWops*?
---@return Uint16
function sdl.ReadLE16(src) end
sdl.SDL_ReadLE16 = sdl.ReadLE16

---@param src SDL_RWops*?
---@return Uint16
function sdl.ReadBE16(src) end
sdl.SDL_ReadBE16 = sdl.ReadBE16

---@param src SDL_RWops*?
---@return Uint32
function sdl.ReadLE32(src) end
sdl.SDL_ReadLE32 = sdl.ReadLE32

---@param src SDL_RWops*?
---@return Uint32
function sdl.ReadBE32(src) end
sdl.SDL_ReadBE32 = sdl.ReadBE32

---@param src SDL_RWops*?
---@return Uint64
function sdl.ReadLE64(src) end
sdl.SDL_ReadLE64 = sdl.ReadLE64

---@param src SDL_RWops*?
---@return Uint64
function sdl.ReadBE64(src) end
sdl.SDL_ReadBE64 = sdl.ReadBE64

---@param dst SDL_RWops*?
---@param value Uint8
---@return size_t
function sdl.WriteU8(dst, value) end
sdl.SDL_WriteU8 = sdl.WriteU8

---@param dst SDL_RWops*?
---@param value Uint16
---@return size_t
function sdl.WriteLE16(dst, value) end
sdl.SDL_WriteLE16 = sdl.WriteLE16

---@param dst SDL_RWops*?
---@param value Uint16
---@return size_t
function sdl.WriteBE16(dst, value) end
sdl.SDL_WriteBE16 = sdl.WriteBE16

---@param dst SDL_RWops*?
---@param value Uint32
---@return size_t
function sdl.WriteLE32(dst, value) end
sdl.SDL_WriteLE32 = sdl.WriteLE32

---@param dst SDL_RWops*?
---@param value Uint32
---@return size_t
function sdl.WriteBE32(dst, value) end
sdl.SDL_WriteBE32 = sdl.WriteBE32

---@param dst SDL_RWops*?
---@param value Uint64
---@return size_t
function sdl.WriteLE64(dst, value) end
sdl.SDL_WriteLE64 = sdl.WriteLE64

---@param dst SDL_RWops*?
---@param value Uint64
---@return size_t
function sdl.WriteBE64(dst, value) end
sdl.SDL_WriteBE64 = sdl.WriteBE64

---@alias SDL_AudioFormat Uint16

---@class SDL_AudioFormat* : ffi.cdata*
---@field [integer] SDL_AudioFormat

---@class SDL_AudioFormat** : ffi.cdata*
---@field [integer] SDL_AudioFormat*

---@alias SDL_AudioCallback fun(arg_0: ffi.cdata*, arg_1: Uint8*?, arg_2: integer): nil

---@class SDL_AudioCallback* : ffi.cdata*
---@field [integer] SDL_AudioCallback

---@class SDL_AudioCallback** : ffi.cdata*
---@field [integer] SDL_AudioCallback*

---@class SDL_AudioSpec
---@field freq integer
---@field format SDL_AudioFormat
---@field channels Uint8
---@field silence Uint8
---@field samples Uint16
---@field padding Uint16
---@field size Uint32
---@field callback SDL_AudioCallback
---@field userdata ffi.cdata*

---@class SDL_AudioSpec* : ffi.cdata*
---@field [integer] SDL_AudioSpec

---@class SDL_AudioSpec** : ffi.cdata*
---@field [integer] SDL_AudioSpec*


---@alias SDL_AudioFilter fun(arg_0: SDL_AudioCVT*?, arg_1: SDL_AudioFormat): nil

---@class SDL_AudioFilter* : ffi.cdata*
---@field [integer] SDL_AudioFilter

---@class SDL_AudioFilter** : ffi.cdata*
---@field [integer] SDL_AudioFilter*

---@class SDL_AudioCVT
---@field needed integer
---@field src_format SDL_AudioFormat
---@field dst_format SDL_AudioFormat
---@field rate_incr number
---@field buf Uint8*?
---@field len integer
---@field len_cvt integer
---@field len_mult integer
---@field len_ratio number
---@field filters SDL_AudioFilter[]
---@field filter_index integer

---@class SDL_AudioCVT* : ffi.cdata*
---@field [integer] SDL_AudioCVT

---@class SDL_AudioCVT** : ffi.cdata*
---@field [integer] SDL_AudioCVT*

---@return integer
function sdl.GetNumAudioDrivers() end
sdl.SDL_GetNumAudioDrivers = sdl.GetNumAudioDrivers

---@param index integer
---@return string
function sdl.GetAudioDriver(index) end
sdl.SDL_GetAudioDriver = sdl.GetAudioDriver

---@param driver_name string
---@return integer
function sdl.AudioInit(driver_name) end
sdl.SDL_AudioInit = sdl.AudioInit

---@return nil
function sdl.AudioQuit() end
sdl.SDL_AudioQuit = sdl.AudioQuit

---@return string
function sdl.GetCurrentAudioDriver() end
sdl.SDL_GetCurrentAudioDriver = sdl.GetCurrentAudioDriver

---@param desired SDL_AudioSpec*?
---@param obtained SDL_AudioSpec*?
---@return integer
function sdl.OpenAudio(desired, obtained) end
sdl.SDL_OpenAudio = sdl.OpenAudio

---@alias SDL_AudioDeviceID Uint32

---@class SDL_AudioDeviceID* : ffi.cdata*
---@field [integer] SDL_AudioDeviceID

---@class SDL_AudioDeviceID** : ffi.cdata*
---@field [integer] SDL_AudioDeviceID*

---@param iscapture integer
---@return integer
function sdl.GetNumAudioDevices(iscapture) end
sdl.SDL_GetNumAudioDevices = sdl.GetNumAudioDevices

---@param index integer
---@param iscapture integer
---@return string
function sdl.GetAudioDeviceName(index, iscapture) end
sdl.SDL_GetAudioDeviceName = sdl.GetAudioDeviceName

---@param index integer
---@param iscapture integer
---@param spec SDL_AudioSpec*?
---@return integer
function sdl.GetAudioDeviceSpec(index, iscapture, spec) end
sdl.SDL_GetAudioDeviceSpec = sdl.GetAudioDeviceSpec

---@param name string*?
---@param spec SDL_AudioSpec*?
---@param iscapture integer
---@return integer
function sdl.GetDefaultAudioInfo(name, spec, iscapture) end
sdl.SDL_GetDefaultAudioInfo = sdl.GetDefaultAudioInfo

---@param device string
---@param iscapture integer
---@param desired SDL_AudioSpec*?
---@param obtained SDL_AudioSpec*?
---@param allowed_changes integer
---@return SDL_AudioDeviceID
function sdl.OpenAudioDevice(device, iscapture, desired, obtained, allowed_changes) end
sdl.SDL_OpenAudioDevice = sdl.OpenAudioDevice

---@enum SDL_AudioStatus
local SDL_AudioStatus = {
    SDL_AUDIO_STOPPED = 0,
    SDL_AUDIO_PLAYING = 1,
    SDL_AUDIO_PAUSED = 2,
}

sdl.SDL_AUDIO_STOPPED = SDL_AudioStatus.SDL_AUDIO_STOPPED
sdl.SDL_AUDIO_PLAYING = SDL_AudioStatus.SDL_AUDIO_PLAYING
sdl.SDL_AUDIO_PAUSED = SDL_AudioStatus.SDL_AUDIO_PAUSED

---@class SDL_AudioStatus* : ffi.cdata*
---@field [integer] SDL_AudioStatus

---@class SDL_AudioStatus** : ffi.cdata*
---@field [integer] SDL_AudioStatus*

---@return SDL_AudioStatus
function sdl.GetAudioStatus() end
sdl.SDL_GetAudioStatus = sdl.GetAudioStatus

---@param dev SDL_AudioDeviceID
---@return SDL_AudioStatus
function sdl.GetAudioDeviceStatus(dev) end
sdl.SDL_GetAudioDeviceStatus = sdl.GetAudioDeviceStatus

---@param pause_on integer
---@return nil
function sdl.PauseAudio(pause_on) end
sdl.SDL_PauseAudio = sdl.PauseAudio

---@param dev SDL_AudioDeviceID
---@param pause_on integer
---@return nil
function sdl.PauseAudioDevice(dev, pause_on) end
sdl.SDL_PauseAudioDevice = sdl.PauseAudioDevice

---@param src SDL_RWops*?
---@param freesrc integer
---@param spec SDL_AudioSpec*?
---@param audio_buf Uint8*?*?
---@param audio_len Uint32*?
---@return SDL_AudioSpec*?
function sdl.LoadWAV_RW(src, freesrc, spec, audio_buf, audio_len) end
sdl.SDL_LoadWAV_RW = sdl.LoadWAV_RW

---@param audio_buf Uint8*?
---@return nil
function sdl.FreeWAV(audio_buf) end
sdl.SDL_FreeWAV = sdl.FreeWAV

---@param cvt SDL_AudioCVT*?
---@param src_format SDL_AudioFormat
---@param src_channels Uint8
---@param src_rate integer
---@param dst_format SDL_AudioFormat
---@param dst_channels Uint8
---@param dst_rate integer
---@return integer
function sdl.BuildAudioCVT(cvt, src_format, src_channels, src_rate, dst_format, dst_channels, dst_rate) end
sdl.SDL_BuildAudioCVT = sdl.BuildAudioCVT

---@param cvt SDL_AudioCVT*?
---@return integer
function sdl.ConvertAudio(cvt) end
sdl.SDL_ConvertAudio = sdl.ConvertAudio

---@class _SDL_AudioStream

---@class _SDL_AudioStream* : ffi.cdata*
---@field [integer] _SDL_AudioStream

---@class _SDL_AudioStream** : ffi.cdata*
---@field [integer] _SDL_AudioStream*

---@alias SDL_AudioStream _SDL_AudioStream

---@class SDL_AudioStream* : ffi.cdata*
---@field [integer] SDL_AudioStream

---@class SDL_AudioStream** : ffi.cdata*
---@field [integer] SDL_AudioStream*

---@param src_format SDL_AudioFormat
---@param src_channels Uint8
---@param src_rate integer
---@param dst_format SDL_AudioFormat
---@param dst_channels Uint8
---@param dst_rate integer
---@return SDL_AudioStream*?
function sdl.NewAudioStream(src_format, src_channels, src_rate, dst_format, dst_channels, dst_rate) end
sdl.SDL_NewAudioStream = sdl.NewAudioStream

---@param stream SDL_AudioStream*?
---@param buf ffi.cdata*
---@param len integer
---@return integer
function sdl.AudioStreamPut(stream, buf, len) end
sdl.SDL_AudioStreamPut = sdl.AudioStreamPut

---@param stream SDL_AudioStream*?
---@param buf ffi.cdata*
---@param len integer
---@return integer
function sdl.AudioStreamGet(stream, buf, len) end
sdl.SDL_AudioStreamGet = sdl.AudioStreamGet

---@param stream SDL_AudioStream*?
---@return integer
function sdl.AudioStreamAvailable(stream) end
sdl.SDL_AudioStreamAvailable = sdl.AudioStreamAvailable

---@param stream SDL_AudioStream*?
---@return integer
function sdl.AudioStreamFlush(stream) end
sdl.SDL_AudioStreamFlush = sdl.AudioStreamFlush

---@param stream SDL_AudioStream*?
---@return nil
function sdl.AudioStreamClear(stream) end
sdl.SDL_AudioStreamClear = sdl.AudioStreamClear

---@param stream SDL_AudioStream*?
---@return nil
function sdl.FreeAudioStream(stream) end
sdl.SDL_FreeAudioStream = sdl.FreeAudioStream

---@param dst Uint8*?
---@param src Uint8*?
---@param len Uint32
---@param volume integer
---@return nil
function sdl.MixAudio(dst, src, len, volume) end
sdl.SDL_MixAudio = sdl.MixAudio

---@param dst Uint8*?
---@param src Uint8*?
---@param format SDL_AudioFormat
---@param len Uint32
---@param volume integer
---@return nil
function sdl.MixAudioFormat(dst, src, format, len, volume) end
sdl.SDL_MixAudioFormat = sdl.MixAudioFormat

---@param dev SDL_AudioDeviceID
---@param data ffi.cdata*
---@param len Uint32
---@return integer
function sdl.QueueAudio(dev, data, len) end
sdl.SDL_QueueAudio = sdl.QueueAudio

---@param dev SDL_AudioDeviceID
---@param data ffi.cdata*
---@param len Uint32
---@return Uint32
function sdl.DequeueAudio(dev, data, len) end
sdl.SDL_DequeueAudio = sdl.DequeueAudio

---@param dev SDL_AudioDeviceID
---@return Uint32
function sdl.GetQueuedAudioSize(dev) end
sdl.SDL_GetQueuedAudioSize = sdl.GetQueuedAudioSize

---@param dev SDL_AudioDeviceID
---@return nil
function sdl.ClearQueuedAudio(dev) end
sdl.SDL_ClearQueuedAudio = sdl.ClearQueuedAudio

---@return nil
function sdl.LockAudio() end
sdl.SDL_LockAudio = sdl.LockAudio

---@param dev SDL_AudioDeviceID
---@return nil
function sdl.LockAudioDevice(dev) end
sdl.SDL_LockAudioDevice = sdl.LockAudioDevice

---@return nil
function sdl.UnlockAudio() end
sdl.SDL_UnlockAudio = sdl.UnlockAudio

---@param dev SDL_AudioDeviceID
---@return nil
function sdl.UnlockAudioDevice(dev) end
sdl.SDL_UnlockAudioDevice = sdl.UnlockAudioDevice

---@return nil
function sdl.CloseAudio() end
sdl.SDL_CloseAudio = sdl.CloseAudio

---@param dev SDL_AudioDeviceID
---@return nil
function sdl.CloseAudioDevice(dev) end
sdl.SDL_CloseAudioDevice = sdl.CloseAudioDevice

---@param text string
---@return integer
function sdl.SetClipboardText(text) end
sdl.SDL_SetClipboardText = sdl.SetClipboardText

---@return string
function sdl.GetClipboardText() end
sdl.SDL_GetClipboardText = sdl.GetClipboardText

---@return SDL_bool
function sdl.HasClipboardText() end
sdl.SDL_HasClipboardText = sdl.HasClipboardText

---@param text string
---@return integer
function sdl.SetPrimarySelectionText(text) end
sdl.SDL_SetPrimarySelectionText = sdl.SetPrimarySelectionText

---@return string
function sdl.GetPrimarySelectionText() end
sdl.SDL_GetPrimarySelectionText = sdl.GetPrimarySelectionText

---@return SDL_bool
function sdl.HasPrimarySelectionText() end
sdl.SDL_HasPrimarySelectionText = sdl.HasPrimarySelectionText

---@return integer
function sdl.GetCPUCount() end
sdl.SDL_GetCPUCount = sdl.GetCPUCount

---@return integer
function sdl.GetCPUCacheLineSize() end
sdl.SDL_GetCPUCacheLineSize = sdl.GetCPUCacheLineSize

---@return SDL_bool
function sdl.HasRDTSC() end
sdl.SDL_HasRDTSC = sdl.HasRDTSC

---@return SDL_bool
function sdl.HasAltiVec() end
sdl.SDL_HasAltiVec = sdl.HasAltiVec

---@return SDL_bool
function sdl.HasMMX() end
sdl.SDL_HasMMX = sdl.HasMMX

---@return SDL_bool
function sdl.Has3DNow() end
sdl.SDL_Has3DNow = sdl.Has3DNow

---@return SDL_bool
function sdl.HasSSE() end
sdl.SDL_HasSSE = sdl.HasSSE

---@return SDL_bool
function sdl.HasSSE2() end
sdl.SDL_HasSSE2 = sdl.HasSSE2

---@return SDL_bool
function sdl.HasSSE3() end
sdl.SDL_HasSSE3 = sdl.HasSSE3

---@return SDL_bool
function sdl.HasSSE41() end
sdl.SDL_HasSSE41 = sdl.HasSSE41

---@return SDL_bool
function sdl.HasSSE42() end
sdl.SDL_HasSSE42 = sdl.HasSSE42

---@return SDL_bool
function sdl.HasAVX() end
sdl.SDL_HasAVX = sdl.HasAVX

---@return SDL_bool
function sdl.HasAVX2() end
sdl.SDL_HasAVX2 = sdl.HasAVX2

---@return SDL_bool
function sdl.HasAVX512F() end
sdl.SDL_HasAVX512F = sdl.HasAVX512F

---@return SDL_bool
function sdl.HasARMSIMD() end
sdl.SDL_HasARMSIMD = sdl.HasARMSIMD

---@return SDL_bool
function sdl.HasNEON() end
sdl.SDL_HasNEON = sdl.HasNEON

---@return SDL_bool
function sdl.HasLSX() end
sdl.SDL_HasLSX = sdl.HasLSX

---@return SDL_bool
function sdl.HasLASX() end
sdl.SDL_HasLASX = sdl.HasLASX

---@return integer
function sdl.GetSystemRAM() end
sdl.SDL_GetSystemRAM = sdl.GetSystemRAM

---@return size_t
function sdl.SIMDGetAlignment() end
sdl.SDL_SIMDGetAlignment = sdl.SIMDGetAlignment

---@param len size_t
---@return ffi.cdata*
function sdl.SIMDAlloc(len) end
sdl.SDL_SIMDAlloc = sdl.SIMDAlloc

---@param mem ffi.cdata*
---@param len size_t
---@return ffi.cdata*
function sdl.SIMDRealloc(mem, len) end
sdl.SDL_SIMDRealloc = sdl.SIMDRealloc

---@param ptr ffi.cdata*
---@return nil
function sdl.SIMDFree(ptr) end
sdl.SDL_SIMDFree = sdl.SIMDFree

---@enum SDL_PixelType
local SDL_PixelType = {
    SDL_PIXELTYPE_UNKNOWN = 0,
    SDL_PIXELTYPE_INDEX1 = 1,
    SDL_PIXELTYPE_INDEX4 = 2,
    SDL_PIXELTYPE_INDEX8 = 3,
    SDL_PIXELTYPE_PACKED8 = 4,
    SDL_PIXELTYPE_PACKED16 = 5,
    SDL_PIXELTYPE_PACKED32 = 6,
    SDL_PIXELTYPE_ARRAYU8 = 7,
    SDL_PIXELTYPE_ARRAYU16 = 8,
    SDL_PIXELTYPE_ARRAYU32 = 9,
    SDL_PIXELTYPE_ARRAYF16 = 10,
    SDL_PIXELTYPE_ARRAYF32 = 11,
    SDL_PIXELTYPE_INDEX2 = 12,
}

sdl.SDL_PIXELTYPE_UNKNOWN = SDL_PixelType.SDL_PIXELTYPE_UNKNOWN
sdl.SDL_PIXELTYPE_INDEX1 = SDL_PixelType.SDL_PIXELTYPE_INDEX1
sdl.SDL_PIXELTYPE_INDEX4 = SDL_PixelType.SDL_PIXELTYPE_INDEX4
sdl.SDL_PIXELTYPE_INDEX8 = SDL_PixelType.SDL_PIXELTYPE_INDEX8
sdl.SDL_PIXELTYPE_PACKED8 = SDL_PixelType.SDL_PIXELTYPE_PACKED8
sdl.SDL_PIXELTYPE_PACKED16 = SDL_PixelType.SDL_PIXELTYPE_PACKED16
sdl.SDL_PIXELTYPE_PACKED32 = SDL_PixelType.SDL_PIXELTYPE_PACKED32
sdl.SDL_PIXELTYPE_ARRAYU8 = SDL_PixelType.SDL_PIXELTYPE_ARRAYU8
sdl.SDL_PIXELTYPE_ARRAYU16 = SDL_PixelType.SDL_PIXELTYPE_ARRAYU16
sdl.SDL_PIXELTYPE_ARRAYU32 = SDL_PixelType.SDL_PIXELTYPE_ARRAYU32
sdl.SDL_PIXELTYPE_ARRAYF16 = SDL_PixelType.SDL_PIXELTYPE_ARRAYF16
sdl.SDL_PIXELTYPE_ARRAYF32 = SDL_PixelType.SDL_PIXELTYPE_ARRAYF32
sdl.SDL_PIXELTYPE_INDEX2 = SDL_PixelType.SDL_PIXELTYPE_INDEX2

---@class SDL_PixelType* : ffi.cdata*
---@field [integer] SDL_PixelType

---@class SDL_PixelType** : ffi.cdata*
---@field [integer] SDL_PixelType*

---@enum SDL_BitmapOrder
local SDL_BitmapOrder = {
    SDL_BITMAPORDER_NONE = 0,
    SDL_BITMAPORDER_4321 = 1,
    SDL_BITMAPORDER_1234 = 2,
}

sdl.SDL_BITMAPORDER_NONE = SDL_BitmapOrder.SDL_BITMAPORDER_NONE
sdl.SDL_BITMAPORDER_4321 = SDL_BitmapOrder.SDL_BITMAPORDER_4321
sdl.SDL_BITMAPORDER_1234 = SDL_BitmapOrder.SDL_BITMAPORDER_1234

---@class SDL_BitmapOrder* : ffi.cdata*
---@field [integer] SDL_BitmapOrder

---@class SDL_BitmapOrder** : ffi.cdata*
---@field [integer] SDL_BitmapOrder*

---@enum SDL_PackedOrder
local SDL_PackedOrder = {
    SDL_PACKEDORDER_NONE = 0,
    SDL_PACKEDORDER_XRGB = 1,
    SDL_PACKEDORDER_RGBX = 2,
    SDL_PACKEDORDER_ARGB = 3,
    SDL_PACKEDORDER_RGBA = 4,
    SDL_PACKEDORDER_XBGR = 5,
    SDL_PACKEDORDER_BGRX = 6,
    SDL_PACKEDORDER_ABGR = 7,
    SDL_PACKEDORDER_BGRA = 8,
}

sdl.SDL_PACKEDORDER_NONE = SDL_PackedOrder.SDL_PACKEDORDER_NONE
sdl.SDL_PACKEDORDER_XRGB = SDL_PackedOrder.SDL_PACKEDORDER_XRGB
sdl.SDL_PACKEDORDER_RGBX = SDL_PackedOrder.SDL_PACKEDORDER_RGBX
sdl.SDL_PACKEDORDER_ARGB = SDL_PackedOrder.SDL_PACKEDORDER_ARGB
sdl.SDL_PACKEDORDER_RGBA = SDL_PackedOrder.SDL_PACKEDORDER_RGBA
sdl.SDL_PACKEDORDER_XBGR = SDL_PackedOrder.SDL_PACKEDORDER_XBGR
sdl.SDL_PACKEDORDER_BGRX = SDL_PackedOrder.SDL_PACKEDORDER_BGRX
sdl.SDL_PACKEDORDER_ABGR = SDL_PackedOrder.SDL_PACKEDORDER_ABGR
sdl.SDL_PACKEDORDER_BGRA = SDL_PackedOrder.SDL_PACKEDORDER_BGRA

---@class SDL_PackedOrder* : ffi.cdata*
---@field [integer] SDL_PackedOrder

---@class SDL_PackedOrder** : ffi.cdata*
---@field [integer] SDL_PackedOrder*

---@enum SDL_ArrayOrder
local SDL_ArrayOrder = {
    SDL_ARRAYORDER_NONE = 0,
    SDL_ARRAYORDER_RGB = 1,
    SDL_ARRAYORDER_RGBA = 2,
    SDL_ARRAYORDER_ARGB = 3,
    SDL_ARRAYORDER_BGR = 4,
    SDL_ARRAYORDER_BGRA = 5,
    SDL_ARRAYORDER_ABGR = 6,
}

sdl.SDL_ARRAYORDER_NONE = SDL_ArrayOrder.SDL_ARRAYORDER_NONE
sdl.SDL_ARRAYORDER_RGB = SDL_ArrayOrder.SDL_ARRAYORDER_RGB
sdl.SDL_ARRAYORDER_RGBA = SDL_ArrayOrder.SDL_ARRAYORDER_RGBA
sdl.SDL_ARRAYORDER_ARGB = SDL_ArrayOrder.SDL_ARRAYORDER_ARGB
sdl.SDL_ARRAYORDER_BGR = SDL_ArrayOrder.SDL_ARRAYORDER_BGR
sdl.SDL_ARRAYORDER_BGRA = SDL_ArrayOrder.SDL_ARRAYORDER_BGRA
sdl.SDL_ARRAYORDER_ABGR = SDL_ArrayOrder.SDL_ARRAYORDER_ABGR

---@class SDL_ArrayOrder* : ffi.cdata*
---@field [integer] SDL_ArrayOrder

---@class SDL_ArrayOrder** : ffi.cdata*
---@field [integer] SDL_ArrayOrder*

---@enum SDL_PackedLayout
local SDL_PackedLayout = {
    SDL_PACKEDLAYOUT_NONE = 0,
    SDL_PACKEDLAYOUT_332 = 1,
    SDL_PACKEDLAYOUT_4444 = 2,
    SDL_PACKEDLAYOUT_1555 = 3,
    SDL_PACKEDLAYOUT_5551 = 4,
    SDL_PACKEDLAYOUT_565 = 5,
    SDL_PACKEDLAYOUT_8888 = 6,
    SDL_PACKEDLAYOUT_2101010 = 7,
    SDL_PACKEDLAYOUT_1010102 = 8,
}

sdl.SDL_PACKEDLAYOUT_NONE = SDL_PackedLayout.SDL_PACKEDLAYOUT_NONE
sdl.SDL_PACKEDLAYOUT_332 = SDL_PackedLayout.SDL_PACKEDLAYOUT_332
sdl.SDL_PACKEDLAYOUT_4444 = SDL_PackedLayout.SDL_PACKEDLAYOUT_4444
sdl.SDL_PACKEDLAYOUT_1555 = SDL_PackedLayout.SDL_PACKEDLAYOUT_1555
sdl.SDL_PACKEDLAYOUT_5551 = SDL_PackedLayout.SDL_PACKEDLAYOUT_5551
sdl.SDL_PACKEDLAYOUT_565 = SDL_PackedLayout.SDL_PACKEDLAYOUT_565
sdl.SDL_PACKEDLAYOUT_8888 = SDL_PackedLayout.SDL_PACKEDLAYOUT_8888
sdl.SDL_PACKEDLAYOUT_2101010 = SDL_PackedLayout.SDL_PACKEDLAYOUT_2101010
sdl.SDL_PACKEDLAYOUT_1010102 = SDL_PackedLayout.SDL_PACKEDLAYOUT_1010102

---@class SDL_PackedLayout* : ffi.cdata*
---@field [integer] SDL_PackedLayout

---@class SDL_PackedLayout** : ffi.cdata*
---@field [integer] SDL_PackedLayout*

---@enum SDL_PixelFormatEnum
local SDL_PixelFormatEnum = {
    SDL_PIXELFORMAT_UNKNOWN = 0,
    SDL_PIXELFORMAT_INDEX1LSB = 286261504,
    SDL_PIXELFORMAT_INDEX1MSB = 287310080,
    SDL_PIXELFORMAT_INDEX2LSB = 470811136,
    SDL_PIXELFORMAT_INDEX2MSB = 471859712,
    SDL_PIXELFORMAT_INDEX4LSB = 303039488,
    SDL_PIXELFORMAT_INDEX4MSB = 304088064,
    SDL_PIXELFORMAT_INDEX8 = 318769153,
    SDL_PIXELFORMAT_RGB332 = 336660481,
    SDL_PIXELFORMAT_XRGB4444 = 353504258,
    SDL_PIXELFORMAT_RGB444 = 353504258,
    SDL_PIXELFORMAT_XBGR4444 = 357698562,
    SDL_PIXELFORMAT_BGR444 = 357698562,
    SDL_PIXELFORMAT_XRGB1555 = 353570562,
    SDL_PIXELFORMAT_RGB555 = 353570562,
    SDL_PIXELFORMAT_XBGR1555 = 357764866,
    SDL_PIXELFORMAT_BGR555 = 357764866,
    SDL_PIXELFORMAT_ARGB4444 = 355602434,
    SDL_PIXELFORMAT_RGBA4444 = 356651010,
    SDL_PIXELFORMAT_ABGR4444 = 359796738,
    SDL_PIXELFORMAT_BGRA4444 = 360845314,
    SDL_PIXELFORMAT_ARGB1555 = 355667970,
    SDL_PIXELFORMAT_RGBA5551 = 356782082,
    SDL_PIXELFORMAT_ABGR1555 = 359862274,
    SDL_PIXELFORMAT_BGRA5551 = 360976386,
    SDL_PIXELFORMAT_RGB565 = 353701890,
    SDL_PIXELFORMAT_BGR565 = 357896194,
    SDL_PIXELFORMAT_RGB24 = 386930691,
    SDL_PIXELFORMAT_BGR24 = 390076419,
    SDL_PIXELFORMAT_XRGB8888 = 370546692,
    SDL_PIXELFORMAT_RGB888 = 370546692,
    SDL_PIXELFORMAT_RGBX8888 = 371595268,
    SDL_PIXELFORMAT_XBGR8888 = 374740996,
    SDL_PIXELFORMAT_BGR888 = 374740996,
    SDL_PIXELFORMAT_BGRX8888 = 375789572,
    SDL_PIXELFORMAT_ARGB8888 = 372645892,
    SDL_PIXELFORMAT_RGBA8888 = 373694468,
    SDL_PIXELFORMAT_ABGR8888 = 376840196,
    SDL_PIXELFORMAT_BGRA8888 = 377888772,
    SDL_PIXELFORMAT_ARGB2101010 = 372711428,
    SDL_PIXELFORMAT_RGBA32 = 376840196,
    SDL_PIXELFORMAT_ARGB32 = 377888772,
    SDL_PIXELFORMAT_BGRA32 = 372645892,
    SDL_PIXELFORMAT_ABGR32 = 373694468,
    SDL_PIXELFORMAT_RGBX32 = 374740996,
    SDL_PIXELFORMAT_XRGB32 = 375789572,
    SDL_PIXELFORMAT_BGRX32 = 370546692,
    SDL_PIXELFORMAT_XBGR32 = 371595268,
    SDL_PIXELFORMAT_YV12 = 842094169,
    SDL_PIXELFORMAT_IYUV = 1448433993,
    SDL_PIXELFORMAT_YUY2 = 844715353,
    SDL_PIXELFORMAT_UYVY = 1498831189,
    SDL_PIXELFORMAT_YVYU = 1431918169,
    SDL_PIXELFORMAT_NV12 = 842094158,
    SDL_PIXELFORMAT_NV21 = 825382478,
    SDL_PIXELFORMAT_EXTERNAL_OES = 542328143,
}

sdl.SDL_PIXELFORMAT_UNKNOWN = SDL_PixelFormatEnum.SDL_PIXELFORMAT_UNKNOWN
sdl.SDL_PIXELFORMAT_INDEX1LSB = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1LSB
sdl.SDL_PIXELFORMAT_INDEX1MSB = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1MSB
sdl.SDL_PIXELFORMAT_INDEX2LSB = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX2LSB
sdl.SDL_PIXELFORMAT_INDEX2MSB = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX2MSB
sdl.SDL_PIXELFORMAT_INDEX4LSB = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4LSB
sdl.SDL_PIXELFORMAT_INDEX4MSB = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4MSB
sdl.SDL_PIXELFORMAT_INDEX8 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX8
sdl.SDL_PIXELFORMAT_RGB332 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB332
sdl.SDL_PIXELFORMAT_XRGB4444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB4444
sdl.SDL_PIXELFORMAT_RGB444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB444
sdl.SDL_PIXELFORMAT_XBGR4444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR4444
sdl.SDL_PIXELFORMAT_BGR444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR444
sdl.SDL_PIXELFORMAT_XRGB1555 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB1555
sdl.SDL_PIXELFORMAT_RGB555 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB555
sdl.SDL_PIXELFORMAT_XBGR1555 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR1555
sdl.SDL_PIXELFORMAT_BGR555 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR555
sdl.SDL_PIXELFORMAT_ARGB4444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB4444
sdl.SDL_PIXELFORMAT_RGBA4444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA4444
sdl.SDL_PIXELFORMAT_ABGR4444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR4444
sdl.SDL_PIXELFORMAT_BGRA4444 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA4444
sdl.SDL_PIXELFORMAT_ARGB1555 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB1555
sdl.SDL_PIXELFORMAT_RGBA5551 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA5551
sdl.SDL_PIXELFORMAT_ABGR1555 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR1555
sdl.SDL_PIXELFORMAT_BGRA5551 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA5551
sdl.SDL_PIXELFORMAT_RGB565 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB565
sdl.SDL_PIXELFORMAT_BGR565 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR565
sdl.SDL_PIXELFORMAT_RGB24 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB24
sdl.SDL_PIXELFORMAT_BGR24 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR24
sdl.SDL_PIXELFORMAT_XRGB8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB8888
sdl.SDL_PIXELFORMAT_RGB888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB888
sdl.SDL_PIXELFORMAT_RGBX8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBX8888
sdl.SDL_PIXELFORMAT_XBGR8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR8888
sdl.SDL_PIXELFORMAT_BGR888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR888
sdl.SDL_PIXELFORMAT_BGRX8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRX8888
sdl.SDL_PIXELFORMAT_ARGB8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB8888
sdl.SDL_PIXELFORMAT_RGBA8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA8888
sdl.SDL_PIXELFORMAT_ABGR8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR8888
sdl.SDL_PIXELFORMAT_BGRA8888 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA8888
sdl.SDL_PIXELFORMAT_ARGB2101010 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB2101010
sdl.SDL_PIXELFORMAT_RGBA32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA32
sdl.SDL_PIXELFORMAT_ARGB32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB32
sdl.SDL_PIXELFORMAT_BGRA32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA32
sdl.SDL_PIXELFORMAT_ABGR32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR32
sdl.SDL_PIXELFORMAT_RGBX32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBX32
sdl.SDL_PIXELFORMAT_XRGB32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB32
sdl.SDL_PIXELFORMAT_BGRX32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRX32
sdl.SDL_PIXELFORMAT_XBGR32 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR32
sdl.SDL_PIXELFORMAT_YV12 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_YV12
sdl.SDL_PIXELFORMAT_IYUV = SDL_PixelFormatEnum.SDL_PIXELFORMAT_IYUV
sdl.SDL_PIXELFORMAT_YUY2 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_YUY2
sdl.SDL_PIXELFORMAT_UYVY = SDL_PixelFormatEnum.SDL_PIXELFORMAT_UYVY
sdl.SDL_PIXELFORMAT_YVYU = SDL_PixelFormatEnum.SDL_PIXELFORMAT_YVYU
sdl.SDL_PIXELFORMAT_NV12 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV12
sdl.SDL_PIXELFORMAT_NV21 = SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV21
sdl.SDL_PIXELFORMAT_EXTERNAL_OES = SDL_PixelFormatEnum.SDL_PIXELFORMAT_EXTERNAL_OES

---@class SDL_PixelFormatEnum* : ffi.cdata*
---@field [integer] SDL_PixelFormatEnum

---@class SDL_PixelFormatEnum** : ffi.cdata*
---@field [integer] SDL_PixelFormatEnum*

---@class SDL_Color
---@field r Uint8
---@field g Uint8
---@field b Uint8
---@field a Uint8

---@class SDL_Color* : ffi.cdata*
---@field [integer] SDL_Color

---@class SDL_Color** : ffi.cdata*
---@field [integer] SDL_Color*

---@class SDL_Palette
---@field ncolors integer
---@field colors SDL_Color*?
---@field version Uint32
---@field refcount integer

---@class SDL_Palette* : ffi.cdata*
---@field [integer] SDL_Palette

---@class SDL_Palette** : ffi.cdata*
---@field [integer] SDL_Palette*

---@class SDL_PixelFormat
---@field format Uint32
---@field palette SDL_Palette*?
---@field BitsPerPixel Uint8
---@field BytesPerPixel Uint8
---@field padding Uint8[]
---@field Rmask Uint32
---@field Gmask Uint32
---@field Bmask Uint32
---@field Amask Uint32
---@field Rloss Uint8
---@field Gloss Uint8
---@field Bloss Uint8
---@field Aloss Uint8
---@field Rshift Uint8
---@field Gshift Uint8
---@field Bshift Uint8
---@field Ashift Uint8
---@field refcount integer
---@field next SDL_PixelFormat*?

---@class SDL_PixelFormat* : ffi.cdata*
---@field [integer] SDL_PixelFormat

---@class SDL_PixelFormat** : ffi.cdata*
---@field [integer] SDL_PixelFormat*

---@param format Uint32
---@return string
function sdl.GetPixelFormatName(format) end
sdl.SDL_GetPixelFormatName = sdl.GetPixelFormatName

---@param format Uint32
---@param bpp integer*?
---@param Rmask Uint32*?
---@param Gmask Uint32*?
---@param Bmask Uint32*?
---@param Amask Uint32*?
---@return SDL_bool
function sdl.PixelFormatEnumToMasks(format, bpp, Rmask, Gmask, Bmask, Amask) end
sdl.SDL_PixelFormatEnumToMasks = sdl.PixelFormatEnumToMasks

---@param bpp integer
---@param Rmask Uint32
---@param Gmask Uint32
---@param Bmask Uint32
---@param Amask Uint32
---@return Uint32
function sdl.MasksToPixelFormatEnum(bpp, Rmask, Gmask, Bmask, Amask) end
sdl.SDL_MasksToPixelFormatEnum = sdl.MasksToPixelFormatEnum

---@param pixel_format Uint32
---@return SDL_PixelFormat*?
function sdl.AllocFormat(pixel_format) end
sdl.SDL_AllocFormat = sdl.AllocFormat

---@param format SDL_PixelFormat*?
---@return nil
function sdl.FreeFormat(format) end
sdl.SDL_FreeFormat = sdl.FreeFormat

---@param ncolors integer
---@return SDL_Palette*?
function sdl.AllocPalette(ncolors) end
sdl.SDL_AllocPalette = sdl.AllocPalette

---@param format SDL_PixelFormat*?
---@param palette SDL_Palette*?
---@return integer
function sdl.SetPixelFormatPalette(format, palette) end
sdl.SDL_SetPixelFormatPalette = sdl.SetPixelFormatPalette

---@param palette SDL_Palette*?
---@param colors SDL_Color*?
---@param firstcolor integer
---@param ncolors integer
---@return integer
function sdl.SetPaletteColors(palette, colors, firstcolor, ncolors) end
sdl.SDL_SetPaletteColors = sdl.SetPaletteColors

---@param palette SDL_Palette*?
---@return nil
function sdl.FreePalette(palette) end
sdl.SDL_FreePalette = sdl.FreePalette

---@param format SDL_PixelFormat*?
---@param r Uint8
---@param g Uint8
---@param b Uint8
---@return Uint32
function sdl.MapRGB(format, r, g, b) end
sdl.SDL_MapRGB = sdl.MapRGB

---@param format SDL_PixelFormat*?
---@param r Uint8
---@param g Uint8
---@param b Uint8
---@param a Uint8
---@return Uint32
function sdl.MapRGBA(format, r, g, b, a) end
sdl.SDL_MapRGBA = sdl.MapRGBA

---@param pixel Uint32
---@param format SDL_PixelFormat*?
---@param r Uint8*?
---@param g Uint8*?
---@param b Uint8*?
---@return nil
function sdl.GetRGB(pixel, format, r, g, b) end
sdl.SDL_GetRGB = sdl.GetRGB

---@param pixel Uint32
---@param format SDL_PixelFormat*?
---@param r Uint8*?
---@param g Uint8*?
---@param b Uint8*?
---@param a Uint8*?
---@return nil
function sdl.GetRGBA(pixel, format, r, g, b, a) end
sdl.SDL_GetRGBA = sdl.GetRGBA

---@param gamma number
---@param ramp Uint16*?
---@return nil
function sdl.CalculateGammaRamp(gamma, ramp) end
sdl.SDL_CalculateGammaRamp = sdl.CalculateGammaRamp

---@class SDL_Point
---@field x integer
---@field y integer

---@class SDL_Point* : ffi.cdata*
---@field [integer] SDL_Point

---@class SDL_Point** : ffi.cdata*
---@field [integer] SDL_Point*

---@class SDL_FPoint
---@field x number
---@field y number

---@class SDL_FPoint* : ffi.cdata*
---@field [integer] SDL_FPoint

---@class SDL_FPoint** : ffi.cdata*
---@field [integer] SDL_FPoint*

---@class SDL_Rect
---@field x integer
---@field y integer
---@field w integer
---@field h integer

---@class SDL_Rect* : ffi.cdata*
---@field [integer] SDL_Rect

---@class SDL_Rect** : ffi.cdata*
---@field [integer] SDL_Rect*

---@class SDL_FRect
---@field x number
---@field y number
---@field w number
---@field h number

---@class SDL_FRect* : ffi.cdata*
---@field [integer] SDL_FRect

---@class SDL_FRect** : ffi.cdata*
---@field [integer] SDL_FRect*

---@param p SDL_Point*?
---@param r SDL_Rect*?
---@return SDL_bool
function sdl.PointInRect(p, r) end
sdl.SDL_PointInRect = sdl.PointInRect

---@param r SDL_Rect*?
---@return SDL_bool
function sdl.RectEmpty(r) end
sdl.SDL_RectEmpty = sdl.RectEmpty

---@param a SDL_Rect*?
---@param b SDL_Rect*?
---@return SDL_bool
function sdl.RectEquals(a, b) end
sdl.SDL_RectEquals = sdl.RectEquals

---@param A SDL_Rect*?
---@param B SDL_Rect*?
---@return SDL_bool
function sdl.HasIntersection(A, B) end
sdl.SDL_HasIntersection = sdl.HasIntersection

---@param A SDL_Rect*?
---@param B SDL_Rect*?
---@param result SDL_Rect*?
---@return SDL_bool
function sdl.IntersectRect(A, B, result) end
sdl.SDL_IntersectRect = sdl.IntersectRect

---@param A SDL_Rect*?
---@param B SDL_Rect*?
---@param result SDL_Rect*?
---@return nil
function sdl.UnionRect(A, B, result) end
sdl.SDL_UnionRect = sdl.UnionRect

---@param points SDL_Point*?
---@param count integer
---@param clip SDL_Rect*?
---@param result SDL_Rect*?
---@return SDL_bool
function sdl.EnclosePoints(points, count, clip, result) end
sdl.SDL_EnclosePoints = sdl.EnclosePoints

---@param rect SDL_Rect*?
---@param X1 integer*?
---@param Y1 integer*?
---@param X2 integer*?
---@param Y2 integer*?
---@return SDL_bool
function sdl.IntersectRectAndLine(rect, X1, Y1, X2, Y2) end
sdl.SDL_IntersectRectAndLine = sdl.IntersectRectAndLine

---@param p SDL_FPoint*?
---@param r SDL_FRect*?
---@return SDL_bool
function sdl.PointInFRect(p, r) end
sdl.SDL_PointInFRect = sdl.PointInFRect

---@param r SDL_FRect*?
---@return SDL_bool
function sdl.FRectEmpty(r) end
sdl.SDL_FRectEmpty = sdl.FRectEmpty

---@param a SDL_FRect*?
---@param b SDL_FRect*?
---@param epsilon number
---@return SDL_bool
function sdl.FRectEqualsEpsilon(a, b, epsilon) end
sdl.SDL_FRectEqualsEpsilon = sdl.FRectEqualsEpsilon

---@param a SDL_FRect*?
---@param b SDL_FRect*?
---@return SDL_bool
function sdl.FRectEquals(a, b) end
sdl.SDL_FRectEquals = sdl.FRectEquals

---@param A SDL_FRect*?
---@param B SDL_FRect*?
---@return SDL_bool
function sdl.HasIntersectionF(A, B) end
sdl.SDL_HasIntersectionF = sdl.HasIntersectionF

---@param A SDL_FRect*?
---@param B SDL_FRect*?
---@param result SDL_FRect*?
---@return SDL_bool
function sdl.IntersectFRect(A, B, result) end
sdl.SDL_IntersectFRect = sdl.IntersectFRect

---@param A SDL_FRect*?
---@param B SDL_FRect*?
---@param result SDL_FRect*?
---@return nil
function sdl.UnionFRect(A, B, result) end
sdl.SDL_UnionFRect = sdl.UnionFRect

---@param points SDL_FPoint*?
---@param count integer
---@param clip SDL_FRect*?
---@param result SDL_FRect*?
---@return SDL_bool
function sdl.EncloseFPoints(points, count, clip, result) end
sdl.SDL_EncloseFPoints = sdl.EncloseFPoints

---@param rect SDL_FRect*?
---@param X1 number*?
---@param Y1 number*?
---@param X2 number*?
---@param Y2 number*?
---@return SDL_bool
function sdl.IntersectFRectAndLine(rect, X1, Y1, X2, Y2) end
sdl.SDL_IntersectFRectAndLine = sdl.IntersectFRectAndLine

---@enum SDL_BlendMode
local SDL_BlendMode = {
    SDL_BLENDMODE_NONE = 0,
    SDL_BLENDMODE_BLEND = 1,
    SDL_BLENDMODE_ADD = 2,
    SDL_BLENDMODE_MOD = 4,
    SDL_BLENDMODE_MUL = 8,
    SDL_BLENDMODE_INVALID = 2147483647,
}

sdl.SDL_BLENDMODE_NONE = SDL_BlendMode.SDL_BLENDMODE_NONE
sdl.SDL_BLENDMODE_BLEND = SDL_BlendMode.SDL_BLENDMODE_BLEND
sdl.SDL_BLENDMODE_ADD = SDL_BlendMode.SDL_BLENDMODE_ADD
sdl.SDL_BLENDMODE_MOD = SDL_BlendMode.SDL_BLENDMODE_MOD
sdl.SDL_BLENDMODE_MUL = SDL_BlendMode.SDL_BLENDMODE_MUL
sdl.SDL_BLENDMODE_INVALID = SDL_BlendMode.SDL_BLENDMODE_INVALID

---@class SDL_BlendMode* : ffi.cdata*
---@field [integer] SDL_BlendMode

---@class SDL_BlendMode** : ffi.cdata*
---@field [integer] SDL_BlendMode*

---@enum SDL_BlendOperation
local SDL_BlendOperation = {
    SDL_BLENDOPERATION_ADD = 1,
    SDL_BLENDOPERATION_SUBTRACT = 2,
    SDL_BLENDOPERATION_REV_SUBTRACT = 3,
    SDL_BLENDOPERATION_MINIMUM = 4,
    SDL_BLENDOPERATION_MAXIMUM = 5,
}

sdl.SDL_BLENDOPERATION_ADD = SDL_BlendOperation.SDL_BLENDOPERATION_ADD
sdl.SDL_BLENDOPERATION_SUBTRACT = SDL_BlendOperation.SDL_BLENDOPERATION_SUBTRACT
sdl.SDL_BLENDOPERATION_REV_SUBTRACT = SDL_BlendOperation.SDL_BLENDOPERATION_REV_SUBTRACT
sdl.SDL_BLENDOPERATION_MINIMUM = SDL_BlendOperation.SDL_BLENDOPERATION_MINIMUM
sdl.SDL_BLENDOPERATION_MAXIMUM = SDL_BlendOperation.SDL_BLENDOPERATION_MAXIMUM

---@class SDL_BlendOperation* : ffi.cdata*
---@field [integer] SDL_BlendOperation

---@class SDL_BlendOperation** : ffi.cdata*
---@field [integer] SDL_BlendOperation*

---@enum SDL_BlendFactor
local SDL_BlendFactor = {
    SDL_BLENDFACTOR_ZERO = 1,
    SDL_BLENDFACTOR_ONE = 2,
    SDL_BLENDFACTOR_SRC_COLOR = 3,
    SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
    SDL_BLENDFACTOR_SRC_ALPHA = 5,
    SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
    SDL_BLENDFACTOR_DST_COLOR = 7,
    SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
    SDL_BLENDFACTOR_DST_ALPHA = 9,
    SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
}

sdl.SDL_BLENDFACTOR_ZERO = SDL_BlendFactor.SDL_BLENDFACTOR_ZERO
sdl.SDL_BLENDFACTOR_ONE = SDL_BlendFactor.SDL_BLENDFACTOR_ONE
sdl.SDL_BLENDFACTOR_SRC_COLOR = SDL_BlendFactor.SDL_BLENDFACTOR_SRC_COLOR
sdl.SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR
sdl.SDL_BLENDFACTOR_SRC_ALPHA = SDL_BlendFactor.SDL_BLENDFACTOR_SRC_ALPHA
sdl.SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA
sdl.SDL_BLENDFACTOR_DST_COLOR = SDL_BlendFactor.SDL_BLENDFACTOR_DST_COLOR
sdl.SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR
sdl.SDL_BLENDFACTOR_DST_ALPHA = SDL_BlendFactor.SDL_BLENDFACTOR_DST_ALPHA
sdl.SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA

---@class SDL_BlendFactor* : ffi.cdata*
---@field [integer] SDL_BlendFactor

---@class SDL_BlendFactor** : ffi.cdata*
---@field [integer] SDL_BlendFactor*

---@param srcColorFactor SDL_BlendFactor
---@param dstColorFactor SDL_BlendFactor
---@param colorOperation SDL_BlendOperation
---@param srcAlphaFactor SDL_BlendFactor
---@param dstAlphaFactor SDL_BlendFactor
---@param alphaOperation SDL_BlendOperation
---@return SDL_BlendMode
function sdl.ComposeCustomBlendMode(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation) end
sdl.SDL_ComposeCustomBlendMode = sdl.ComposeCustomBlendMode

---@class SDL_BlitMap

---@class SDL_BlitMap* : ffi.cdata*
---@field [integer] SDL_BlitMap

---@class SDL_BlitMap** : ffi.cdata*
---@field [integer] SDL_BlitMap*

---@class SDL_Surface
---@field flags Uint32
---@field format SDL_PixelFormat*?
---@field w integer
---@field h integer
---@field pitch integer
---@field pixels ffi.cdata*
---@field userdata ffi.cdata*
---@field locked integer
---@field list_blitmap ffi.cdata*
---@field clip_rect SDL_Rect
---@field map SDL_BlitMap*?
---@field refcount integer

---@class SDL_Surface* : ffi.cdata*
---@field [integer] SDL_Surface

---@class SDL_Surface** : ffi.cdata*
---@field [integer] SDL_Surface*

---@alias SDL_blit fun(arg_0: SDL_Surface*?, arg_1: SDL_Rect*?, arg_2: SDL_Surface*?, arg_3: SDL_Rect*?): integer

---@class SDL_blit* : ffi.cdata*
---@field [integer] SDL_blit

---@class SDL_blit** : ffi.cdata*
---@field [integer] SDL_blit*

---@enum SDL_YUV_CONVERSION_MODE
local SDL_YUV_CONVERSION_MODE = {
    SDL_YUV_CONVERSION_JPEG = 0,
    SDL_YUV_CONVERSION_BT601 = 1,
    SDL_YUV_CONVERSION_BT709 = 2,
    SDL_YUV_CONVERSION_AUTOMATIC = 3,
}

sdl.SDL_YUV_CONVERSION_JPEG = SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_JPEG
sdl.SDL_YUV_CONVERSION_BT601 = SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT601
sdl.SDL_YUV_CONVERSION_BT709 = SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT709
sdl.SDL_YUV_CONVERSION_AUTOMATIC = SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_AUTOMATIC

---@class SDL_YUV_CONVERSION_MODE* : ffi.cdata*
---@field [integer] SDL_YUV_CONVERSION_MODE

---@class SDL_YUV_CONVERSION_MODE** : ffi.cdata*
---@field [integer] SDL_YUV_CONVERSION_MODE*

---@param flags Uint32
---@param width integer
---@param height integer
---@param depth integer
---@param Rmask Uint32
---@param Gmask Uint32
---@param Bmask Uint32
---@param Amask Uint32
---@return SDL_Surface*?
function sdl.CreateRGBSurface(flags, width, height, depth, Rmask, Gmask, Bmask, Amask) end
sdl.SDL_CreateRGBSurface = sdl.CreateRGBSurface

---@param flags Uint32
---@param width integer
---@param height integer
---@param depth integer
---@param format Uint32
---@return SDL_Surface*?
function sdl.CreateRGBSurfaceWithFormat(flags, width, height, depth, format) end
sdl.SDL_CreateRGBSurfaceWithFormat = sdl.CreateRGBSurfaceWithFormat

---@param pixels ffi.cdata*
---@param width integer
---@param height integer
---@param depth integer
---@param pitch integer
---@param Rmask Uint32
---@param Gmask Uint32
---@param Bmask Uint32
---@param Amask Uint32
---@return SDL_Surface*?
function sdl.CreateRGBSurfaceFrom(pixels, width, height, depth, pitch, Rmask, Gmask, Bmask, Amask) end
sdl.SDL_CreateRGBSurfaceFrom = sdl.CreateRGBSurfaceFrom

---@param pixels ffi.cdata*
---@param width integer
---@param height integer
---@param depth integer
---@param pitch integer
---@param format Uint32
---@return SDL_Surface*?
function sdl.CreateRGBSurfaceWithFormatFrom(pixels, width, height, depth, pitch, format) end
sdl.SDL_CreateRGBSurfaceWithFormatFrom = sdl.CreateRGBSurfaceWithFormatFrom

---@param surface SDL_Surface*?
---@return nil
function sdl.FreeSurface(surface) end
sdl.SDL_FreeSurface = sdl.FreeSurface

---@param surface SDL_Surface*?
---@param palette SDL_Palette*?
---@return integer
function sdl.SetSurfacePalette(surface, palette) end
sdl.SDL_SetSurfacePalette = sdl.SetSurfacePalette

---@param surface SDL_Surface*?
---@return integer
function sdl.LockSurface(surface) end
sdl.SDL_LockSurface = sdl.LockSurface

---@param surface SDL_Surface*?
---@return nil
function sdl.UnlockSurface(surface) end
sdl.SDL_UnlockSurface = sdl.UnlockSurface

---@param src SDL_RWops*?
---@param freesrc integer
---@return SDL_Surface*?
function sdl.LoadBMP_RW(src, freesrc) end
sdl.SDL_LoadBMP_RW = sdl.LoadBMP_RW

---@param surface SDL_Surface*?
---@param dst SDL_RWops*?
---@param freedst integer
---@return integer
function sdl.SaveBMP_RW(surface, dst, freedst) end
sdl.SDL_SaveBMP_RW = sdl.SaveBMP_RW

---@param surface SDL_Surface*?
---@param flag integer
---@return integer
function sdl.SetSurfaceRLE(surface, flag) end
sdl.SDL_SetSurfaceRLE = sdl.SetSurfaceRLE

---@param surface SDL_Surface*?
---@return SDL_bool
function sdl.HasSurfaceRLE(surface) end
sdl.SDL_HasSurfaceRLE = sdl.HasSurfaceRLE

---@param surface SDL_Surface*?
---@param flag integer
---@param key Uint32
---@return integer
function sdl.SetColorKey(surface, flag, key) end
sdl.SDL_SetColorKey = sdl.SetColorKey

---@param surface SDL_Surface*?
---@return SDL_bool
function sdl.HasColorKey(surface) end
sdl.SDL_HasColorKey = sdl.HasColorKey

---@param surface SDL_Surface*?
---@param key Uint32*?
---@return integer
function sdl.GetColorKey(surface, key) end
sdl.SDL_GetColorKey = sdl.GetColorKey

---@param surface SDL_Surface*?
---@param r Uint8
---@param g Uint8
---@param b Uint8
---@return integer
function sdl.SetSurfaceColorMod(surface, r, g, b) end
sdl.SDL_SetSurfaceColorMod = sdl.SetSurfaceColorMod

---@param surface SDL_Surface*?
---@param r Uint8*?
---@param g Uint8*?
---@param b Uint8*?
---@return integer
function sdl.GetSurfaceColorMod(surface, r, g, b) end
sdl.SDL_GetSurfaceColorMod = sdl.GetSurfaceColorMod

---@param surface SDL_Surface*?
---@param alpha Uint8
---@return integer
function sdl.SetSurfaceAlphaMod(surface, alpha) end
sdl.SDL_SetSurfaceAlphaMod = sdl.SetSurfaceAlphaMod

---@param surface SDL_Surface*?
---@param alpha Uint8*?
---@return integer
function sdl.GetSurfaceAlphaMod(surface, alpha) end
sdl.SDL_GetSurfaceAlphaMod = sdl.GetSurfaceAlphaMod

---@param surface SDL_Surface*?
---@param blendMode SDL_BlendMode
---@return integer
function sdl.SetSurfaceBlendMode(surface, blendMode) end
sdl.SDL_SetSurfaceBlendMode = sdl.SetSurfaceBlendMode

---@param surface SDL_Surface*?
---@param blendMode SDL_BlendMode*?
---@return integer
function sdl.GetSurfaceBlendMode(surface, blendMode) end
sdl.SDL_GetSurfaceBlendMode = sdl.GetSurfaceBlendMode

---@param surface SDL_Surface*?
---@param rect SDL_Rect*?
---@return SDL_bool
function sdl.SetClipRect(surface, rect) end
sdl.SDL_SetClipRect = sdl.SetClipRect

---@param surface SDL_Surface*?
---@param rect SDL_Rect*?
---@return nil
function sdl.GetClipRect(surface, rect) end
sdl.SDL_GetClipRect = sdl.GetClipRect

---@param surface SDL_Surface*?
---@return SDL_Surface*?
function sdl.DuplicateSurface(surface) end
sdl.SDL_DuplicateSurface = sdl.DuplicateSurface

---@param src SDL_Surface*?
---@param fmt SDL_PixelFormat*?
---@param flags Uint32
---@return SDL_Surface*?
function sdl.ConvertSurface(src, fmt, flags) end
sdl.SDL_ConvertSurface = sdl.ConvertSurface

---@param src SDL_Surface*?
---@param pixel_format Uint32
---@param flags Uint32
---@return SDL_Surface*?
function sdl.ConvertSurfaceFormat(src, pixel_format, flags) end
sdl.SDL_ConvertSurfaceFormat = sdl.ConvertSurfaceFormat

---@param width integer
---@param height integer
---@param src_format Uint32
---@param src ffi.cdata*
---@param src_pitch integer
---@param dst_format Uint32
---@param dst ffi.cdata*
---@param dst_pitch integer
---@return integer
function sdl.ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch) end
sdl.SDL_ConvertPixels = sdl.ConvertPixels

---@param width integer
---@param height integer
---@param src_format Uint32
---@param src ffi.cdata*
---@param src_pitch integer
---@param dst_format Uint32
---@param dst ffi.cdata*
---@param dst_pitch integer
---@return integer
function sdl.PremultiplyAlpha(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch) end
sdl.SDL_PremultiplyAlpha = sdl.PremultiplyAlpha

---@param dst SDL_Surface*?
---@param rect SDL_Rect*?
---@param color Uint32
---@return integer
function sdl.FillRect(dst, rect, color) end
sdl.SDL_FillRect = sdl.FillRect

---@param dst SDL_Surface*?
---@param rects SDL_Rect*?
---@param count integer
---@param color Uint32
---@return integer
function sdl.FillRects(dst, rects, count, color) end
sdl.SDL_FillRects = sdl.FillRects

---@param src SDL_Surface*?
---@param srcrect SDL_Rect*?
---@param dst SDL_Surface*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.UpperBlit(src, srcrect, dst, dstrect) end
sdl.SDL_UpperBlit = sdl.UpperBlit

---@param src SDL_Surface*?
---@param srcrect SDL_Rect*?
---@param dst SDL_Surface*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.LowerBlit(src, srcrect, dst, dstrect) end
sdl.SDL_LowerBlit = sdl.LowerBlit

---@param src SDL_Surface*?
---@param srcrect SDL_Rect*?
---@param dst SDL_Surface*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.SoftStretch(src, srcrect, dst, dstrect) end
sdl.SDL_SoftStretch = sdl.SoftStretch

---@param src SDL_Surface*?
---@param srcrect SDL_Rect*?
---@param dst SDL_Surface*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.SoftStretchLinear(src, srcrect, dst, dstrect) end
sdl.SDL_SoftStretchLinear = sdl.SoftStretchLinear

---@param src SDL_Surface*?
---@param srcrect SDL_Rect*?
---@param dst SDL_Surface*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.UpperBlitScaled(src, srcrect, dst, dstrect) end
sdl.SDL_UpperBlitScaled = sdl.UpperBlitScaled

---@param src SDL_Surface*?
---@param srcrect SDL_Rect*?
---@param dst SDL_Surface*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.LowerBlitScaled(src, srcrect, dst, dstrect) end
sdl.SDL_LowerBlitScaled = sdl.LowerBlitScaled

---@param mode SDL_YUV_CONVERSION_MODE
---@return nil
function sdl.SetYUVConversionMode(mode) end
sdl.SDL_SetYUVConversionMode = sdl.SetYUVConversionMode

---@return SDL_YUV_CONVERSION_MODE
function sdl.GetYUVConversionMode() end
sdl.SDL_GetYUVConversionMode = sdl.GetYUVConversionMode

---@param width integer
---@param height integer
---@return SDL_YUV_CONVERSION_MODE
function sdl.GetYUVConversionModeForResolution(width, height) end
sdl.SDL_GetYUVConversionModeForResolution = sdl.GetYUVConversionModeForResolution

---@class SDL_DisplayMode
---@field format Uint32
---@field w integer
---@field h integer
---@field refresh_rate integer
---@field driverdata ffi.cdata*

---@class SDL_DisplayMode* : ffi.cdata*
---@field [integer] SDL_DisplayMode

---@class SDL_DisplayMode** : ffi.cdata*
---@field [integer] SDL_DisplayMode*

---@class SDL_Window

---@class SDL_Window* : ffi.cdata*
---@field [integer] SDL_Window

---@class SDL_Window** : ffi.cdata*
---@field [integer] SDL_Window*

---@enum SDL_WindowFlags
local SDL_WindowFlags = {
    SDL_WINDOW_FULLSCREEN = 1,
    SDL_WINDOW_OPENGL = 2,
    SDL_WINDOW_SHOWN = 4,
    SDL_WINDOW_HIDDEN = 8,
    SDL_WINDOW_BORDERLESS = 16,
    SDL_WINDOW_RESIZABLE = 32,
    SDL_WINDOW_MINIMIZED = 64,
    SDL_WINDOW_MAXIMIZED = 128,
    SDL_WINDOW_MOUSE_GRABBED = 256,
    SDL_WINDOW_INPUT_FOCUS = 512,
    SDL_WINDOW_MOUSE_FOCUS = 1024,
    SDL_WINDOW_FULLSCREEN_DESKTOP = 4097,
    SDL_WINDOW_FOREIGN = 2048,
    SDL_WINDOW_ALLOW_HIGHDPI = 8192,
    SDL_WINDOW_MOUSE_CAPTURE = 16384,
    SDL_WINDOW_ALWAYS_ON_TOP = 32768,
    SDL_WINDOW_SKIP_TASKBAR = 65536,
    SDL_WINDOW_UTILITY = 131072,
    SDL_WINDOW_TOOLTIP = 262144,
    SDL_WINDOW_POPUP_MENU = 524288,
    SDL_WINDOW_KEYBOARD_GRABBED = 1048576,
    SDL_WINDOW_VULKAN = 268435456,
    SDL_WINDOW_METAL = 536870912,
    SDL_WINDOW_INPUT_GRABBED = 256,
}

sdl.SDL_WINDOW_FULLSCREEN = SDL_WindowFlags.SDL_WINDOW_FULLSCREEN
sdl.SDL_WINDOW_OPENGL = SDL_WindowFlags.SDL_WINDOW_OPENGL
sdl.SDL_WINDOW_SHOWN = SDL_WindowFlags.SDL_WINDOW_SHOWN
sdl.SDL_WINDOW_HIDDEN = SDL_WindowFlags.SDL_WINDOW_HIDDEN
sdl.SDL_WINDOW_BORDERLESS = SDL_WindowFlags.SDL_WINDOW_BORDERLESS
sdl.SDL_WINDOW_RESIZABLE = SDL_WindowFlags.SDL_WINDOW_RESIZABLE
sdl.SDL_WINDOW_MINIMIZED = SDL_WindowFlags.SDL_WINDOW_MINIMIZED
sdl.SDL_WINDOW_MAXIMIZED = SDL_WindowFlags.SDL_WINDOW_MAXIMIZED
sdl.SDL_WINDOW_MOUSE_GRABBED = SDL_WindowFlags.SDL_WINDOW_MOUSE_GRABBED
sdl.SDL_WINDOW_INPUT_FOCUS = SDL_WindowFlags.SDL_WINDOW_INPUT_FOCUS
sdl.SDL_WINDOW_MOUSE_FOCUS = SDL_WindowFlags.SDL_WINDOW_MOUSE_FOCUS
sdl.SDL_WINDOW_FULLSCREEN_DESKTOP = SDL_WindowFlags.SDL_WINDOW_FULLSCREEN_DESKTOP
sdl.SDL_WINDOW_FOREIGN = SDL_WindowFlags.SDL_WINDOW_FOREIGN
sdl.SDL_WINDOW_ALLOW_HIGHDPI = SDL_WindowFlags.SDL_WINDOW_ALLOW_HIGHDPI
sdl.SDL_WINDOW_MOUSE_CAPTURE = SDL_WindowFlags.SDL_WINDOW_MOUSE_CAPTURE
sdl.SDL_WINDOW_ALWAYS_ON_TOP = SDL_WindowFlags.SDL_WINDOW_ALWAYS_ON_TOP
sdl.SDL_WINDOW_SKIP_TASKBAR = SDL_WindowFlags.SDL_WINDOW_SKIP_TASKBAR
sdl.SDL_WINDOW_UTILITY = SDL_WindowFlags.SDL_WINDOW_UTILITY
sdl.SDL_WINDOW_TOOLTIP = SDL_WindowFlags.SDL_WINDOW_TOOLTIP
sdl.SDL_WINDOW_POPUP_MENU = SDL_WindowFlags.SDL_WINDOW_POPUP_MENU
sdl.SDL_WINDOW_KEYBOARD_GRABBED = SDL_WindowFlags.SDL_WINDOW_KEYBOARD_GRABBED
sdl.SDL_WINDOW_VULKAN = SDL_WindowFlags.SDL_WINDOW_VULKAN
sdl.SDL_WINDOW_METAL = SDL_WindowFlags.SDL_WINDOW_METAL
sdl.SDL_WINDOW_INPUT_GRABBED = SDL_WindowFlags.SDL_WINDOW_INPUT_GRABBED

---@class SDL_WindowFlags* : ffi.cdata*
---@field [integer] SDL_WindowFlags

---@class SDL_WindowFlags** : ffi.cdata*
---@field [integer] SDL_WindowFlags*

---@enum SDL_WindowEventID
local SDL_WindowEventID = {
    SDL_WINDOWEVENT_NONE = 0,
    SDL_WINDOWEVENT_SHOWN = 1,
    SDL_WINDOWEVENT_HIDDEN = 2,
    SDL_WINDOWEVENT_EXPOSED = 3,
    SDL_WINDOWEVENT_MOVED = 4,
    SDL_WINDOWEVENT_RESIZED = 5,
    SDL_WINDOWEVENT_SIZE_CHANGED = 6,
    SDL_WINDOWEVENT_MINIMIZED = 7,
    SDL_WINDOWEVENT_MAXIMIZED = 8,
    SDL_WINDOWEVENT_RESTORED = 9,
    SDL_WINDOWEVENT_ENTER = 10,
    SDL_WINDOWEVENT_LEAVE = 11,
    SDL_WINDOWEVENT_FOCUS_GAINED = 12,
    SDL_WINDOWEVENT_FOCUS_LOST = 13,
    SDL_WINDOWEVENT_CLOSE = 14,
    SDL_WINDOWEVENT_TAKE_FOCUS = 15,
    SDL_WINDOWEVENT_HIT_TEST = 16,
    SDL_WINDOWEVENT_ICCPROF_CHANGED = 17,
    SDL_WINDOWEVENT_DISPLAY_CHANGED = 18,
}

sdl.SDL_WINDOWEVENT_NONE = SDL_WindowEventID.SDL_WINDOWEVENT_NONE
sdl.SDL_WINDOWEVENT_SHOWN = SDL_WindowEventID.SDL_WINDOWEVENT_SHOWN
sdl.SDL_WINDOWEVENT_HIDDEN = SDL_WindowEventID.SDL_WINDOWEVENT_HIDDEN
sdl.SDL_WINDOWEVENT_EXPOSED = SDL_WindowEventID.SDL_WINDOWEVENT_EXPOSED
sdl.SDL_WINDOWEVENT_MOVED = SDL_WindowEventID.SDL_WINDOWEVENT_MOVED
sdl.SDL_WINDOWEVENT_RESIZED = SDL_WindowEventID.SDL_WINDOWEVENT_RESIZED
sdl.SDL_WINDOWEVENT_SIZE_CHANGED = SDL_WindowEventID.SDL_WINDOWEVENT_SIZE_CHANGED
sdl.SDL_WINDOWEVENT_MINIMIZED = SDL_WindowEventID.SDL_WINDOWEVENT_MINIMIZED
sdl.SDL_WINDOWEVENT_MAXIMIZED = SDL_WindowEventID.SDL_WINDOWEVENT_MAXIMIZED
sdl.SDL_WINDOWEVENT_RESTORED = SDL_WindowEventID.SDL_WINDOWEVENT_RESTORED
sdl.SDL_WINDOWEVENT_ENTER = SDL_WindowEventID.SDL_WINDOWEVENT_ENTER
sdl.SDL_WINDOWEVENT_LEAVE = SDL_WindowEventID.SDL_WINDOWEVENT_LEAVE
sdl.SDL_WINDOWEVENT_FOCUS_GAINED = SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_GAINED
sdl.SDL_WINDOWEVENT_FOCUS_LOST = SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_LOST
sdl.SDL_WINDOWEVENT_CLOSE = SDL_WindowEventID.SDL_WINDOWEVENT_CLOSE
sdl.SDL_WINDOWEVENT_TAKE_FOCUS = SDL_WindowEventID.SDL_WINDOWEVENT_TAKE_FOCUS
sdl.SDL_WINDOWEVENT_HIT_TEST = SDL_WindowEventID.SDL_WINDOWEVENT_HIT_TEST
sdl.SDL_WINDOWEVENT_ICCPROF_CHANGED = SDL_WindowEventID.SDL_WINDOWEVENT_ICCPROF_CHANGED
sdl.SDL_WINDOWEVENT_DISPLAY_CHANGED = SDL_WindowEventID.SDL_WINDOWEVENT_DISPLAY_CHANGED

---@class SDL_WindowEventID* : ffi.cdata*
---@field [integer] SDL_WindowEventID

---@class SDL_WindowEventID** : ffi.cdata*
---@field [integer] SDL_WindowEventID*

---@enum SDL_DisplayEventID
local SDL_DisplayEventID = {
    SDL_DISPLAYEVENT_NONE = 0,
    SDL_DISPLAYEVENT_ORIENTATION = 1,
    SDL_DISPLAYEVENT_CONNECTED = 2,
    SDL_DISPLAYEVENT_DISCONNECTED = 3,
    SDL_DISPLAYEVENT_MOVED = 4,
}

sdl.SDL_DISPLAYEVENT_NONE = SDL_DisplayEventID.SDL_DISPLAYEVENT_NONE
sdl.SDL_DISPLAYEVENT_ORIENTATION = SDL_DisplayEventID.SDL_DISPLAYEVENT_ORIENTATION
sdl.SDL_DISPLAYEVENT_CONNECTED = SDL_DisplayEventID.SDL_DISPLAYEVENT_CONNECTED
sdl.SDL_DISPLAYEVENT_DISCONNECTED = SDL_DisplayEventID.SDL_DISPLAYEVENT_DISCONNECTED
sdl.SDL_DISPLAYEVENT_MOVED = SDL_DisplayEventID.SDL_DISPLAYEVENT_MOVED

---@class SDL_DisplayEventID* : ffi.cdata*
---@field [integer] SDL_DisplayEventID

---@class SDL_DisplayEventID** : ffi.cdata*
---@field [integer] SDL_DisplayEventID*

---@enum SDL_DisplayOrientation
local SDL_DisplayOrientation = {
    SDL_ORIENTATION_UNKNOWN = 0,
    SDL_ORIENTATION_LANDSCAPE = 1,
    SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
    SDL_ORIENTATION_PORTRAIT = 3,
    SDL_ORIENTATION_PORTRAIT_FLIPPED = 4,
}

sdl.SDL_ORIENTATION_UNKNOWN = SDL_DisplayOrientation.SDL_ORIENTATION_UNKNOWN
sdl.SDL_ORIENTATION_LANDSCAPE = SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE
sdl.SDL_ORIENTATION_LANDSCAPE_FLIPPED = SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE_FLIPPED
sdl.SDL_ORIENTATION_PORTRAIT = SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT
sdl.SDL_ORIENTATION_PORTRAIT_FLIPPED = SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT_FLIPPED

---@class SDL_DisplayOrientation* : ffi.cdata*
---@field [integer] SDL_DisplayOrientation

---@class SDL_DisplayOrientation** : ffi.cdata*
---@field [integer] SDL_DisplayOrientation*

---@enum SDL_FlashOperation
local SDL_FlashOperation = {
    SDL_FLASH_CANCEL = 0,
    SDL_FLASH_BRIEFLY = 1,
    SDL_FLASH_UNTIL_FOCUSED = 2,
}

sdl.SDL_FLASH_CANCEL = SDL_FlashOperation.SDL_FLASH_CANCEL
sdl.SDL_FLASH_BRIEFLY = SDL_FlashOperation.SDL_FLASH_BRIEFLY
sdl.SDL_FLASH_UNTIL_FOCUSED = SDL_FlashOperation.SDL_FLASH_UNTIL_FOCUSED

---@class SDL_FlashOperation* : ffi.cdata*
---@field [integer] SDL_FlashOperation

---@class SDL_FlashOperation** : ffi.cdata*
---@field [integer] SDL_FlashOperation*

---@alias SDL_GLContext ffi.cdata*

---@class SDL_GLContext* : ffi.cdata*
---@field [integer] SDL_GLContext

---@class SDL_GLContext** : ffi.cdata*
---@field [integer] SDL_GLContext*

---@enum SDL_GLattr
local SDL_GLattr = {
    SDL_GL_RED_SIZE = 0,
    SDL_GL_GREEN_SIZE = 1,
    SDL_GL_BLUE_SIZE = 2,
    SDL_GL_ALPHA_SIZE = 3,
    SDL_GL_BUFFER_SIZE = 4,
    SDL_GL_DOUBLEBUFFER = 5,
    SDL_GL_DEPTH_SIZE = 6,
    SDL_GL_STENCIL_SIZE = 7,
    SDL_GL_ACCUM_RED_SIZE = 8,
    SDL_GL_ACCUM_GREEN_SIZE = 9,
    SDL_GL_ACCUM_BLUE_SIZE = 10,
    SDL_GL_ACCUM_ALPHA_SIZE = 11,
    SDL_GL_STEREO = 12,
    SDL_GL_MULTISAMPLEBUFFERS = 13,
    SDL_GL_MULTISAMPLESAMPLES = 14,
    SDL_GL_ACCELERATED_VISUAL = 15,
    SDL_GL_RETAINED_BACKING = 16,
    SDL_GL_CONTEXT_MAJOR_VERSION = 17,
    SDL_GL_CONTEXT_MINOR_VERSION = 18,
    SDL_GL_CONTEXT_EGL = 19,
    SDL_GL_CONTEXT_FLAGS = 20,
    SDL_GL_CONTEXT_PROFILE_MASK = 21,
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22,
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24,
    SDL_GL_CONTEXT_RESET_NOTIFICATION = 25,
    SDL_GL_CONTEXT_NO_ERROR = 26,
    SDL_GL_FLOATBUFFERS = 27,
}

sdl.SDL_GL_RED_SIZE = SDL_GLattr.SDL_GL_RED_SIZE
sdl.SDL_GL_GREEN_SIZE = SDL_GLattr.SDL_GL_GREEN_SIZE
sdl.SDL_GL_BLUE_SIZE = SDL_GLattr.SDL_GL_BLUE_SIZE
sdl.SDL_GL_ALPHA_SIZE = SDL_GLattr.SDL_GL_ALPHA_SIZE
sdl.SDL_GL_BUFFER_SIZE = SDL_GLattr.SDL_GL_BUFFER_SIZE
sdl.SDL_GL_DOUBLEBUFFER = SDL_GLattr.SDL_GL_DOUBLEBUFFER
sdl.SDL_GL_DEPTH_SIZE = SDL_GLattr.SDL_GL_DEPTH_SIZE
sdl.SDL_GL_STENCIL_SIZE = SDL_GLattr.SDL_GL_STENCIL_SIZE
sdl.SDL_GL_ACCUM_RED_SIZE = SDL_GLattr.SDL_GL_ACCUM_RED_SIZE
sdl.SDL_GL_ACCUM_GREEN_SIZE = SDL_GLattr.SDL_GL_ACCUM_GREEN_SIZE
sdl.SDL_GL_ACCUM_BLUE_SIZE = SDL_GLattr.SDL_GL_ACCUM_BLUE_SIZE
sdl.SDL_GL_ACCUM_ALPHA_SIZE = SDL_GLattr.SDL_GL_ACCUM_ALPHA_SIZE
sdl.SDL_GL_STEREO = SDL_GLattr.SDL_GL_STEREO
sdl.SDL_GL_MULTISAMPLEBUFFERS = SDL_GLattr.SDL_GL_MULTISAMPLEBUFFERS
sdl.SDL_GL_MULTISAMPLESAMPLES = SDL_GLattr.SDL_GL_MULTISAMPLESAMPLES
sdl.SDL_GL_ACCELERATED_VISUAL = SDL_GLattr.SDL_GL_ACCELERATED_VISUAL
sdl.SDL_GL_RETAINED_BACKING = SDL_GLattr.SDL_GL_RETAINED_BACKING
sdl.SDL_GL_CONTEXT_MAJOR_VERSION = SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION
sdl.SDL_GL_CONTEXT_MINOR_VERSION = SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION
sdl.SDL_GL_CONTEXT_EGL = SDL_GLattr.SDL_GL_CONTEXT_EGL
sdl.SDL_GL_CONTEXT_FLAGS = SDL_GLattr.SDL_GL_CONTEXT_FLAGS
sdl.SDL_GL_CONTEXT_PROFILE_MASK = SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK
sdl.SDL_GL_SHARE_WITH_CURRENT_CONTEXT = SDL_GLattr.SDL_GL_SHARE_WITH_CURRENT_CONTEXT
sdl.SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = SDL_GLattr.SDL_GL_FRAMEBUFFER_SRGB_CAPABLE
sdl.SDL_GL_CONTEXT_RELEASE_BEHAVIOR = SDL_GLattr.SDL_GL_CONTEXT_RELEASE_BEHAVIOR
sdl.SDL_GL_CONTEXT_RESET_NOTIFICATION = SDL_GLattr.SDL_GL_CONTEXT_RESET_NOTIFICATION
sdl.SDL_GL_CONTEXT_NO_ERROR = SDL_GLattr.SDL_GL_CONTEXT_NO_ERROR
sdl.SDL_GL_FLOATBUFFERS = SDL_GLattr.SDL_GL_FLOATBUFFERS

---@class SDL_GLattr* : ffi.cdata*
---@field [integer] SDL_GLattr

---@class SDL_GLattr** : ffi.cdata*
---@field [integer] SDL_GLattr*

---@enum SDL_GLprofile
local SDL_GLprofile = {
    SDL_GL_CONTEXT_PROFILE_CORE = 1,
    SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2,
    SDL_GL_CONTEXT_PROFILE_ES = 4,
}

sdl.SDL_GL_CONTEXT_PROFILE_CORE = SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE
sdl.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY
sdl.SDL_GL_CONTEXT_PROFILE_ES = SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_ES

---@class SDL_GLprofile* : ffi.cdata*
---@field [integer] SDL_GLprofile

---@class SDL_GLprofile** : ffi.cdata*
---@field [integer] SDL_GLprofile*

---@enum SDL_GLcontextFlag
local SDL_GLcontextFlag = {
    SDL_GL_CONTEXT_DEBUG_FLAG = 1,
    SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2,
    SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4,
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8,
}

sdl.SDL_GL_CONTEXT_DEBUG_FLAG = SDL_GLcontextFlag.SDL_GL_CONTEXT_DEBUG_FLAG
sdl.SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = SDL_GLcontextFlag.SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG
sdl.SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = SDL_GLcontextFlag.SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG
sdl.SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = SDL_GLcontextFlag.SDL_GL_CONTEXT_RESET_ISOLATION_FLAG

---@class SDL_GLcontextFlag* : ffi.cdata*
---@field [integer] SDL_GLcontextFlag

---@class SDL_GLcontextFlag** : ffi.cdata*
---@field [integer] SDL_GLcontextFlag*

---@enum SDL_GLcontextReleaseFlag
local SDL_GLcontextReleaseFlag = {
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1,
}

sdl.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE
sdl.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH

---@class SDL_GLcontextReleaseFlag* : ffi.cdata*
---@field [integer] SDL_GLcontextReleaseFlag

---@class SDL_GLcontextReleaseFlag** : ffi.cdata*
---@field [integer] SDL_GLcontextReleaseFlag*

---@enum SDL_GLContextResetNotification
local SDL_GLContextResetNotification = {
    SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0,
    SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1,
}

sdl.SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_NO_NOTIFICATION
sdl.SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_LOSE_CONTEXT

---@class SDL_GLContextResetNotification* : ffi.cdata*
---@field [integer] SDL_GLContextResetNotification

---@class SDL_GLContextResetNotification** : ffi.cdata*
---@field [integer] SDL_GLContextResetNotification*

---@return integer
function sdl.GetNumVideoDrivers() end
sdl.SDL_GetNumVideoDrivers = sdl.GetNumVideoDrivers

---@param index integer
---@return string
function sdl.GetVideoDriver(index) end
sdl.SDL_GetVideoDriver = sdl.GetVideoDriver

---@param driver_name string
---@return integer
function sdl.VideoInit(driver_name) end
sdl.SDL_VideoInit = sdl.VideoInit

---@return nil
function sdl.VideoQuit() end
sdl.SDL_VideoQuit = sdl.VideoQuit

---@return string
function sdl.GetCurrentVideoDriver() end
sdl.SDL_GetCurrentVideoDriver = sdl.GetCurrentVideoDriver

---@return integer
function sdl.GetNumVideoDisplays() end
sdl.SDL_GetNumVideoDisplays = sdl.GetNumVideoDisplays

---@param displayIndex integer
---@return string
function sdl.GetDisplayName(displayIndex) end
sdl.SDL_GetDisplayName = sdl.GetDisplayName

---@param displayIndex integer
---@param rect SDL_Rect*?
---@return integer
function sdl.GetDisplayBounds(displayIndex, rect) end
sdl.SDL_GetDisplayBounds = sdl.GetDisplayBounds

---@param displayIndex integer
---@param rect SDL_Rect*?
---@return integer
function sdl.GetDisplayUsableBounds(displayIndex, rect) end
sdl.SDL_GetDisplayUsableBounds = sdl.GetDisplayUsableBounds

---@param displayIndex integer
---@param ddpi number*?
---@param hdpi number*?
---@param vdpi number*?
---@return integer
function sdl.GetDisplayDPI(displayIndex, ddpi, hdpi, vdpi) end
sdl.SDL_GetDisplayDPI = sdl.GetDisplayDPI

---@param displayIndex integer
---@return SDL_DisplayOrientation
function sdl.GetDisplayOrientation(displayIndex) end
sdl.SDL_GetDisplayOrientation = sdl.GetDisplayOrientation

---@param displayIndex integer
---@return integer
function sdl.GetNumDisplayModes(displayIndex) end
sdl.SDL_GetNumDisplayModes = sdl.GetNumDisplayModes

---@param displayIndex integer
---@param modeIndex integer
---@param mode SDL_DisplayMode*?
---@return integer
function sdl.GetDisplayMode(displayIndex, modeIndex, mode) end
sdl.SDL_GetDisplayMode = sdl.GetDisplayMode

---@param displayIndex integer
---@param mode SDL_DisplayMode*?
---@return integer
function sdl.GetDesktopDisplayMode(displayIndex, mode) end
sdl.SDL_GetDesktopDisplayMode = sdl.GetDesktopDisplayMode

---@param displayIndex integer
---@param mode SDL_DisplayMode*?
---@return integer
function sdl.GetCurrentDisplayMode(displayIndex, mode) end
sdl.SDL_GetCurrentDisplayMode = sdl.GetCurrentDisplayMode

---@param displayIndex integer
---@param mode SDL_DisplayMode*?
---@param closest SDL_DisplayMode*?
---@return SDL_DisplayMode*?
function sdl.GetClosestDisplayMode(displayIndex, mode, closest) end
sdl.SDL_GetClosestDisplayMode = sdl.GetClosestDisplayMode

---@param point SDL_Point*?
---@return integer
function sdl.GetPointDisplayIndex(point) end
sdl.SDL_GetPointDisplayIndex = sdl.GetPointDisplayIndex

---@param rect SDL_Rect*?
---@return integer
function sdl.GetRectDisplayIndex(rect) end
sdl.SDL_GetRectDisplayIndex = sdl.GetRectDisplayIndex

---@param window SDL_Window*?
---@return integer
function sdl.GetWindowDisplayIndex(window) end
sdl.SDL_GetWindowDisplayIndex = sdl.GetWindowDisplayIndex

---@param window SDL_Window*?
---@param mode SDL_DisplayMode*?
---@return integer
function sdl.SetWindowDisplayMode(window, mode) end
sdl.SDL_SetWindowDisplayMode = sdl.SetWindowDisplayMode

---@param window SDL_Window*?
---@param mode SDL_DisplayMode*?
---@return integer
function sdl.GetWindowDisplayMode(window, mode) end
sdl.SDL_GetWindowDisplayMode = sdl.GetWindowDisplayMode

---@param window SDL_Window*?
---@param size size_t*?
---@return ffi.cdata*
function sdl.GetWindowICCProfile(window, size) end
sdl.SDL_GetWindowICCProfile = sdl.GetWindowICCProfile

---@param window SDL_Window*?
---@return Uint32
function sdl.GetWindowPixelFormat(window) end
sdl.SDL_GetWindowPixelFormat = sdl.GetWindowPixelFormat

---@param title string
---@param x integer
---@param y integer
---@param w integer
---@param h integer
---@param flags Uint32
---@return SDL_Window*?
function sdl.CreateWindow(title, x, y, w, h, flags) end
sdl.SDL_CreateWindow = sdl.CreateWindow

---@param data ffi.cdata*
---@return SDL_Window*?
function sdl.CreateWindowFrom(data) end
sdl.SDL_CreateWindowFrom = sdl.CreateWindowFrom

---@param window SDL_Window*?
---@return Uint32
function sdl.GetWindowID(window) end
sdl.SDL_GetWindowID = sdl.GetWindowID

---@param id Uint32
---@return SDL_Window*?
function sdl.GetWindowFromID(id) end
sdl.SDL_GetWindowFromID = sdl.GetWindowFromID

---@param window SDL_Window*?
---@return Uint32
function sdl.GetWindowFlags(window) end
sdl.SDL_GetWindowFlags = sdl.GetWindowFlags

---@param window SDL_Window*?
---@param title string
---@return nil
function sdl.SetWindowTitle(window, title) end
sdl.SDL_SetWindowTitle = sdl.SetWindowTitle

---@param window SDL_Window*?
---@return string
function sdl.GetWindowTitle(window) end
sdl.SDL_GetWindowTitle = sdl.GetWindowTitle

---@param window SDL_Window*?
---@param icon SDL_Surface*?
---@return nil
function sdl.SetWindowIcon(window, icon) end
sdl.SDL_SetWindowIcon = sdl.SetWindowIcon

---@param window SDL_Window*?
---@param name string
---@param userdata ffi.cdata*
---@return ffi.cdata*
function sdl.SetWindowData(window, name, userdata) end
sdl.SDL_SetWindowData = sdl.SetWindowData

---@param window SDL_Window*?
---@param name string
---@return ffi.cdata*
function sdl.GetWindowData(window, name) end
sdl.SDL_GetWindowData = sdl.GetWindowData

---@param window SDL_Window*?
---@param x integer
---@param y integer
---@return nil
function sdl.SetWindowPosition(window, x, y) end
sdl.SDL_SetWindowPosition = sdl.SetWindowPosition

---@param window SDL_Window*?
---@param x integer*?
---@param y integer*?
---@return nil
function sdl.GetWindowPosition(window, x, y) end
sdl.SDL_GetWindowPosition = sdl.GetWindowPosition

---@param window SDL_Window*?
---@param w integer
---@param h integer
---@return nil
function sdl.SetWindowSize(window, w, h) end
sdl.SDL_SetWindowSize = sdl.SetWindowSize

---@param window SDL_Window*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.GetWindowSize(window, w, h) end
sdl.SDL_GetWindowSize = sdl.GetWindowSize

---@param window SDL_Window*?
---@param top integer*?
---@param left integer*?
---@param bottom integer*?
---@param right integer*?
---@return integer
function sdl.GetWindowBordersSize(window, top, left, bottom, right) end
sdl.SDL_GetWindowBordersSize = sdl.GetWindowBordersSize

---@param window SDL_Window*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.GetWindowSizeInPixels(window, w, h) end
sdl.SDL_GetWindowSizeInPixels = sdl.GetWindowSizeInPixels

---@param window SDL_Window*?
---@param min_w integer
---@param min_h integer
---@return nil
function sdl.SetWindowMinimumSize(window, min_w, min_h) end
sdl.SDL_SetWindowMinimumSize = sdl.SetWindowMinimumSize

---@param window SDL_Window*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.GetWindowMinimumSize(window, w, h) end
sdl.SDL_GetWindowMinimumSize = sdl.GetWindowMinimumSize

---@param window SDL_Window*?
---@param max_w integer
---@param max_h integer
---@return nil
function sdl.SetWindowMaximumSize(window, max_w, max_h) end
sdl.SDL_SetWindowMaximumSize = sdl.SetWindowMaximumSize

---@param window SDL_Window*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.GetWindowMaximumSize(window, w, h) end
sdl.SDL_GetWindowMaximumSize = sdl.GetWindowMaximumSize

---@param window SDL_Window*?
---@param bordered SDL_bool
---@return nil
function sdl.SetWindowBordered(window, bordered) end
sdl.SDL_SetWindowBordered = sdl.SetWindowBordered

---@param window SDL_Window*?
---@param resizable SDL_bool
---@return nil
function sdl.SetWindowResizable(window, resizable) end
sdl.SDL_SetWindowResizable = sdl.SetWindowResizable

---@param window SDL_Window*?
---@param on_top SDL_bool
---@return nil
function sdl.SetWindowAlwaysOnTop(window, on_top) end
sdl.SDL_SetWindowAlwaysOnTop = sdl.SetWindowAlwaysOnTop

---@param window SDL_Window*?
---@return nil
function sdl.ShowWindow(window) end
sdl.SDL_ShowWindow = sdl.ShowWindow

---@param window SDL_Window*?
---@return nil
function sdl.HideWindow(window) end
sdl.SDL_HideWindow = sdl.HideWindow

---@param window SDL_Window*?
---@return nil
function sdl.RaiseWindow(window) end
sdl.SDL_RaiseWindow = sdl.RaiseWindow

---@param window SDL_Window*?
---@return nil
function sdl.MaximizeWindow(window) end
sdl.SDL_MaximizeWindow = sdl.MaximizeWindow

---@param window SDL_Window*?
---@return nil
function sdl.MinimizeWindow(window) end
sdl.SDL_MinimizeWindow = sdl.MinimizeWindow

---@param window SDL_Window*?
---@return nil
function sdl.RestoreWindow(window) end
sdl.SDL_RestoreWindow = sdl.RestoreWindow

---@param window SDL_Window*?
---@param flags Uint32
---@return integer
function sdl.SetWindowFullscreen(window, flags) end
sdl.SDL_SetWindowFullscreen = sdl.SetWindowFullscreen

---@param window SDL_Window*?
---@return SDL_bool
function sdl.HasWindowSurface(window) end
sdl.SDL_HasWindowSurface = sdl.HasWindowSurface

---@param window SDL_Window*?
---@return SDL_Surface*?
function sdl.GetWindowSurface(window) end
sdl.SDL_GetWindowSurface = sdl.GetWindowSurface

---@param window SDL_Window*?
---@return integer
function sdl.UpdateWindowSurface(window) end
sdl.SDL_UpdateWindowSurface = sdl.UpdateWindowSurface

---@param window SDL_Window*?
---@param rects SDL_Rect*?
---@param numrects integer
---@return integer
function sdl.UpdateWindowSurfaceRects(window, rects, numrects) end
sdl.SDL_UpdateWindowSurfaceRects = sdl.UpdateWindowSurfaceRects

---@param window SDL_Window*?
---@return integer
function sdl.DestroyWindowSurface(window) end
sdl.SDL_DestroyWindowSurface = sdl.DestroyWindowSurface

---@param window SDL_Window*?
---@param grabbed SDL_bool
---@return nil
function sdl.SetWindowGrab(window, grabbed) end
sdl.SDL_SetWindowGrab = sdl.SetWindowGrab

---@param window SDL_Window*?
---@param grabbed SDL_bool
---@return nil
function sdl.SetWindowKeyboardGrab(window, grabbed) end
sdl.SDL_SetWindowKeyboardGrab = sdl.SetWindowKeyboardGrab

---@param window SDL_Window*?
---@param grabbed SDL_bool
---@return nil
function sdl.SetWindowMouseGrab(window, grabbed) end
sdl.SDL_SetWindowMouseGrab = sdl.SetWindowMouseGrab

---@param window SDL_Window*?
---@return SDL_bool
function sdl.GetWindowGrab(window) end
sdl.SDL_GetWindowGrab = sdl.GetWindowGrab

---@param window SDL_Window*?
---@return SDL_bool
function sdl.GetWindowKeyboardGrab(window) end
sdl.SDL_GetWindowKeyboardGrab = sdl.GetWindowKeyboardGrab

---@param window SDL_Window*?
---@return SDL_bool
function sdl.GetWindowMouseGrab(window) end
sdl.SDL_GetWindowMouseGrab = sdl.GetWindowMouseGrab

---@return SDL_Window*?
function sdl.GetGrabbedWindow() end
sdl.SDL_GetGrabbedWindow = sdl.GetGrabbedWindow

---@param window SDL_Window*?
---@param rect SDL_Rect*?
---@return integer
function sdl.SetWindowMouseRect(window, rect) end
sdl.SDL_SetWindowMouseRect = sdl.SetWindowMouseRect

---@param window SDL_Window*?
---@return SDL_Rect*?
function sdl.GetWindowMouseRect(window) end
sdl.SDL_GetWindowMouseRect = sdl.GetWindowMouseRect

---@param window SDL_Window*?
---@param brightness number
---@return integer
function sdl.SetWindowBrightness(window, brightness) end
sdl.SDL_SetWindowBrightness = sdl.SetWindowBrightness

---@param window SDL_Window*?
---@return number
function sdl.GetWindowBrightness(window) end
sdl.SDL_GetWindowBrightness = sdl.GetWindowBrightness

---@param window SDL_Window*?
---@param opacity number
---@return integer
function sdl.SetWindowOpacity(window, opacity) end
sdl.SDL_SetWindowOpacity = sdl.SetWindowOpacity

---@param window SDL_Window*?
---@param out_opacity number*?
---@return integer
function sdl.GetWindowOpacity(window, out_opacity) end
sdl.SDL_GetWindowOpacity = sdl.GetWindowOpacity

---@param modal_window SDL_Window*?
---@param parent_window SDL_Window*?
---@return integer
function sdl.SetWindowModalFor(modal_window, parent_window) end
sdl.SDL_SetWindowModalFor = sdl.SetWindowModalFor

---@param window SDL_Window*?
---@return integer
function sdl.SetWindowInputFocus(window) end
sdl.SDL_SetWindowInputFocus = sdl.SetWindowInputFocus

---@param window SDL_Window*?
---@param red Uint16*?
---@param green Uint16*?
---@param blue Uint16*?
---@return integer
function sdl.SetWindowGammaRamp(window, red, green, blue) end
sdl.SDL_SetWindowGammaRamp = sdl.SetWindowGammaRamp

---@param window SDL_Window*?
---@param red Uint16*?
---@param green Uint16*?
---@param blue Uint16*?
---@return integer
function sdl.GetWindowGammaRamp(window, red, green, blue) end
sdl.SDL_GetWindowGammaRamp = sdl.GetWindowGammaRamp

---@enum SDL_HitTestResult
local SDL_HitTestResult = {
    SDL_HITTEST_NORMAL = 0,
    SDL_HITTEST_DRAGGABLE = 1,
    SDL_HITTEST_RESIZE_TOPLEFT = 2,
    SDL_HITTEST_RESIZE_TOP = 3,
    SDL_HITTEST_RESIZE_TOPRIGHT = 4,
    SDL_HITTEST_RESIZE_RIGHT = 5,
    SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
    SDL_HITTEST_RESIZE_BOTTOM = 7,
    SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
    SDL_HITTEST_RESIZE_LEFT = 9,
}

sdl.SDL_HITTEST_NORMAL = SDL_HitTestResult.SDL_HITTEST_NORMAL
sdl.SDL_HITTEST_DRAGGABLE = SDL_HitTestResult.SDL_HITTEST_DRAGGABLE
sdl.SDL_HITTEST_RESIZE_TOPLEFT = SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPLEFT
sdl.SDL_HITTEST_RESIZE_TOP = SDL_HitTestResult.SDL_HITTEST_RESIZE_TOP
sdl.SDL_HITTEST_RESIZE_TOPRIGHT = SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPRIGHT
sdl.SDL_HITTEST_RESIZE_RIGHT = SDL_HitTestResult.SDL_HITTEST_RESIZE_RIGHT
sdl.SDL_HITTEST_RESIZE_BOTTOMRIGHT = SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMRIGHT
sdl.SDL_HITTEST_RESIZE_BOTTOM = SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOM
sdl.SDL_HITTEST_RESIZE_BOTTOMLEFT = SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMLEFT
sdl.SDL_HITTEST_RESIZE_LEFT = SDL_HitTestResult.SDL_HITTEST_RESIZE_LEFT

---@class SDL_HitTestResult* : ffi.cdata*
---@field [integer] SDL_HitTestResult

---@class SDL_HitTestResult** : ffi.cdata*
---@field [integer] SDL_HitTestResult*

---@alias SDL_HitTest fun(arg_0: SDL_Window*?, arg_1: SDL_Point*?, arg_2: ffi.cdata*): SDL_HitTestResult

---@class SDL_HitTest* : ffi.cdata*
---@field [integer] SDL_HitTest

---@class SDL_HitTest** : ffi.cdata*
---@field [integer] SDL_HitTest*

---@param window SDL_Window*?
---@param callback SDL_HitTest
---@param callback_data ffi.cdata*
---@return integer
function sdl.SetWindowHitTest(window, callback, callback_data) end
sdl.SDL_SetWindowHitTest = sdl.SetWindowHitTest

---@param window SDL_Window*?
---@param operation SDL_FlashOperation
---@return integer
function sdl.FlashWindow(window, operation) end
sdl.SDL_FlashWindow = sdl.FlashWindow

---@param window SDL_Window*?
---@return nil
function sdl.DestroyWindow(window) end
sdl.SDL_DestroyWindow = sdl.DestroyWindow

---@return SDL_bool
function sdl.IsScreenSaverEnabled() end
sdl.SDL_IsScreenSaverEnabled = sdl.IsScreenSaverEnabled

---@return nil
function sdl.EnableScreenSaver() end
sdl.SDL_EnableScreenSaver = sdl.EnableScreenSaver

---@return nil
function sdl.DisableScreenSaver() end
sdl.SDL_DisableScreenSaver = sdl.DisableScreenSaver

---@param path string
---@return integer
function sdl.GL_LoadLibrary(path) end
sdl.SDL_GL_LoadLibrary = sdl.GL_LoadLibrary

---@param proc string
---@return ffi.cdata*
function sdl.GL_GetProcAddress(proc) end
sdl.SDL_GL_GetProcAddress = sdl.GL_GetProcAddress

---@return nil
function sdl.GL_UnloadLibrary() end
sdl.SDL_GL_UnloadLibrary = sdl.GL_UnloadLibrary

---@param extension string
---@return SDL_bool
function sdl.GL_ExtensionSupported(extension) end
sdl.SDL_GL_ExtensionSupported = sdl.GL_ExtensionSupported

---@return nil
function sdl.GL_ResetAttributes() end
sdl.SDL_GL_ResetAttributes = sdl.GL_ResetAttributes

---@param attr SDL_GLattr
---@param value integer
---@return integer
function sdl.GL_SetAttribute(attr, value) end
sdl.SDL_GL_SetAttribute = sdl.GL_SetAttribute

---@param attr SDL_GLattr
---@param value integer*?
---@return integer
function sdl.GL_GetAttribute(attr, value) end
sdl.SDL_GL_GetAttribute = sdl.GL_GetAttribute

---@param window SDL_Window*?
---@return SDL_GLContext
function sdl.GL_CreateContext(window) end
sdl.SDL_GL_CreateContext = sdl.GL_CreateContext

---@param window SDL_Window*?
---@param context SDL_GLContext
---@return integer
function sdl.GL_MakeCurrent(window, context) end
sdl.SDL_GL_MakeCurrent = sdl.GL_MakeCurrent

---@return SDL_Window*?
function sdl.GL_GetCurrentWindow() end
sdl.SDL_GL_GetCurrentWindow = sdl.GL_GetCurrentWindow

---@return SDL_GLContext
function sdl.GL_GetCurrentContext() end
sdl.SDL_GL_GetCurrentContext = sdl.GL_GetCurrentContext

---@param window SDL_Window*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.GL_GetDrawableSize(window, w, h) end
sdl.SDL_GL_GetDrawableSize = sdl.GL_GetDrawableSize

---@param interval integer
---@return integer
function sdl.GL_SetSwapInterval(interval) end
sdl.SDL_GL_SetSwapInterval = sdl.GL_SetSwapInterval

---@return integer
function sdl.GL_GetSwapInterval() end
sdl.SDL_GL_GetSwapInterval = sdl.GL_GetSwapInterval

---@param window SDL_Window*?
---@return nil
function sdl.GL_SwapWindow(window) end
sdl.SDL_GL_SwapWindow = sdl.GL_SwapWindow

---@param context SDL_GLContext
---@return nil
function sdl.GL_DeleteContext(context) end
sdl.SDL_GL_DeleteContext = sdl.GL_DeleteContext

---@enum SDL_Scancode
local SDL_Scancode = {
    SDL_SCANCODE_UNKNOWN = 0,
    SDL_SCANCODE_A = 4,
    SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6,
    SDL_SCANCODE_D = 7,
    SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9,
    SDL_SCANCODE_G = 10,
    SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12,
    SDL_SCANCODE_J = 13,
    SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15,
    SDL_SCANCODE_M = 16,
    SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18,
    SDL_SCANCODE_P = 19,
    SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21,
    SDL_SCANCODE_S = 22,
    SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24,
    SDL_SCANCODE_V = 25,
    SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27,
    SDL_SCANCODE_Y = 28,
    SDL_SCANCODE_Z = 29,
    SDL_SCANCODE_1 = 30,
    SDL_SCANCODE_2 = 31,
    SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33,
    SDL_SCANCODE_5 = 34,
    SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36,
    SDL_SCANCODE_8 = 37,
    SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39,
    SDL_SCANCODE_RETURN = 40,
    SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42,
    SDL_SCANCODE_TAB = 43,
    SDL_SCANCODE_SPACE = 44,
    SDL_SCANCODE_MINUS = 45,
    SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47,
    SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49,
    SDL_SCANCODE_NONUSHASH = 50,
    SDL_SCANCODE_SEMICOLON = 51,
    SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53,
    SDL_SCANCODE_COMMA = 54,
    SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56,
    SDL_SCANCODE_CAPSLOCK = 57,
    SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59,
    SDL_SCANCODE_F3 = 60,
    SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62,
    SDL_SCANCODE_F6 = 63,
    SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65,
    SDL_SCANCODE_F9 = 66,
    SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68,
    SDL_SCANCODE_F12 = 69,
    SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71,
    SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73,
    SDL_SCANCODE_HOME = 74,
    SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76,
    SDL_SCANCODE_END = 77,
    SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79,
    SDL_SCANCODE_LEFT = 80,
    SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82,
    SDL_SCANCODE_NUMLOCKCLEAR = 83,
    SDL_SCANCODE_KP_DIVIDE = 84,
    SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86,
    SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88,
    SDL_SCANCODE_KP_1 = 89,
    SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91,
    SDL_SCANCODE_KP_4 = 92,
    SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94,
    SDL_SCANCODE_KP_7 = 95,
    SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97,
    SDL_SCANCODE_KP_0 = 98,
    SDL_SCANCODE_KP_PERIOD = 99,
    SDL_SCANCODE_NONUSBACKSLASH = 100,
    SDL_SCANCODE_APPLICATION = 101,
    SDL_SCANCODE_POWER = 102,
    SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104,
    SDL_SCANCODE_F14 = 105,
    SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107,
    SDL_SCANCODE_F17 = 108,
    SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110,
    SDL_SCANCODE_F20 = 111,
    SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113,
    SDL_SCANCODE_F23 = 114,
    SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116,
    SDL_SCANCODE_HELP = 117,
    SDL_SCANCODE_MENU = 118,
    SDL_SCANCODE_SELECT = 119,
    SDL_SCANCODE_STOP = 120,
    SDL_SCANCODE_AGAIN = 121,
    SDL_SCANCODE_UNDO = 122,
    SDL_SCANCODE_CUT = 123,
    SDL_SCANCODE_COPY = 124,
    SDL_SCANCODE_PASTE = 125,
    SDL_SCANCODE_FIND = 126,
    SDL_SCANCODE_MUTE = 127,
    SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129,
    SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134,
    SDL_SCANCODE_INTERNATIONAL1 = 135,
    SDL_SCANCODE_INTERNATIONAL2 = 136,
    SDL_SCANCODE_INTERNATIONAL3 = 137,
    SDL_SCANCODE_INTERNATIONAL4 = 138,
    SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140,
    SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142,
    SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144,
    SDL_SCANCODE_LANG2 = 145,
    SDL_SCANCODE_LANG3 = 146,
    SDL_SCANCODE_LANG4 = 147,
    SDL_SCANCODE_LANG5 = 148,
    SDL_SCANCODE_LANG6 = 149,
    SDL_SCANCODE_LANG7 = 150,
    SDL_SCANCODE_LANG8 = 151,
    SDL_SCANCODE_LANG9 = 152,
    SDL_SCANCODE_ALTERASE = 153,
    SDL_SCANCODE_SYSREQ = 154,
    SDL_SCANCODE_CANCEL = 155,
    SDL_SCANCODE_CLEAR = 156,
    SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158,
    SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160,
    SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162,
    SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164,
    SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177,
    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179,
    SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181,
    SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183,
    SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185,
    SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187,
    SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189,
    SDL_SCANCODE_KP_C = 190,
    SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192,
    SDL_SCANCODE_KP_F = 193,
    SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195,
    SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197,
    SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199,
    SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201,
    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203,
    SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205,
    SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207,
    SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209,
    SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211,
    SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213,
    SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215,
    SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217,
    SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219,
    SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221,
    SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225,
    SDL_SCANCODE_LALT = 226,
    SDL_SCANCODE_LGUI = 227,
    SDL_SCANCODE_RCTRL = 228,
    SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230,
    SDL_SCANCODE_RGUI = 231,
    SDL_SCANCODE_MODE = 257,
    SDL_SCANCODE_AUDIONEXT = 258,
    SDL_SCANCODE_AUDIOPREV = 259,
    SDL_SCANCODE_AUDIOSTOP = 260,
    SDL_SCANCODE_AUDIOPLAY = 261,
    SDL_SCANCODE_AUDIOMUTE = 262,
    SDL_SCANCODE_MEDIASELECT = 263,
    SDL_SCANCODE_WWW = 264,
    SDL_SCANCODE_MAIL = 265,
    SDL_SCANCODE_CALCULATOR = 266,
    SDL_SCANCODE_COMPUTER = 267,
    SDL_SCANCODE_AC_SEARCH = 268,
    SDL_SCANCODE_AC_HOME = 269,
    SDL_SCANCODE_AC_BACK = 270,
    SDL_SCANCODE_AC_FORWARD = 271,
    SDL_SCANCODE_AC_STOP = 272,
    SDL_SCANCODE_AC_REFRESH = 273,
    SDL_SCANCODE_AC_BOOKMARKS = 274,
    SDL_SCANCODE_BRIGHTNESSDOWN = 275,
    SDL_SCANCODE_BRIGHTNESSUP = 276,
    SDL_SCANCODE_DISPLAYSWITCH = 277,
    SDL_SCANCODE_KBDILLUMTOGGLE = 278,
    SDL_SCANCODE_KBDILLUMDOWN = 279,
    SDL_SCANCODE_KBDILLUMUP = 280,
    SDL_SCANCODE_EJECT = 281,
    SDL_SCANCODE_SLEEP = 282,
    SDL_SCANCODE_APP1 = 283,
    SDL_SCANCODE_APP2 = 284,
    SDL_SCANCODE_AUDIOREWIND = 285,
    SDL_SCANCODE_AUDIOFASTFORWARD = 286,
    SDL_SCANCODE_SOFTLEFT = 287,
    SDL_SCANCODE_SOFTRIGHT = 288,
    SDL_SCANCODE_CALL = 289,
    SDL_SCANCODE_ENDCALL = 290,
    SDL_NUM_SCANCODES = 512,
}

sdl.SDL_SCANCODE_UNKNOWN = SDL_Scancode.SDL_SCANCODE_UNKNOWN
sdl.SDL_SCANCODE_A = SDL_Scancode.SDL_SCANCODE_A
sdl.SDL_SCANCODE_B = SDL_Scancode.SDL_SCANCODE_B
sdl.SDL_SCANCODE_C = SDL_Scancode.SDL_SCANCODE_C
sdl.SDL_SCANCODE_D = SDL_Scancode.SDL_SCANCODE_D
sdl.SDL_SCANCODE_E = SDL_Scancode.SDL_SCANCODE_E
sdl.SDL_SCANCODE_F = SDL_Scancode.SDL_SCANCODE_F
sdl.SDL_SCANCODE_G = SDL_Scancode.SDL_SCANCODE_G
sdl.SDL_SCANCODE_H = SDL_Scancode.SDL_SCANCODE_H
sdl.SDL_SCANCODE_I = SDL_Scancode.SDL_SCANCODE_I
sdl.SDL_SCANCODE_J = SDL_Scancode.SDL_SCANCODE_J
sdl.SDL_SCANCODE_K = SDL_Scancode.SDL_SCANCODE_K
sdl.SDL_SCANCODE_L = SDL_Scancode.SDL_SCANCODE_L
sdl.SDL_SCANCODE_M = SDL_Scancode.SDL_SCANCODE_M
sdl.SDL_SCANCODE_N = SDL_Scancode.SDL_SCANCODE_N
sdl.SDL_SCANCODE_O = SDL_Scancode.SDL_SCANCODE_O
sdl.SDL_SCANCODE_P = SDL_Scancode.SDL_SCANCODE_P
sdl.SDL_SCANCODE_Q = SDL_Scancode.SDL_SCANCODE_Q
sdl.SDL_SCANCODE_R = SDL_Scancode.SDL_SCANCODE_R
sdl.SDL_SCANCODE_S = SDL_Scancode.SDL_SCANCODE_S
sdl.SDL_SCANCODE_T = SDL_Scancode.SDL_SCANCODE_T
sdl.SDL_SCANCODE_U = SDL_Scancode.SDL_SCANCODE_U
sdl.SDL_SCANCODE_V = SDL_Scancode.SDL_SCANCODE_V
sdl.SDL_SCANCODE_W = SDL_Scancode.SDL_SCANCODE_W
sdl.SDL_SCANCODE_X = SDL_Scancode.SDL_SCANCODE_X
sdl.SDL_SCANCODE_Y = SDL_Scancode.SDL_SCANCODE_Y
sdl.SDL_SCANCODE_Z = SDL_Scancode.SDL_SCANCODE_Z
sdl.SDL_SCANCODE_1 = SDL_Scancode.SDL_SCANCODE_1
sdl.SDL_SCANCODE_2 = SDL_Scancode.SDL_SCANCODE_2
sdl.SDL_SCANCODE_3 = SDL_Scancode.SDL_SCANCODE_3
sdl.SDL_SCANCODE_4 = SDL_Scancode.SDL_SCANCODE_4
sdl.SDL_SCANCODE_5 = SDL_Scancode.SDL_SCANCODE_5
sdl.SDL_SCANCODE_6 = SDL_Scancode.SDL_SCANCODE_6
sdl.SDL_SCANCODE_7 = SDL_Scancode.SDL_SCANCODE_7
sdl.SDL_SCANCODE_8 = SDL_Scancode.SDL_SCANCODE_8
sdl.SDL_SCANCODE_9 = SDL_Scancode.SDL_SCANCODE_9
sdl.SDL_SCANCODE_0 = SDL_Scancode.SDL_SCANCODE_0
sdl.SDL_SCANCODE_RETURN = SDL_Scancode.SDL_SCANCODE_RETURN
sdl.SDL_SCANCODE_ESCAPE = SDL_Scancode.SDL_SCANCODE_ESCAPE
sdl.SDL_SCANCODE_BACKSPACE = SDL_Scancode.SDL_SCANCODE_BACKSPACE
sdl.SDL_SCANCODE_TAB = SDL_Scancode.SDL_SCANCODE_TAB
sdl.SDL_SCANCODE_SPACE = SDL_Scancode.SDL_SCANCODE_SPACE
sdl.SDL_SCANCODE_MINUS = SDL_Scancode.SDL_SCANCODE_MINUS
sdl.SDL_SCANCODE_EQUALS = SDL_Scancode.SDL_SCANCODE_EQUALS
sdl.SDL_SCANCODE_LEFTBRACKET = SDL_Scancode.SDL_SCANCODE_LEFTBRACKET
sdl.SDL_SCANCODE_RIGHTBRACKET = SDL_Scancode.SDL_SCANCODE_RIGHTBRACKET
sdl.SDL_SCANCODE_BACKSLASH = SDL_Scancode.SDL_SCANCODE_BACKSLASH
sdl.SDL_SCANCODE_NONUSHASH = SDL_Scancode.SDL_SCANCODE_NONUSHASH
sdl.SDL_SCANCODE_SEMICOLON = SDL_Scancode.SDL_SCANCODE_SEMICOLON
sdl.SDL_SCANCODE_APOSTROPHE = SDL_Scancode.SDL_SCANCODE_APOSTROPHE
sdl.SDL_SCANCODE_GRAVE = SDL_Scancode.SDL_SCANCODE_GRAVE
sdl.SDL_SCANCODE_COMMA = SDL_Scancode.SDL_SCANCODE_COMMA
sdl.SDL_SCANCODE_PERIOD = SDL_Scancode.SDL_SCANCODE_PERIOD
sdl.SDL_SCANCODE_SLASH = SDL_Scancode.SDL_SCANCODE_SLASH
sdl.SDL_SCANCODE_CAPSLOCK = SDL_Scancode.SDL_SCANCODE_CAPSLOCK
sdl.SDL_SCANCODE_F1 = SDL_Scancode.SDL_SCANCODE_F1
sdl.SDL_SCANCODE_F2 = SDL_Scancode.SDL_SCANCODE_F2
sdl.SDL_SCANCODE_F3 = SDL_Scancode.SDL_SCANCODE_F3
sdl.SDL_SCANCODE_F4 = SDL_Scancode.SDL_SCANCODE_F4
sdl.SDL_SCANCODE_F5 = SDL_Scancode.SDL_SCANCODE_F5
sdl.SDL_SCANCODE_F6 = SDL_Scancode.SDL_SCANCODE_F6
sdl.SDL_SCANCODE_F7 = SDL_Scancode.SDL_SCANCODE_F7
sdl.SDL_SCANCODE_F8 = SDL_Scancode.SDL_SCANCODE_F8
sdl.SDL_SCANCODE_F9 = SDL_Scancode.SDL_SCANCODE_F9
sdl.SDL_SCANCODE_F10 = SDL_Scancode.SDL_SCANCODE_F10
sdl.SDL_SCANCODE_F11 = SDL_Scancode.SDL_SCANCODE_F11
sdl.SDL_SCANCODE_F12 = SDL_Scancode.SDL_SCANCODE_F12
sdl.SDL_SCANCODE_PRINTSCREEN = SDL_Scancode.SDL_SCANCODE_PRINTSCREEN
sdl.SDL_SCANCODE_SCROLLLOCK = SDL_Scancode.SDL_SCANCODE_SCROLLLOCK
sdl.SDL_SCANCODE_PAUSE = SDL_Scancode.SDL_SCANCODE_PAUSE
sdl.SDL_SCANCODE_INSERT = SDL_Scancode.SDL_SCANCODE_INSERT
sdl.SDL_SCANCODE_HOME = SDL_Scancode.SDL_SCANCODE_HOME
sdl.SDL_SCANCODE_PAGEUP = SDL_Scancode.SDL_SCANCODE_PAGEUP
sdl.SDL_SCANCODE_DELETE = SDL_Scancode.SDL_SCANCODE_DELETE
sdl.SDL_SCANCODE_END = SDL_Scancode.SDL_SCANCODE_END
sdl.SDL_SCANCODE_PAGEDOWN = SDL_Scancode.SDL_SCANCODE_PAGEDOWN
sdl.SDL_SCANCODE_RIGHT = SDL_Scancode.SDL_SCANCODE_RIGHT
sdl.SDL_SCANCODE_LEFT = SDL_Scancode.SDL_SCANCODE_LEFT
sdl.SDL_SCANCODE_DOWN = SDL_Scancode.SDL_SCANCODE_DOWN
sdl.SDL_SCANCODE_UP = SDL_Scancode.SDL_SCANCODE_UP
sdl.SDL_SCANCODE_NUMLOCKCLEAR = SDL_Scancode.SDL_SCANCODE_NUMLOCKCLEAR
sdl.SDL_SCANCODE_KP_DIVIDE = SDL_Scancode.SDL_SCANCODE_KP_DIVIDE
sdl.SDL_SCANCODE_KP_MULTIPLY = SDL_Scancode.SDL_SCANCODE_KP_MULTIPLY
sdl.SDL_SCANCODE_KP_MINUS = SDL_Scancode.SDL_SCANCODE_KP_MINUS
sdl.SDL_SCANCODE_KP_PLUS = SDL_Scancode.SDL_SCANCODE_KP_PLUS
sdl.SDL_SCANCODE_KP_ENTER = SDL_Scancode.SDL_SCANCODE_KP_ENTER
sdl.SDL_SCANCODE_KP_1 = SDL_Scancode.SDL_SCANCODE_KP_1
sdl.SDL_SCANCODE_KP_2 = SDL_Scancode.SDL_SCANCODE_KP_2
sdl.SDL_SCANCODE_KP_3 = SDL_Scancode.SDL_SCANCODE_KP_3
sdl.SDL_SCANCODE_KP_4 = SDL_Scancode.SDL_SCANCODE_KP_4
sdl.SDL_SCANCODE_KP_5 = SDL_Scancode.SDL_SCANCODE_KP_5
sdl.SDL_SCANCODE_KP_6 = SDL_Scancode.SDL_SCANCODE_KP_6
sdl.SDL_SCANCODE_KP_7 = SDL_Scancode.SDL_SCANCODE_KP_7
sdl.SDL_SCANCODE_KP_8 = SDL_Scancode.SDL_SCANCODE_KP_8
sdl.SDL_SCANCODE_KP_9 = SDL_Scancode.SDL_SCANCODE_KP_9
sdl.SDL_SCANCODE_KP_0 = SDL_Scancode.SDL_SCANCODE_KP_0
sdl.SDL_SCANCODE_KP_PERIOD = SDL_Scancode.SDL_SCANCODE_KP_PERIOD
sdl.SDL_SCANCODE_NONUSBACKSLASH = SDL_Scancode.SDL_SCANCODE_NONUSBACKSLASH
sdl.SDL_SCANCODE_APPLICATION = SDL_Scancode.SDL_SCANCODE_APPLICATION
sdl.SDL_SCANCODE_POWER = SDL_Scancode.SDL_SCANCODE_POWER
sdl.SDL_SCANCODE_KP_EQUALS = SDL_Scancode.SDL_SCANCODE_KP_EQUALS
sdl.SDL_SCANCODE_F13 = SDL_Scancode.SDL_SCANCODE_F13
sdl.SDL_SCANCODE_F14 = SDL_Scancode.SDL_SCANCODE_F14
sdl.SDL_SCANCODE_F15 = SDL_Scancode.SDL_SCANCODE_F15
sdl.SDL_SCANCODE_F16 = SDL_Scancode.SDL_SCANCODE_F16
sdl.SDL_SCANCODE_F17 = SDL_Scancode.SDL_SCANCODE_F17
sdl.SDL_SCANCODE_F18 = SDL_Scancode.SDL_SCANCODE_F18
sdl.SDL_SCANCODE_F19 = SDL_Scancode.SDL_SCANCODE_F19
sdl.SDL_SCANCODE_F20 = SDL_Scancode.SDL_SCANCODE_F20
sdl.SDL_SCANCODE_F21 = SDL_Scancode.SDL_SCANCODE_F21
sdl.SDL_SCANCODE_F22 = SDL_Scancode.SDL_SCANCODE_F22
sdl.SDL_SCANCODE_F23 = SDL_Scancode.SDL_SCANCODE_F23
sdl.SDL_SCANCODE_F24 = SDL_Scancode.SDL_SCANCODE_F24
sdl.SDL_SCANCODE_EXECUTE = SDL_Scancode.SDL_SCANCODE_EXECUTE
sdl.SDL_SCANCODE_HELP = SDL_Scancode.SDL_SCANCODE_HELP
sdl.SDL_SCANCODE_MENU = SDL_Scancode.SDL_SCANCODE_MENU
sdl.SDL_SCANCODE_SELECT = SDL_Scancode.SDL_SCANCODE_SELECT
sdl.SDL_SCANCODE_STOP = SDL_Scancode.SDL_SCANCODE_STOP
sdl.SDL_SCANCODE_AGAIN = SDL_Scancode.SDL_SCANCODE_AGAIN
sdl.SDL_SCANCODE_UNDO = SDL_Scancode.SDL_SCANCODE_UNDO
sdl.SDL_SCANCODE_CUT = SDL_Scancode.SDL_SCANCODE_CUT
sdl.SDL_SCANCODE_COPY = SDL_Scancode.SDL_SCANCODE_COPY
sdl.SDL_SCANCODE_PASTE = SDL_Scancode.SDL_SCANCODE_PASTE
sdl.SDL_SCANCODE_FIND = SDL_Scancode.SDL_SCANCODE_FIND
sdl.SDL_SCANCODE_MUTE = SDL_Scancode.SDL_SCANCODE_MUTE
sdl.SDL_SCANCODE_VOLUMEUP = SDL_Scancode.SDL_SCANCODE_VOLUMEUP
sdl.SDL_SCANCODE_VOLUMEDOWN = SDL_Scancode.SDL_SCANCODE_VOLUMEDOWN
sdl.SDL_SCANCODE_KP_COMMA = SDL_Scancode.SDL_SCANCODE_KP_COMMA
sdl.SDL_SCANCODE_KP_EQUALSAS400 = SDL_Scancode.SDL_SCANCODE_KP_EQUALSAS400
sdl.SDL_SCANCODE_INTERNATIONAL1 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL1
sdl.SDL_SCANCODE_INTERNATIONAL2 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL2
sdl.SDL_SCANCODE_INTERNATIONAL3 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL3
sdl.SDL_SCANCODE_INTERNATIONAL4 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL4
sdl.SDL_SCANCODE_INTERNATIONAL5 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL5
sdl.SDL_SCANCODE_INTERNATIONAL6 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL6
sdl.SDL_SCANCODE_INTERNATIONAL7 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL7
sdl.SDL_SCANCODE_INTERNATIONAL8 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL8
sdl.SDL_SCANCODE_INTERNATIONAL9 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL9
sdl.SDL_SCANCODE_LANG1 = SDL_Scancode.SDL_SCANCODE_LANG1
sdl.SDL_SCANCODE_LANG2 = SDL_Scancode.SDL_SCANCODE_LANG2
sdl.SDL_SCANCODE_LANG3 = SDL_Scancode.SDL_SCANCODE_LANG3
sdl.SDL_SCANCODE_LANG4 = SDL_Scancode.SDL_SCANCODE_LANG4
sdl.SDL_SCANCODE_LANG5 = SDL_Scancode.SDL_SCANCODE_LANG5
sdl.SDL_SCANCODE_LANG6 = SDL_Scancode.SDL_SCANCODE_LANG6
sdl.SDL_SCANCODE_LANG7 = SDL_Scancode.SDL_SCANCODE_LANG7
sdl.SDL_SCANCODE_LANG8 = SDL_Scancode.SDL_SCANCODE_LANG8
sdl.SDL_SCANCODE_LANG9 = SDL_Scancode.SDL_SCANCODE_LANG9
sdl.SDL_SCANCODE_ALTERASE = SDL_Scancode.SDL_SCANCODE_ALTERASE
sdl.SDL_SCANCODE_SYSREQ = SDL_Scancode.SDL_SCANCODE_SYSREQ
sdl.SDL_SCANCODE_CANCEL = SDL_Scancode.SDL_SCANCODE_CANCEL
sdl.SDL_SCANCODE_CLEAR = SDL_Scancode.SDL_SCANCODE_CLEAR
sdl.SDL_SCANCODE_PRIOR = SDL_Scancode.SDL_SCANCODE_PRIOR
sdl.SDL_SCANCODE_RETURN2 = SDL_Scancode.SDL_SCANCODE_RETURN2
sdl.SDL_SCANCODE_SEPARATOR = SDL_Scancode.SDL_SCANCODE_SEPARATOR
sdl.SDL_SCANCODE_OUT = SDL_Scancode.SDL_SCANCODE_OUT
sdl.SDL_SCANCODE_OPER = SDL_Scancode.SDL_SCANCODE_OPER
sdl.SDL_SCANCODE_CLEARAGAIN = SDL_Scancode.SDL_SCANCODE_CLEARAGAIN
sdl.SDL_SCANCODE_CRSEL = SDL_Scancode.SDL_SCANCODE_CRSEL
sdl.SDL_SCANCODE_EXSEL = SDL_Scancode.SDL_SCANCODE_EXSEL
sdl.SDL_SCANCODE_KP_00 = SDL_Scancode.SDL_SCANCODE_KP_00
sdl.SDL_SCANCODE_KP_000 = SDL_Scancode.SDL_SCANCODE_KP_000
sdl.SDL_SCANCODE_THOUSANDSSEPARATOR = SDL_Scancode.SDL_SCANCODE_THOUSANDSSEPARATOR
sdl.SDL_SCANCODE_DECIMALSEPARATOR = SDL_Scancode.SDL_SCANCODE_DECIMALSEPARATOR
sdl.SDL_SCANCODE_CURRENCYUNIT = SDL_Scancode.SDL_SCANCODE_CURRENCYUNIT
sdl.SDL_SCANCODE_CURRENCYSUBUNIT = SDL_Scancode.SDL_SCANCODE_CURRENCYSUBUNIT
sdl.SDL_SCANCODE_KP_LEFTPAREN = SDL_Scancode.SDL_SCANCODE_KP_LEFTPAREN
sdl.SDL_SCANCODE_KP_RIGHTPAREN = SDL_Scancode.SDL_SCANCODE_KP_RIGHTPAREN
sdl.SDL_SCANCODE_KP_LEFTBRACE = SDL_Scancode.SDL_SCANCODE_KP_LEFTBRACE
sdl.SDL_SCANCODE_KP_RIGHTBRACE = SDL_Scancode.SDL_SCANCODE_KP_RIGHTBRACE
sdl.SDL_SCANCODE_KP_TAB = SDL_Scancode.SDL_SCANCODE_KP_TAB
sdl.SDL_SCANCODE_KP_BACKSPACE = SDL_Scancode.SDL_SCANCODE_KP_BACKSPACE
sdl.SDL_SCANCODE_KP_A = SDL_Scancode.SDL_SCANCODE_KP_A
sdl.SDL_SCANCODE_KP_B = SDL_Scancode.SDL_SCANCODE_KP_B
sdl.SDL_SCANCODE_KP_C = SDL_Scancode.SDL_SCANCODE_KP_C
sdl.SDL_SCANCODE_KP_D = SDL_Scancode.SDL_SCANCODE_KP_D
sdl.SDL_SCANCODE_KP_E = SDL_Scancode.SDL_SCANCODE_KP_E
sdl.SDL_SCANCODE_KP_F = SDL_Scancode.SDL_SCANCODE_KP_F
sdl.SDL_SCANCODE_KP_XOR = SDL_Scancode.SDL_SCANCODE_KP_XOR
sdl.SDL_SCANCODE_KP_POWER = SDL_Scancode.SDL_SCANCODE_KP_POWER
sdl.SDL_SCANCODE_KP_PERCENT = SDL_Scancode.SDL_SCANCODE_KP_PERCENT
sdl.SDL_SCANCODE_KP_LESS = SDL_Scancode.SDL_SCANCODE_KP_LESS
sdl.SDL_SCANCODE_KP_GREATER = SDL_Scancode.SDL_SCANCODE_KP_GREATER
sdl.SDL_SCANCODE_KP_AMPERSAND = SDL_Scancode.SDL_SCANCODE_KP_AMPERSAND
sdl.SDL_SCANCODE_KP_DBLAMPERSAND = SDL_Scancode.SDL_SCANCODE_KP_DBLAMPERSAND
sdl.SDL_SCANCODE_KP_VERTICALBAR = SDL_Scancode.SDL_SCANCODE_KP_VERTICALBAR
sdl.SDL_SCANCODE_KP_DBLVERTICALBAR = SDL_Scancode.SDL_SCANCODE_KP_DBLVERTICALBAR
sdl.SDL_SCANCODE_KP_COLON = SDL_Scancode.SDL_SCANCODE_KP_COLON
sdl.SDL_SCANCODE_KP_HASH = SDL_Scancode.SDL_SCANCODE_KP_HASH
sdl.SDL_SCANCODE_KP_SPACE = SDL_Scancode.SDL_SCANCODE_KP_SPACE
sdl.SDL_SCANCODE_KP_AT = SDL_Scancode.SDL_SCANCODE_KP_AT
sdl.SDL_SCANCODE_KP_EXCLAM = SDL_Scancode.SDL_SCANCODE_KP_EXCLAM
sdl.SDL_SCANCODE_KP_MEMSTORE = SDL_Scancode.SDL_SCANCODE_KP_MEMSTORE
sdl.SDL_SCANCODE_KP_MEMRECALL = SDL_Scancode.SDL_SCANCODE_KP_MEMRECALL
sdl.SDL_SCANCODE_KP_MEMCLEAR = SDL_Scancode.SDL_SCANCODE_KP_MEMCLEAR
sdl.SDL_SCANCODE_KP_MEMADD = SDL_Scancode.SDL_SCANCODE_KP_MEMADD
sdl.SDL_SCANCODE_KP_MEMSUBTRACT = SDL_Scancode.SDL_SCANCODE_KP_MEMSUBTRACT
sdl.SDL_SCANCODE_KP_MEMMULTIPLY = SDL_Scancode.SDL_SCANCODE_KP_MEMMULTIPLY
sdl.SDL_SCANCODE_KP_MEMDIVIDE = SDL_Scancode.SDL_SCANCODE_KP_MEMDIVIDE
sdl.SDL_SCANCODE_KP_PLUSMINUS = SDL_Scancode.SDL_SCANCODE_KP_PLUSMINUS
sdl.SDL_SCANCODE_KP_CLEAR = SDL_Scancode.SDL_SCANCODE_KP_CLEAR
sdl.SDL_SCANCODE_KP_CLEARENTRY = SDL_Scancode.SDL_SCANCODE_KP_CLEARENTRY
sdl.SDL_SCANCODE_KP_BINARY = SDL_Scancode.SDL_SCANCODE_KP_BINARY
sdl.SDL_SCANCODE_KP_OCTAL = SDL_Scancode.SDL_SCANCODE_KP_OCTAL
sdl.SDL_SCANCODE_KP_DECIMAL = SDL_Scancode.SDL_SCANCODE_KP_DECIMAL
sdl.SDL_SCANCODE_KP_HEXADECIMAL = SDL_Scancode.SDL_SCANCODE_KP_HEXADECIMAL
sdl.SDL_SCANCODE_LCTRL = SDL_Scancode.SDL_SCANCODE_LCTRL
sdl.SDL_SCANCODE_LSHIFT = SDL_Scancode.SDL_SCANCODE_LSHIFT
sdl.SDL_SCANCODE_LALT = SDL_Scancode.SDL_SCANCODE_LALT
sdl.SDL_SCANCODE_LGUI = SDL_Scancode.SDL_SCANCODE_LGUI
sdl.SDL_SCANCODE_RCTRL = SDL_Scancode.SDL_SCANCODE_RCTRL
sdl.SDL_SCANCODE_RSHIFT = SDL_Scancode.SDL_SCANCODE_RSHIFT
sdl.SDL_SCANCODE_RALT = SDL_Scancode.SDL_SCANCODE_RALT
sdl.SDL_SCANCODE_RGUI = SDL_Scancode.SDL_SCANCODE_RGUI
sdl.SDL_SCANCODE_MODE = SDL_Scancode.SDL_SCANCODE_MODE
sdl.SDL_SCANCODE_AUDIONEXT = SDL_Scancode.SDL_SCANCODE_AUDIONEXT
sdl.SDL_SCANCODE_AUDIOPREV = SDL_Scancode.SDL_SCANCODE_AUDIOPREV
sdl.SDL_SCANCODE_AUDIOSTOP = SDL_Scancode.SDL_SCANCODE_AUDIOSTOP
sdl.SDL_SCANCODE_AUDIOPLAY = SDL_Scancode.SDL_SCANCODE_AUDIOPLAY
sdl.SDL_SCANCODE_AUDIOMUTE = SDL_Scancode.SDL_SCANCODE_AUDIOMUTE
sdl.SDL_SCANCODE_MEDIASELECT = SDL_Scancode.SDL_SCANCODE_MEDIASELECT
sdl.SDL_SCANCODE_WWW = SDL_Scancode.SDL_SCANCODE_WWW
sdl.SDL_SCANCODE_MAIL = SDL_Scancode.SDL_SCANCODE_MAIL
sdl.SDL_SCANCODE_CALCULATOR = SDL_Scancode.SDL_SCANCODE_CALCULATOR
sdl.SDL_SCANCODE_COMPUTER = SDL_Scancode.SDL_SCANCODE_COMPUTER
sdl.SDL_SCANCODE_AC_SEARCH = SDL_Scancode.SDL_SCANCODE_AC_SEARCH
sdl.SDL_SCANCODE_AC_HOME = SDL_Scancode.SDL_SCANCODE_AC_HOME
sdl.SDL_SCANCODE_AC_BACK = SDL_Scancode.SDL_SCANCODE_AC_BACK
sdl.SDL_SCANCODE_AC_FORWARD = SDL_Scancode.SDL_SCANCODE_AC_FORWARD
sdl.SDL_SCANCODE_AC_STOP = SDL_Scancode.SDL_SCANCODE_AC_STOP
sdl.SDL_SCANCODE_AC_REFRESH = SDL_Scancode.SDL_SCANCODE_AC_REFRESH
sdl.SDL_SCANCODE_AC_BOOKMARKS = SDL_Scancode.SDL_SCANCODE_AC_BOOKMARKS
sdl.SDL_SCANCODE_BRIGHTNESSDOWN = SDL_Scancode.SDL_SCANCODE_BRIGHTNESSDOWN
sdl.SDL_SCANCODE_BRIGHTNESSUP = SDL_Scancode.SDL_SCANCODE_BRIGHTNESSUP
sdl.SDL_SCANCODE_DISPLAYSWITCH = SDL_Scancode.SDL_SCANCODE_DISPLAYSWITCH
sdl.SDL_SCANCODE_KBDILLUMTOGGLE = SDL_Scancode.SDL_SCANCODE_KBDILLUMTOGGLE
sdl.SDL_SCANCODE_KBDILLUMDOWN = SDL_Scancode.SDL_SCANCODE_KBDILLUMDOWN
sdl.SDL_SCANCODE_KBDILLUMUP = SDL_Scancode.SDL_SCANCODE_KBDILLUMUP
sdl.SDL_SCANCODE_EJECT = SDL_Scancode.SDL_SCANCODE_EJECT
sdl.SDL_SCANCODE_SLEEP = SDL_Scancode.SDL_SCANCODE_SLEEP
sdl.SDL_SCANCODE_APP1 = SDL_Scancode.SDL_SCANCODE_APP1
sdl.SDL_SCANCODE_APP2 = SDL_Scancode.SDL_SCANCODE_APP2
sdl.SDL_SCANCODE_AUDIOREWIND = SDL_Scancode.SDL_SCANCODE_AUDIOREWIND
sdl.SDL_SCANCODE_AUDIOFASTFORWARD = SDL_Scancode.SDL_SCANCODE_AUDIOFASTFORWARD
sdl.SDL_SCANCODE_SOFTLEFT = SDL_Scancode.SDL_SCANCODE_SOFTLEFT
sdl.SDL_SCANCODE_SOFTRIGHT = SDL_Scancode.SDL_SCANCODE_SOFTRIGHT
sdl.SDL_SCANCODE_CALL = SDL_Scancode.SDL_SCANCODE_CALL
sdl.SDL_SCANCODE_ENDCALL = SDL_Scancode.SDL_SCANCODE_ENDCALL
sdl.SDL_NUM_SCANCODES = SDL_Scancode.SDL_NUM_SCANCODES

---@class SDL_Scancode* : ffi.cdata*
---@field [integer] SDL_Scancode

---@class SDL_Scancode** : ffi.cdata*
---@field [integer] SDL_Scancode*

---@alias SDL_Keycode Sint32

---@class SDL_Keycode* : ffi.cdata*
---@field [integer] SDL_Keycode

---@class SDL_Keycode** : ffi.cdata*
---@field [integer] SDL_Keycode*

---@enum SDL_KeyCode
local SDL_KeyCode = {
    SDLK_UNKNOWN = 0,
    SDLK_RETURN = 13,
    SDLK_ESCAPE = 27,
    SDLK_BACKSPACE = 8,
    SDLK_TAB = 9,
    SDLK_SPACE = 32,
    SDLK_EXCLAIM = 33,
    SDLK_QUOTEDBL = 34,
    SDLK_HASH = 35,
    SDLK_PERCENT = 37,
    SDLK_DOLLAR = 36,
    SDLK_AMPERSAND = 38,
    SDLK_QUOTE = 39,
    SDLK_LEFTPAREN = 40,
    SDLK_RIGHTPAREN = 41,
    SDLK_ASTERISK = 42,
    SDLK_PLUS = 43,
    SDLK_COMMA = 44,
    SDLK_MINUS = 45,
    SDLK_PERIOD = 46,
    SDLK_SLASH = 47,
    SDLK_0 = 48,
    SDLK_1 = 49,
    SDLK_2 = 50,
    SDLK_3 = 51,
    SDLK_4 = 52,
    SDLK_5 = 53,
    SDLK_6 = 54,
    SDLK_7 = 55,
    SDLK_8 = 56,
    SDLK_9 = 57,
    SDLK_COLON = 58,
    SDLK_SEMICOLON = 59,
    SDLK_LESS = 60,
    SDLK_EQUALS = 61,
    SDLK_GREATER = 62,
    SDLK_QUESTION = 63,
    SDLK_AT = 64,
    SDLK_LEFTBRACKET = 91,
    SDLK_BACKSLASH = 92,
    SDLK_RIGHTBRACKET = 93,
    SDLK_CARET = 94,
    SDLK_UNDERSCORE = 95,
    SDLK_BACKQUOTE = 96,
    SDLK_a = 97,
    SDLK_b = 98,
    SDLK_c = 99,
    SDLK_d = 100,
    SDLK_e = 101,
    SDLK_f = 102,
    SDLK_g = 103,
    SDLK_h = 104,
    SDLK_i = 105,
    SDLK_j = 106,
    SDLK_k = 107,
    SDLK_l = 108,
    SDLK_m = 109,
    SDLK_n = 110,
    SDLK_o = 111,
    SDLK_p = 112,
    SDLK_q = 113,
    SDLK_r = 114,
    SDLK_s = 115,
    SDLK_t = 116,
    SDLK_u = 117,
    SDLK_v = 118,
    SDLK_w = 119,
    SDLK_x = 120,
    SDLK_y = 121,
    SDLK_z = 122,
    SDLK_CAPSLOCK = 1073741881,
    SDLK_F1 = 1073741882,
    SDLK_F2 = 1073741883,
    SDLK_F3 = 1073741884,
    SDLK_F4 = 1073741885,
    SDLK_F5 = 1073741886,
    SDLK_F6 = 1073741887,
    SDLK_F7 = 1073741888,
    SDLK_F8 = 1073741889,
    SDLK_F9 = 1073741890,
    SDLK_F10 = 1073741891,
    SDLK_F11 = 1073741892,
    SDLK_F12 = 1073741893,
    SDLK_PRINTSCREEN = 1073741894,
    SDLK_SCROLLLOCK = 1073741895,
    SDLK_PAUSE = 1073741896,
    SDLK_INSERT = 1073741897,
    SDLK_HOME = 1073741898,
    SDLK_PAGEUP = 1073741899,
    SDLK_DELETE = 127,
    SDLK_END = 1073741901,
    SDLK_PAGEDOWN = 1073741902,
    SDLK_RIGHT = 1073741903,
    SDLK_LEFT = 1073741904,
    SDLK_DOWN = 1073741905,
    SDLK_UP = 1073741906,
    SDLK_NUMLOCKCLEAR = 1073741907,
    SDLK_KP_DIVIDE = 1073741908,
    SDLK_KP_MULTIPLY = 1073741909,
    SDLK_KP_MINUS = 1073741910,
    SDLK_KP_PLUS = 1073741911,
    SDLK_KP_ENTER = 1073741912,
    SDLK_KP_1 = 1073741913,
    SDLK_KP_2 = 1073741914,
    SDLK_KP_3 = 1073741915,
    SDLK_KP_4 = 1073741916,
    SDLK_KP_5 = 1073741917,
    SDLK_KP_6 = 1073741918,
    SDLK_KP_7 = 1073741919,
    SDLK_KP_8 = 1073741920,
    SDLK_KP_9 = 1073741921,
    SDLK_KP_0 = 1073741922,
    SDLK_KP_PERIOD = 1073741923,
    SDLK_APPLICATION = 1073741925,
    SDLK_POWER = 1073741926,
    SDLK_KP_EQUALS = 1073741927,
    SDLK_F13 = 1073741928,
    SDLK_F14 = 1073741929,
    SDLK_F15 = 1073741930,
    SDLK_F16 = 1073741931,
    SDLK_F17 = 1073741932,
    SDLK_F18 = 1073741933,
    SDLK_F19 = 1073741934,
    SDLK_F20 = 1073741935,
    SDLK_F21 = 1073741936,
    SDLK_F22 = 1073741937,
    SDLK_F23 = 1073741938,
    SDLK_F24 = 1073741939,
    SDLK_EXECUTE = 1073741940,
    SDLK_HELP = 1073741941,
    SDLK_MENU = 1073741942,
    SDLK_SELECT = 1073741943,
    SDLK_STOP = 1073741944,
    SDLK_AGAIN = 1073741945,
    SDLK_UNDO = 1073741946,
    SDLK_CUT = 1073741947,
    SDLK_COPY = 1073741948,
    SDLK_PASTE = 1073741949,
    SDLK_FIND = 1073741950,
    SDLK_MUTE = 1073741951,
    SDLK_VOLUMEUP = 1073741952,
    SDLK_VOLUMEDOWN = 1073741953,
    SDLK_KP_COMMA = 1073741957,
    SDLK_KP_EQUALSAS400 = 1073741958,
    SDLK_ALTERASE = 1073741977,
    SDLK_SYSREQ = 1073741978,
    SDLK_CANCEL = 1073741979,
    SDLK_CLEAR = 1073741980,
    SDLK_PRIOR = 1073741981,
    SDLK_RETURN2 = 1073741982,
    SDLK_SEPARATOR = 1073741983,
    SDLK_OUT = 1073741984,
    SDLK_OPER = 1073741985,
    SDLK_CLEARAGAIN = 1073741986,
    SDLK_CRSEL = 1073741987,
    SDLK_EXSEL = 1073741988,
    SDLK_KP_00 = 1073742000,
    SDLK_KP_000 = 1073742001,
    SDLK_THOUSANDSSEPARATOR = 1073742002,
    SDLK_DECIMALSEPARATOR = 1073742003,
    SDLK_CURRENCYUNIT = 1073742004,
    SDLK_CURRENCYSUBUNIT = 1073742005,
    SDLK_KP_LEFTPAREN = 1073742006,
    SDLK_KP_RIGHTPAREN = 1073742007,
    SDLK_KP_LEFTBRACE = 1073742008,
    SDLK_KP_RIGHTBRACE = 1073742009,
    SDLK_KP_TAB = 1073742010,
    SDLK_KP_BACKSPACE = 1073742011,
    SDLK_KP_A = 1073742012,
    SDLK_KP_B = 1073742013,
    SDLK_KP_C = 1073742014,
    SDLK_KP_D = 1073742015,
    SDLK_KP_E = 1073742016,
    SDLK_KP_F = 1073742017,
    SDLK_KP_XOR = 1073742018,
    SDLK_KP_POWER = 1073742019,
    SDLK_KP_PERCENT = 1073742020,
    SDLK_KP_LESS = 1073742021,
    SDLK_KP_GREATER = 1073742022,
    SDLK_KP_AMPERSAND = 1073742023,
    SDLK_KP_DBLAMPERSAND = 1073742024,
    SDLK_KP_VERTICALBAR = 1073742025,
    SDLK_KP_DBLVERTICALBAR = 1073742026,
    SDLK_KP_COLON = 1073742027,
    SDLK_KP_HASH = 1073742028,
    SDLK_KP_SPACE = 1073742029,
    SDLK_KP_AT = 1073742030,
    SDLK_KP_EXCLAM = 1073742031,
    SDLK_KP_MEMSTORE = 1073742032,
    SDLK_KP_MEMRECALL = 1073742033,
    SDLK_KP_MEMCLEAR = 1073742034,
    SDLK_KP_MEMADD = 1073742035,
    SDLK_KP_MEMSUBTRACT = 1073742036,
    SDLK_KP_MEMMULTIPLY = 1073742037,
    SDLK_KP_MEMDIVIDE = 1073742038,
    SDLK_KP_PLUSMINUS = 1073742039,
    SDLK_KP_CLEAR = 1073742040,
    SDLK_KP_CLEARENTRY = 1073742041,
    SDLK_KP_BINARY = 1073742042,
    SDLK_KP_OCTAL = 1073742043,
    SDLK_KP_DECIMAL = 1073742044,
    SDLK_KP_HEXADECIMAL = 1073742045,
    SDLK_LCTRL = 1073742048,
    SDLK_LSHIFT = 1073742049,
    SDLK_LALT = 1073742050,
    SDLK_LGUI = 1073742051,
    SDLK_RCTRL = 1073742052,
    SDLK_RSHIFT = 1073742053,
    SDLK_RALT = 1073742054,
    SDLK_RGUI = 1073742055,
    SDLK_MODE = 1073742081,
    SDLK_AUDIONEXT = 1073742082,
    SDLK_AUDIOPREV = 1073742083,
    SDLK_AUDIOSTOP = 1073742084,
    SDLK_AUDIOPLAY = 1073742085,
    SDLK_AUDIOMUTE = 1073742086,
    SDLK_MEDIASELECT = 1073742087,
    SDLK_WWW = 1073742088,
    SDLK_MAIL = 1073742089,
    SDLK_CALCULATOR = 1073742090,
    SDLK_COMPUTER = 1073742091,
    SDLK_AC_SEARCH = 1073742092,
    SDLK_AC_HOME = 1073742093,
    SDLK_AC_BACK = 1073742094,
    SDLK_AC_FORWARD = 1073742095,
    SDLK_AC_STOP = 1073742096,
    SDLK_AC_REFRESH = 1073742097,
    SDLK_AC_BOOKMARKS = 1073742098,
    SDLK_BRIGHTNESSDOWN = 1073742099,
    SDLK_BRIGHTNESSUP = 1073742100,
    SDLK_DISPLAYSWITCH = 1073742101,
    SDLK_KBDILLUMTOGGLE = 1073742102,
    SDLK_KBDILLUMDOWN = 1073742103,
    SDLK_KBDILLUMUP = 1073742104,
    SDLK_EJECT = 1073742105,
    SDLK_SLEEP = 1073742106,
    SDLK_APP1 = 1073742107,
    SDLK_APP2 = 1073742108,
    SDLK_AUDIOREWIND = 1073742109,
    SDLK_AUDIOFASTFORWARD = 1073742110,
    SDLK_SOFTLEFT = 1073742111,
    SDLK_SOFTRIGHT = 1073742112,
    SDLK_CALL = 1073742113,
    SDLK_ENDCALL = 1073742114,
}

sdl.SDLK_UNKNOWN = SDL_KeyCode.SDLK_UNKNOWN
sdl.SDLK_RETURN = SDL_KeyCode.SDLK_RETURN
sdl.SDLK_ESCAPE = SDL_KeyCode.SDLK_ESCAPE
sdl.SDLK_BACKSPACE = SDL_KeyCode.SDLK_BACKSPACE
sdl.SDLK_TAB = SDL_KeyCode.SDLK_TAB
sdl.SDLK_SPACE = SDL_KeyCode.SDLK_SPACE
sdl.SDLK_EXCLAIM = SDL_KeyCode.SDLK_EXCLAIM
sdl.SDLK_QUOTEDBL = SDL_KeyCode.SDLK_QUOTEDBL
sdl.SDLK_HASH = SDL_KeyCode.SDLK_HASH
sdl.SDLK_PERCENT = SDL_KeyCode.SDLK_PERCENT
sdl.SDLK_DOLLAR = SDL_KeyCode.SDLK_DOLLAR
sdl.SDLK_AMPERSAND = SDL_KeyCode.SDLK_AMPERSAND
sdl.SDLK_QUOTE = SDL_KeyCode.SDLK_QUOTE
sdl.SDLK_LEFTPAREN = SDL_KeyCode.SDLK_LEFTPAREN
sdl.SDLK_RIGHTPAREN = SDL_KeyCode.SDLK_RIGHTPAREN
sdl.SDLK_ASTERISK = SDL_KeyCode.SDLK_ASTERISK
sdl.SDLK_PLUS = SDL_KeyCode.SDLK_PLUS
sdl.SDLK_COMMA = SDL_KeyCode.SDLK_COMMA
sdl.SDLK_MINUS = SDL_KeyCode.SDLK_MINUS
sdl.SDLK_PERIOD = SDL_KeyCode.SDLK_PERIOD
sdl.SDLK_SLASH = SDL_KeyCode.SDLK_SLASH
sdl.SDLK_0 = SDL_KeyCode.SDLK_0
sdl.SDLK_1 = SDL_KeyCode.SDLK_1
sdl.SDLK_2 = SDL_KeyCode.SDLK_2
sdl.SDLK_3 = SDL_KeyCode.SDLK_3
sdl.SDLK_4 = SDL_KeyCode.SDLK_4
sdl.SDLK_5 = SDL_KeyCode.SDLK_5
sdl.SDLK_6 = SDL_KeyCode.SDLK_6
sdl.SDLK_7 = SDL_KeyCode.SDLK_7
sdl.SDLK_8 = SDL_KeyCode.SDLK_8
sdl.SDLK_9 = SDL_KeyCode.SDLK_9
sdl.SDLK_COLON = SDL_KeyCode.SDLK_COLON
sdl.SDLK_SEMICOLON = SDL_KeyCode.SDLK_SEMICOLON
sdl.SDLK_LESS = SDL_KeyCode.SDLK_LESS
sdl.SDLK_EQUALS = SDL_KeyCode.SDLK_EQUALS
sdl.SDLK_GREATER = SDL_KeyCode.SDLK_GREATER
sdl.SDLK_QUESTION = SDL_KeyCode.SDLK_QUESTION
sdl.SDLK_AT = SDL_KeyCode.SDLK_AT
sdl.SDLK_LEFTBRACKET = SDL_KeyCode.SDLK_LEFTBRACKET
sdl.SDLK_BACKSLASH = SDL_KeyCode.SDLK_BACKSLASH
sdl.SDLK_RIGHTBRACKET = SDL_KeyCode.SDLK_RIGHTBRACKET
sdl.SDLK_CARET = SDL_KeyCode.SDLK_CARET
sdl.SDLK_UNDERSCORE = SDL_KeyCode.SDLK_UNDERSCORE
sdl.SDLK_BACKQUOTE = SDL_KeyCode.SDLK_BACKQUOTE
sdl.SDLK_a = SDL_KeyCode.SDLK_a
sdl.SDLK_b = SDL_KeyCode.SDLK_b
sdl.SDLK_c = SDL_KeyCode.SDLK_c
sdl.SDLK_d = SDL_KeyCode.SDLK_d
sdl.SDLK_e = SDL_KeyCode.SDLK_e
sdl.SDLK_f = SDL_KeyCode.SDLK_f
sdl.SDLK_g = SDL_KeyCode.SDLK_g
sdl.SDLK_h = SDL_KeyCode.SDLK_h
sdl.SDLK_i = SDL_KeyCode.SDLK_i
sdl.SDLK_j = SDL_KeyCode.SDLK_j
sdl.SDLK_k = SDL_KeyCode.SDLK_k
sdl.SDLK_l = SDL_KeyCode.SDLK_l
sdl.SDLK_m = SDL_KeyCode.SDLK_m
sdl.SDLK_n = SDL_KeyCode.SDLK_n
sdl.SDLK_o = SDL_KeyCode.SDLK_o
sdl.SDLK_p = SDL_KeyCode.SDLK_p
sdl.SDLK_q = SDL_KeyCode.SDLK_q
sdl.SDLK_r = SDL_KeyCode.SDLK_r
sdl.SDLK_s = SDL_KeyCode.SDLK_s
sdl.SDLK_t = SDL_KeyCode.SDLK_t
sdl.SDLK_u = SDL_KeyCode.SDLK_u
sdl.SDLK_v = SDL_KeyCode.SDLK_v
sdl.SDLK_w = SDL_KeyCode.SDLK_w
sdl.SDLK_x = SDL_KeyCode.SDLK_x
sdl.SDLK_y = SDL_KeyCode.SDLK_y
sdl.SDLK_z = SDL_KeyCode.SDLK_z
sdl.SDLK_CAPSLOCK = SDL_KeyCode.SDLK_CAPSLOCK
sdl.SDLK_F1 = SDL_KeyCode.SDLK_F1
sdl.SDLK_F2 = SDL_KeyCode.SDLK_F2
sdl.SDLK_F3 = SDL_KeyCode.SDLK_F3
sdl.SDLK_F4 = SDL_KeyCode.SDLK_F4
sdl.SDLK_F5 = SDL_KeyCode.SDLK_F5
sdl.SDLK_F6 = SDL_KeyCode.SDLK_F6
sdl.SDLK_F7 = SDL_KeyCode.SDLK_F7
sdl.SDLK_F8 = SDL_KeyCode.SDLK_F8
sdl.SDLK_F9 = SDL_KeyCode.SDLK_F9
sdl.SDLK_F10 = SDL_KeyCode.SDLK_F10
sdl.SDLK_F11 = SDL_KeyCode.SDLK_F11
sdl.SDLK_F12 = SDL_KeyCode.SDLK_F12
sdl.SDLK_PRINTSCREEN = SDL_KeyCode.SDLK_PRINTSCREEN
sdl.SDLK_SCROLLLOCK = SDL_KeyCode.SDLK_SCROLLLOCK
sdl.SDLK_PAUSE = SDL_KeyCode.SDLK_PAUSE
sdl.SDLK_INSERT = SDL_KeyCode.SDLK_INSERT
sdl.SDLK_HOME = SDL_KeyCode.SDLK_HOME
sdl.SDLK_PAGEUP = SDL_KeyCode.SDLK_PAGEUP
sdl.SDLK_DELETE = SDL_KeyCode.SDLK_DELETE
sdl.SDLK_END = SDL_KeyCode.SDLK_END
sdl.SDLK_PAGEDOWN = SDL_KeyCode.SDLK_PAGEDOWN
sdl.SDLK_RIGHT = SDL_KeyCode.SDLK_RIGHT
sdl.SDLK_LEFT = SDL_KeyCode.SDLK_LEFT
sdl.SDLK_DOWN = SDL_KeyCode.SDLK_DOWN
sdl.SDLK_UP = SDL_KeyCode.SDLK_UP
sdl.SDLK_NUMLOCKCLEAR = SDL_KeyCode.SDLK_NUMLOCKCLEAR
sdl.SDLK_KP_DIVIDE = SDL_KeyCode.SDLK_KP_DIVIDE
sdl.SDLK_KP_MULTIPLY = SDL_KeyCode.SDLK_KP_MULTIPLY
sdl.SDLK_KP_MINUS = SDL_KeyCode.SDLK_KP_MINUS
sdl.SDLK_KP_PLUS = SDL_KeyCode.SDLK_KP_PLUS
sdl.SDLK_KP_ENTER = SDL_KeyCode.SDLK_KP_ENTER
sdl.SDLK_KP_1 = SDL_KeyCode.SDLK_KP_1
sdl.SDLK_KP_2 = SDL_KeyCode.SDLK_KP_2
sdl.SDLK_KP_3 = SDL_KeyCode.SDLK_KP_3
sdl.SDLK_KP_4 = SDL_KeyCode.SDLK_KP_4
sdl.SDLK_KP_5 = SDL_KeyCode.SDLK_KP_5
sdl.SDLK_KP_6 = SDL_KeyCode.SDLK_KP_6
sdl.SDLK_KP_7 = SDL_KeyCode.SDLK_KP_7
sdl.SDLK_KP_8 = SDL_KeyCode.SDLK_KP_8
sdl.SDLK_KP_9 = SDL_KeyCode.SDLK_KP_9
sdl.SDLK_KP_0 = SDL_KeyCode.SDLK_KP_0
sdl.SDLK_KP_PERIOD = SDL_KeyCode.SDLK_KP_PERIOD
sdl.SDLK_APPLICATION = SDL_KeyCode.SDLK_APPLICATION
sdl.SDLK_POWER = SDL_KeyCode.SDLK_POWER
sdl.SDLK_KP_EQUALS = SDL_KeyCode.SDLK_KP_EQUALS
sdl.SDLK_F13 = SDL_KeyCode.SDLK_F13
sdl.SDLK_F14 = SDL_KeyCode.SDLK_F14
sdl.SDLK_F15 = SDL_KeyCode.SDLK_F15
sdl.SDLK_F16 = SDL_KeyCode.SDLK_F16
sdl.SDLK_F17 = SDL_KeyCode.SDLK_F17
sdl.SDLK_F18 = SDL_KeyCode.SDLK_F18
sdl.SDLK_F19 = SDL_KeyCode.SDLK_F19
sdl.SDLK_F20 = SDL_KeyCode.SDLK_F20
sdl.SDLK_F21 = SDL_KeyCode.SDLK_F21
sdl.SDLK_F22 = SDL_KeyCode.SDLK_F22
sdl.SDLK_F23 = SDL_KeyCode.SDLK_F23
sdl.SDLK_F24 = SDL_KeyCode.SDLK_F24
sdl.SDLK_EXECUTE = SDL_KeyCode.SDLK_EXECUTE
sdl.SDLK_HELP = SDL_KeyCode.SDLK_HELP
sdl.SDLK_MENU = SDL_KeyCode.SDLK_MENU
sdl.SDLK_SELECT = SDL_KeyCode.SDLK_SELECT
sdl.SDLK_STOP = SDL_KeyCode.SDLK_STOP
sdl.SDLK_AGAIN = SDL_KeyCode.SDLK_AGAIN
sdl.SDLK_UNDO = SDL_KeyCode.SDLK_UNDO
sdl.SDLK_CUT = SDL_KeyCode.SDLK_CUT
sdl.SDLK_COPY = SDL_KeyCode.SDLK_COPY
sdl.SDLK_PASTE = SDL_KeyCode.SDLK_PASTE
sdl.SDLK_FIND = SDL_KeyCode.SDLK_FIND
sdl.SDLK_MUTE = SDL_KeyCode.SDLK_MUTE
sdl.SDLK_VOLUMEUP = SDL_KeyCode.SDLK_VOLUMEUP
sdl.SDLK_VOLUMEDOWN = SDL_KeyCode.SDLK_VOLUMEDOWN
sdl.SDLK_KP_COMMA = SDL_KeyCode.SDLK_KP_COMMA
sdl.SDLK_KP_EQUALSAS400 = SDL_KeyCode.SDLK_KP_EQUALSAS400
sdl.SDLK_ALTERASE = SDL_KeyCode.SDLK_ALTERASE
sdl.SDLK_SYSREQ = SDL_KeyCode.SDLK_SYSREQ
sdl.SDLK_CANCEL = SDL_KeyCode.SDLK_CANCEL
sdl.SDLK_CLEAR = SDL_KeyCode.SDLK_CLEAR
sdl.SDLK_PRIOR = SDL_KeyCode.SDLK_PRIOR
sdl.SDLK_RETURN2 = SDL_KeyCode.SDLK_RETURN2
sdl.SDLK_SEPARATOR = SDL_KeyCode.SDLK_SEPARATOR
sdl.SDLK_OUT = SDL_KeyCode.SDLK_OUT
sdl.SDLK_OPER = SDL_KeyCode.SDLK_OPER
sdl.SDLK_CLEARAGAIN = SDL_KeyCode.SDLK_CLEARAGAIN
sdl.SDLK_CRSEL = SDL_KeyCode.SDLK_CRSEL
sdl.SDLK_EXSEL = SDL_KeyCode.SDLK_EXSEL
sdl.SDLK_KP_00 = SDL_KeyCode.SDLK_KP_00
sdl.SDLK_KP_000 = SDL_KeyCode.SDLK_KP_000
sdl.SDLK_THOUSANDSSEPARATOR = SDL_KeyCode.SDLK_THOUSANDSSEPARATOR
sdl.SDLK_DECIMALSEPARATOR = SDL_KeyCode.SDLK_DECIMALSEPARATOR
sdl.SDLK_CURRENCYUNIT = SDL_KeyCode.SDLK_CURRENCYUNIT
sdl.SDLK_CURRENCYSUBUNIT = SDL_KeyCode.SDLK_CURRENCYSUBUNIT
sdl.SDLK_KP_LEFTPAREN = SDL_KeyCode.SDLK_KP_LEFTPAREN
sdl.SDLK_KP_RIGHTPAREN = SDL_KeyCode.SDLK_KP_RIGHTPAREN
sdl.SDLK_KP_LEFTBRACE = SDL_KeyCode.SDLK_KP_LEFTBRACE
sdl.SDLK_KP_RIGHTBRACE = SDL_KeyCode.SDLK_KP_RIGHTBRACE
sdl.SDLK_KP_TAB = SDL_KeyCode.SDLK_KP_TAB
sdl.SDLK_KP_BACKSPACE = SDL_KeyCode.SDLK_KP_BACKSPACE
sdl.SDLK_KP_A = SDL_KeyCode.SDLK_KP_A
sdl.SDLK_KP_B = SDL_KeyCode.SDLK_KP_B
sdl.SDLK_KP_C = SDL_KeyCode.SDLK_KP_C
sdl.SDLK_KP_D = SDL_KeyCode.SDLK_KP_D
sdl.SDLK_KP_E = SDL_KeyCode.SDLK_KP_E
sdl.SDLK_KP_F = SDL_KeyCode.SDLK_KP_F
sdl.SDLK_KP_XOR = SDL_KeyCode.SDLK_KP_XOR
sdl.SDLK_KP_POWER = SDL_KeyCode.SDLK_KP_POWER
sdl.SDLK_KP_PERCENT = SDL_KeyCode.SDLK_KP_PERCENT
sdl.SDLK_KP_LESS = SDL_KeyCode.SDLK_KP_LESS
sdl.SDLK_KP_GREATER = SDL_KeyCode.SDLK_KP_GREATER
sdl.SDLK_KP_AMPERSAND = SDL_KeyCode.SDLK_KP_AMPERSAND
sdl.SDLK_KP_DBLAMPERSAND = SDL_KeyCode.SDLK_KP_DBLAMPERSAND
sdl.SDLK_KP_VERTICALBAR = SDL_KeyCode.SDLK_KP_VERTICALBAR
sdl.SDLK_KP_DBLVERTICALBAR = SDL_KeyCode.SDLK_KP_DBLVERTICALBAR
sdl.SDLK_KP_COLON = SDL_KeyCode.SDLK_KP_COLON
sdl.SDLK_KP_HASH = SDL_KeyCode.SDLK_KP_HASH
sdl.SDLK_KP_SPACE = SDL_KeyCode.SDLK_KP_SPACE
sdl.SDLK_KP_AT = SDL_KeyCode.SDLK_KP_AT
sdl.SDLK_KP_EXCLAM = SDL_KeyCode.SDLK_KP_EXCLAM
sdl.SDLK_KP_MEMSTORE = SDL_KeyCode.SDLK_KP_MEMSTORE
sdl.SDLK_KP_MEMRECALL = SDL_KeyCode.SDLK_KP_MEMRECALL
sdl.SDLK_KP_MEMCLEAR = SDL_KeyCode.SDLK_KP_MEMCLEAR
sdl.SDLK_KP_MEMADD = SDL_KeyCode.SDLK_KP_MEMADD
sdl.SDLK_KP_MEMSUBTRACT = SDL_KeyCode.SDLK_KP_MEMSUBTRACT
sdl.SDLK_KP_MEMMULTIPLY = SDL_KeyCode.SDLK_KP_MEMMULTIPLY
sdl.SDLK_KP_MEMDIVIDE = SDL_KeyCode.SDLK_KP_MEMDIVIDE
sdl.SDLK_KP_PLUSMINUS = SDL_KeyCode.SDLK_KP_PLUSMINUS
sdl.SDLK_KP_CLEAR = SDL_KeyCode.SDLK_KP_CLEAR
sdl.SDLK_KP_CLEARENTRY = SDL_KeyCode.SDLK_KP_CLEARENTRY
sdl.SDLK_KP_BINARY = SDL_KeyCode.SDLK_KP_BINARY
sdl.SDLK_KP_OCTAL = SDL_KeyCode.SDLK_KP_OCTAL
sdl.SDLK_KP_DECIMAL = SDL_KeyCode.SDLK_KP_DECIMAL
sdl.SDLK_KP_HEXADECIMAL = SDL_KeyCode.SDLK_KP_HEXADECIMAL
sdl.SDLK_LCTRL = SDL_KeyCode.SDLK_LCTRL
sdl.SDLK_LSHIFT = SDL_KeyCode.SDLK_LSHIFT
sdl.SDLK_LALT = SDL_KeyCode.SDLK_LALT
sdl.SDLK_LGUI = SDL_KeyCode.SDLK_LGUI
sdl.SDLK_RCTRL = SDL_KeyCode.SDLK_RCTRL
sdl.SDLK_RSHIFT = SDL_KeyCode.SDLK_RSHIFT
sdl.SDLK_RALT = SDL_KeyCode.SDLK_RALT
sdl.SDLK_RGUI = SDL_KeyCode.SDLK_RGUI
sdl.SDLK_MODE = SDL_KeyCode.SDLK_MODE
sdl.SDLK_AUDIONEXT = SDL_KeyCode.SDLK_AUDIONEXT
sdl.SDLK_AUDIOPREV = SDL_KeyCode.SDLK_AUDIOPREV
sdl.SDLK_AUDIOSTOP = SDL_KeyCode.SDLK_AUDIOSTOP
sdl.SDLK_AUDIOPLAY = SDL_KeyCode.SDLK_AUDIOPLAY
sdl.SDLK_AUDIOMUTE = SDL_KeyCode.SDLK_AUDIOMUTE
sdl.SDLK_MEDIASELECT = SDL_KeyCode.SDLK_MEDIASELECT
sdl.SDLK_WWW = SDL_KeyCode.SDLK_WWW
sdl.SDLK_MAIL = SDL_KeyCode.SDLK_MAIL
sdl.SDLK_CALCULATOR = SDL_KeyCode.SDLK_CALCULATOR
sdl.SDLK_COMPUTER = SDL_KeyCode.SDLK_COMPUTER
sdl.SDLK_AC_SEARCH = SDL_KeyCode.SDLK_AC_SEARCH
sdl.SDLK_AC_HOME = SDL_KeyCode.SDLK_AC_HOME
sdl.SDLK_AC_BACK = SDL_KeyCode.SDLK_AC_BACK
sdl.SDLK_AC_FORWARD = SDL_KeyCode.SDLK_AC_FORWARD
sdl.SDLK_AC_STOP = SDL_KeyCode.SDLK_AC_STOP
sdl.SDLK_AC_REFRESH = SDL_KeyCode.SDLK_AC_REFRESH
sdl.SDLK_AC_BOOKMARKS = SDL_KeyCode.SDLK_AC_BOOKMARKS
sdl.SDLK_BRIGHTNESSDOWN = SDL_KeyCode.SDLK_BRIGHTNESSDOWN
sdl.SDLK_BRIGHTNESSUP = SDL_KeyCode.SDLK_BRIGHTNESSUP
sdl.SDLK_DISPLAYSWITCH = SDL_KeyCode.SDLK_DISPLAYSWITCH
sdl.SDLK_KBDILLUMTOGGLE = SDL_KeyCode.SDLK_KBDILLUMTOGGLE
sdl.SDLK_KBDILLUMDOWN = SDL_KeyCode.SDLK_KBDILLUMDOWN
sdl.SDLK_KBDILLUMUP = SDL_KeyCode.SDLK_KBDILLUMUP
sdl.SDLK_EJECT = SDL_KeyCode.SDLK_EJECT
sdl.SDLK_SLEEP = SDL_KeyCode.SDLK_SLEEP
sdl.SDLK_APP1 = SDL_KeyCode.SDLK_APP1
sdl.SDLK_APP2 = SDL_KeyCode.SDLK_APP2
sdl.SDLK_AUDIOREWIND = SDL_KeyCode.SDLK_AUDIOREWIND
sdl.SDLK_AUDIOFASTFORWARD = SDL_KeyCode.SDLK_AUDIOFASTFORWARD
sdl.SDLK_SOFTLEFT = SDL_KeyCode.SDLK_SOFTLEFT
sdl.SDLK_SOFTRIGHT = SDL_KeyCode.SDLK_SOFTRIGHT
sdl.SDLK_CALL = SDL_KeyCode.SDLK_CALL
sdl.SDLK_ENDCALL = SDL_KeyCode.SDLK_ENDCALL

---@class SDL_KeyCode* : ffi.cdata*
---@field [integer] SDL_KeyCode

---@class SDL_KeyCode** : ffi.cdata*
---@field [integer] SDL_KeyCode*

---@enum SDL_Keymod
local SDL_Keymod = {
    KMOD_NONE = 0,
    KMOD_LSHIFT = 1,
    KMOD_RSHIFT = 2,
    KMOD_LCTRL = 64,
    KMOD_RCTRL = 128,
    KMOD_LALT = 256,
    KMOD_RALT = 512,
    KMOD_LGUI = 1024,
    KMOD_RGUI = 2048,
    KMOD_NUM = 4096,
    KMOD_CAPS = 8192,
    KMOD_MODE = 16384,
    KMOD_SCROLL = 32768,
    KMOD_CTRL = 192,
    KMOD_SHIFT = 3,
    KMOD_ALT = 768,
    KMOD_GUI = 3072,
    KMOD_RESERVED = 32768,
}

sdl.KMOD_NONE = SDL_Keymod.KMOD_NONE
sdl.KMOD_LSHIFT = SDL_Keymod.KMOD_LSHIFT
sdl.KMOD_RSHIFT = SDL_Keymod.KMOD_RSHIFT
sdl.KMOD_LCTRL = SDL_Keymod.KMOD_LCTRL
sdl.KMOD_RCTRL = SDL_Keymod.KMOD_RCTRL
sdl.KMOD_LALT = SDL_Keymod.KMOD_LALT
sdl.KMOD_RALT = SDL_Keymod.KMOD_RALT
sdl.KMOD_LGUI = SDL_Keymod.KMOD_LGUI
sdl.KMOD_RGUI = SDL_Keymod.KMOD_RGUI
sdl.KMOD_NUM = SDL_Keymod.KMOD_NUM
sdl.KMOD_CAPS = SDL_Keymod.KMOD_CAPS
sdl.KMOD_MODE = SDL_Keymod.KMOD_MODE
sdl.KMOD_SCROLL = SDL_Keymod.KMOD_SCROLL
sdl.KMOD_CTRL = SDL_Keymod.KMOD_CTRL
sdl.KMOD_SHIFT = SDL_Keymod.KMOD_SHIFT
sdl.KMOD_ALT = SDL_Keymod.KMOD_ALT
sdl.KMOD_GUI = SDL_Keymod.KMOD_GUI
sdl.KMOD_RESERVED = SDL_Keymod.KMOD_RESERVED

---@class SDL_Keymod* : ffi.cdata*
---@field [integer] SDL_Keymod

---@class SDL_Keymod** : ffi.cdata*
---@field [integer] SDL_Keymod*

---@class SDL_Keysym
---@field scancode SDL_Scancode
---@field sym SDL_Keycode
---@field mod Uint16
---@field unused Uint32

---@class SDL_Keysym* : ffi.cdata*
---@field [integer] SDL_Keysym

---@class SDL_Keysym** : ffi.cdata*
---@field [integer] SDL_Keysym*

---@return SDL_Window*?
function sdl.GetKeyboardFocus() end
sdl.SDL_GetKeyboardFocus = sdl.GetKeyboardFocus

---@param numkeys integer*?
---@return Uint8*?
function sdl.GetKeyboardState(numkeys) end
sdl.SDL_GetKeyboardState = sdl.GetKeyboardState

---@return nil
function sdl.ResetKeyboard() end
sdl.SDL_ResetKeyboard = sdl.ResetKeyboard

---@return SDL_Keymod
function sdl.GetModState() end
sdl.SDL_GetModState = sdl.GetModState

---@param modstate SDL_Keymod
---@return nil
function sdl.SetModState(modstate) end
sdl.SDL_SetModState = sdl.SetModState

---@param scancode SDL_Scancode
---@return SDL_Keycode
function sdl.GetKeyFromScancode(scancode) end
sdl.SDL_GetKeyFromScancode = sdl.GetKeyFromScancode

---@param key SDL_Keycode
---@return SDL_Scancode
function sdl.GetScancodeFromKey(key) end
sdl.SDL_GetScancodeFromKey = sdl.GetScancodeFromKey

---@param scancode SDL_Scancode
---@return string
function sdl.GetScancodeName(scancode) end
sdl.SDL_GetScancodeName = sdl.GetScancodeName

---@param name string
---@return SDL_Scancode
function sdl.GetScancodeFromName(name) end
sdl.SDL_GetScancodeFromName = sdl.GetScancodeFromName

---@param key SDL_Keycode
---@return string
function sdl.GetKeyName(key) end
sdl.SDL_GetKeyName = sdl.GetKeyName

---@param name string
---@return SDL_Keycode
function sdl.GetKeyFromName(name) end
sdl.SDL_GetKeyFromName = sdl.GetKeyFromName

---@return nil
function sdl.StartTextInput() end
sdl.SDL_StartTextInput = sdl.StartTextInput

---@return SDL_bool
function sdl.IsTextInputActive() end
sdl.SDL_IsTextInputActive = sdl.IsTextInputActive

---@return nil
function sdl.StopTextInput() end
sdl.SDL_StopTextInput = sdl.StopTextInput

---@return nil
function sdl.ClearComposition() end
sdl.SDL_ClearComposition = sdl.ClearComposition

---@return SDL_bool
function sdl.IsTextInputShown() end
sdl.SDL_IsTextInputShown = sdl.IsTextInputShown

---@param rect SDL_Rect*?
---@return nil
function sdl.SetTextInputRect(rect) end
sdl.SDL_SetTextInputRect = sdl.SetTextInputRect

---@return SDL_bool
function sdl.HasScreenKeyboardSupport() end
sdl.SDL_HasScreenKeyboardSupport = sdl.HasScreenKeyboardSupport

---@param window SDL_Window*?
---@return SDL_bool
function sdl.IsScreenKeyboardShown(window) end
sdl.SDL_IsScreenKeyboardShown = sdl.IsScreenKeyboardShown

---@class SDL_Cursor

---@class SDL_Cursor* : ffi.cdata*
---@field [integer] SDL_Cursor

---@class SDL_Cursor** : ffi.cdata*
---@field [integer] SDL_Cursor*

---@enum SDL_SystemCursor
local SDL_SystemCursor = {
    SDL_SYSTEM_CURSOR_ARROW = 0,
    SDL_SYSTEM_CURSOR_IBEAM = 1,
    SDL_SYSTEM_CURSOR_WAIT = 2,
    SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
    SDL_SYSTEM_CURSOR_WAITARROW = 4,
    SDL_SYSTEM_CURSOR_SIZENWSE = 5,
    SDL_SYSTEM_CURSOR_SIZENESW = 6,
    SDL_SYSTEM_CURSOR_SIZEWE = 7,
    SDL_SYSTEM_CURSOR_SIZENS = 8,
    SDL_SYSTEM_CURSOR_SIZEALL = 9,
    SDL_SYSTEM_CURSOR_NO = 10,
    SDL_SYSTEM_CURSOR_HAND = 11,
    SDL_NUM_SYSTEM_CURSORS = 12,
}

sdl.SDL_SYSTEM_CURSOR_ARROW = SDL_SystemCursor.SDL_SYSTEM_CURSOR_ARROW
sdl.SDL_SYSTEM_CURSOR_IBEAM = SDL_SystemCursor.SDL_SYSTEM_CURSOR_IBEAM
sdl.SDL_SYSTEM_CURSOR_WAIT = SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAIT
sdl.SDL_SYSTEM_CURSOR_CROSSHAIR = SDL_SystemCursor.SDL_SYSTEM_CURSOR_CROSSHAIR
sdl.SDL_SYSTEM_CURSOR_WAITARROW = SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAITARROW
sdl.SDL_SYSTEM_CURSOR_SIZENWSE = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENWSE
sdl.SDL_SYSTEM_CURSOR_SIZENESW = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENESW
sdl.SDL_SYSTEM_CURSOR_SIZEWE = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEWE
sdl.SDL_SYSTEM_CURSOR_SIZENS = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENS
sdl.SDL_SYSTEM_CURSOR_SIZEALL = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEALL
sdl.SDL_SYSTEM_CURSOR_NO = SDL_SystemCursor.SDL_SYSTEM_CURSOR_NO
sdl.SDL_SYSTEM_CURSOR_HAND = SDL_SystemCursor.SDL_SYSTEM_CURSOR_HAND
sdl.SDL_NUM_SYSTEM_CURSORS = SDL_SystemCursor.SDL_NUM_SYSTEM_CURSORS

---@class SDL_SystemCursor* : ffi.cdata*
---@field [integer] SDL_SystemCursor

---@class SDL_SystemCursor** : ffi.cdata*
---@field [integer] SDL_SystemCursor*

---@enum SDL_MouseWheelDirection
local SDL_MouseWheelDirection = {
    SDL_MOUSEWHEEL_NORMAL = 0,
    SDL_MOUSEWHEEL_FLIPPED = 1,
}

sdl.SDL_MOUSEWHEEL_NORMAL = SDL_MouseWheelDirection.SDL_MOUSEWHEEL_NORMAL
sdl.SDL_MOUSEWHEEL_FLIPPED = SDL_MouseWheelDirection.SDL_MOUSEWHEEL_FLIPPED

---@class SDL_MouseWheelDirection* : ffi.cdata*
---@field [integer] SDL_MouseWheelDirection

---@class SDL_MouseWheelDirection** : ffi.cdata*
---@field [integer] SDL_MouseWheelDirection*

---@return SDL_Window*?
function sdl.GetMouseFocus() end
sdl.SDL_GetMouseFocus = sdl.GetMouseFocus

---@param x integer*?
---@param y integer*?
---@return Uint32
function sdl.GetMouseState(x, y) end
sdl.SDL_GetMouseState = sdl.GetMouseState

---@param x integer*?
---@param y integer*?
---@return Uint32
function sdl.GetGlobalMouseState(x, y) end
sdl.SDL_GetGlobalMouseState = sdl.GetGlobalMouseState

---@param x integer*?
---@param y integer*?
---@return Uint32
function sdl.GetRelativeMouseState(x, y) end
sdl.SDL_GetRelativeMouseState = sdl.GetRelativeMouseState

---@param window SDL_Window*?
---@param x integer
---@param y integer
---@return nil
function sdl.WarpMouseInWindow(window, x, y) end
sdl.SDL_WarpMouseInWindow = sdl.WarpMouseInWindow

---@param x integer
---@param y integer
---@return integer
function sdl.WarpMouseGlobal(x, y) end
sdl.SDL_WarpMouseGlobal = sdl.WarpMouseGlobal

---@param enabled SDL_bool
---@return integer
function sdl.SetRelativeMouseMode(enabled) end
sdl.SDL_SetRelativeMouseMode = sdl.SetRelativeMouseMode

---@param enabled SDL_bool
---@return integer
function sdl.CaptureMouse(enabled) end
sdl.SDL_CaptureMouse = sdl.CaptureMouse

---@return SDL_bool
function sdl.GetRelativeMouseMode() end
sdl.SDL_GetRelativeMouseMode = sdl.GetRelativeMouseMode

---@param data Uint8*?
---@param mask Uint8*?
---@param w integer
---@param h integer
---@param hot_x integer
---@param hot_y integer
---@return SDL_Cursor*?
function sdl.CreateCursor(data, mask, w, h, hot_x, hot_y) end
sdl.SDL_CreateCursor = sdl.CreateCursor

---@param surface SDL_Surface*?
---@param hot_x integer
---@param hot_y integer
---@return SDL_Cursor*?
function sdl.CreateColorCursor(surface, hot_x, hot_y) end
sdl.SDL_CreateColorCursor = sdl.CreateColorCursor

---@param id SDL_SystemCursor
---@return SDL_Cursor*?
function sdl.CreateSystemCursor(id) end
sdl.SDL_CreateSystemCursor = sdl.CreateSystemCursor

---@param cursor SDL_Cursor*?
---@return nil
function sdl.SetCursor(cursor) end
sdl.SDL_SetCursor = sdl.SetCursor

---@return SDL_Cursor*?
function sdl.GetCursor() end
sdl.SDL_GetCursor = sdl.GetCursor

---@return SDL_Cursor*?
function sdl.GetDefaultCursor() end
sdl.SDL_GetDefaultCursor = sdl.GetDefaultCursor

---@param cursor SDL_Cursor*?
---@return nil
function sdl.FreeCursor(cursor) end
sdl.SDL_FreeCursor = sdl.FreeCursor

---@param toggle integer
---@return integer
function sdl.ShowCursor(toggle) end
sdl.SDL_ShowCursor = sdl.ShowCursor

---@class SDL_GUID
---@field data Uint8[]

---@class SDL_GUID* : ffi.cdata*
---@field [integer] SDL_GUID

---@class SDL_GUID** : ffi.cdata*
---@field [integer] SDL_GUID*

---@param guid SDL_GUID
---@param pszGUID string
---@param cbGUID integer
---@return nil
function sdl.GUIDToString(guid, pszGUID, cbGUID) end
sdl.SDL_GUIDToString = sdl.GUIDToString

---@param pchGUID string
---@return SDL_GUID
function sdl.GUIDFromString(pchGUID) end
sdl.SDL_GUIDFromString = sdl.GUIDFromString

---@class _SDL_Joystick

---@class _SDL_Joystick* : ffi.cdata*
---@field [integer] _SDL_Joystick

---@class _SDL_Joystick** : ffi.cdata*
---@field [integer] _SDL_Joystick*

---@alias SDL_Joystick _SDL_Joystick

---@class SDL_Joystick* : ffi.cdata*
---@field [integer] SDL_Joystick

---@class SDL_Joystick** : ffi.cdata*
---@field [integer] SDL_Joystick*

---@alias SDL_JoystickGUID SDL_GUID

---@class SDL_JoystickGUID* : ffi.cdata*
---@field [integer] SDL_JoystickGUID

---@class SDL_JoystickGUID** : ffi.cdata*
---@field [integer] SDL_JoystickGUID*

---@alias SDL_JoystickID Sint32

---@class SDL_JoystickID* : ffi.cdata*
---@field [integer] SDL_JoystickID

---@class SDL_JoystickID** : ffi.cdata*
---@field [integer] SDL_JoystickID*

---@enum SDL_JoystickType
local SDL_JoystickType = {
    SDL_JOYSTICK_TYPE_UNKNOWN = 0,
    SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1,
    SDL_JOYSTICK_TYPE_WHEEL = 2,
    SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
    SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
    SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
    SDL_JOYSTICK_TYPE_GUITAR = 6,
    SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
    SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
    SDL_JOYSTICK_TYPE_THROTTLE = 9,
}

sdl.SDL_JOYSTICK_TYPE_UNKNOWN = SDL_JoystickType.SDL_JOYSTICK_TYPE_UNKNOWN
sdl.SDL_JOYSTICK_TYPE_GAMECONTROLLER = SDL_JoystickType.SDL_JOYSTICK_TYPE_GAMECONTROLLER
sdl.SDL_JOYSTICK_TYPE_WHEEL = SDL_JoystickType.SDL_JOYSTICK_TYPE_WHEEL
sdl.SDL_JOYSTICK_TYPE_ARCADE_STICK = SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_STICK
sdl.SDL_JOYSTICK_TYPE_FLIGHT_STICK = SDL_JoystickType.SDL_JOYSTICK_TYPE_FLIGHT_STICK
sdl.SDL_JOYSTICK_TYPE_DANCE_PAD = SDL_JoystickType.SDL_JOYSTICK_TYPE_DANCE_PAD
sdl.SDL_JOYSTICK_TYPE_GUITAR = SDL_JoystickType.SDL_JOYSTICK_TYPE_GUITAR
sdl.SDL_JOYSTICK_TYPE_DRUM_KIT = SDL_JoystickType.SDL_JOYSTICK_TYPE_DRUM_KIT
sdl.SDL_JOYSTICK_TYPE_ARCADE_PAD = SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_PAD
sdl.SDL_JOYSTICK_TYPE_THROTTLE = SDL_JoystickType.SDL_JOYSTICK_TYPE_THROTTLE

---@class SDL_JoystickType* : ffi.cdata*
---@field [integer] SDL_JoystickType

---@class SDL_JoystickType** : ffi.cdata*
---@field [integer] SDL_JoystickType*

---@enum SDL_JoystickPowerLevel
local SDL_JoystickPowerLevel = {
    SDL_JOYSTICK_POWER_UNKNOWN = -1,
    SDL_JOYSTICK_POWER_EMPTY = 0,
    SDL_JOYSTICK_POWER_LOW = 1,
    SDL_JOYSTICK_POWER_MEDIUM = 2,
    SDL_JOYSTICK_POWER_FULL = 3,
    SDL_JOYSTICK_POWER_WIRED = 4,
    SDL_JOYSTICK_POWER_MAX = 5,
}

sdl.SDL_JOYSTICK_POWER_UNKNOWN = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_UNKNOWN
sdl.SDL_JOYSTICK_POWER_EMPTY = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_EMPTY
sdl.SDL_JOYSTICK_POWER_LOW = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_LOW
sdl.SDL_JOYSTICK_POWER_MEDIUM = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MEDIUM
sdl.SDL_JOYSTICK_POWER_FULL = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_FULL
sdl.SDL_JOYSTICK_POWER_WIRED = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_WIRED
sdl.SDL_JOYSTICK_POWER_MAX = SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MAX

---@class SDL_JoystickPowerLevel* : ffi.cdata*
---@field [integer] SDL_JoystickPowerLevel

---@class SDL_JoystickPowerLevel** : ffi.cdata*
---@field [integer] SDL_JoystickPowerLevel*

---@return nil
function sdl.LockJoysticks() end
sdl.SDL_LockJoysticks = sdl.LockJoysticks

---@return nil
function sdl.UnlockJoysticks() end
sdl.SDL_UnlockJoysticks = sdl.UnlockJoysticks

---@return integer
function sdl.NumJoysticks() end
sdl.SDL_NumJoysticks = sdl.NumJoysticks

---@param device_index integer
---@return string
function sdl.JoystickNameForIndex(device_index) end
sdl.SDL_JoystickNameForIndex = sdl.JoystickNameForIndex

---@param device_index integer
---@return string
function sdl.JoystickPathForIndex(device_index) end
sdl.SDL_JoystickPathForIndex = sdl.JoystickPathForIndex

---@param device_index integer
---@return integer
function sdl.JoystickGetDevicePlayerIndex(device_index) end
sdl.SDL_JoystickGetDevicePlayerIndex = sdl.JoystickGetDevicePlayerIndex

---@param device_index integer
---@return SDL_JoystickGUID
function sdl.JoystickGetDeviceGUID(device_index) end
sdl.SDL_JoystickGetDeviceGUID = sdl.JoystickGetDeviceGUID

---@param device_index integer
---@return Uint16
function sdl.JoystickGetDeviceVendor(device_index) end
sdl.SDL_JoystickGetDeviceVendor = sdl.JoystickGetDeviceVendor

---@param device_index integer
---@return Uint16
function sdl.JoystickGetDeviceProduct(device_index) end
sdl.SDL_JoystickGetDeviceProduct = sdl.JoystickGetDeviceProduct

---@param device_index integer
---@return Uint16
function sdl.JoystickGetDeviceProductVersion(device_index) end
sdl.SDL_JoystickGetDeviceProductVersion = sdl.JoystickGetDeviceProductVersion

---@param device_index integer
---@return SDL_JoystickType
function sdl.JoystickGetDeviceType(device_index) end
sdl.SDL_JoystickGetDeviceType = sdl.JoystickGetDeviceType

---@param device_index integer
---@return SDL_JoystickID
function sdl.JoystickGetDeviceInstanceID(device_index) end
sdl.SDL_JoystickGetDeviceInstanceID = sdl.JoystickGetDeviceInstanceID

---@param device_index integer
---@return SDL_Joystick*?
function sdl.JoystickOpen(device_index) end
sdl.SDL_JoystickOpen = sdl.JoystickOpen

---@param instance_id SDL_JoystickID
---@return SDL_Joystick*?
function sdl.JoystickFromInstanceID(instance_id) end
sdl.SDL_JoystickFromInstanceID = sdl.JoystickFromInstanceID

---@param player_index integer
---@return SDL_Joystick*?
function sdl.JoystickFromPlayerIndex(player_index) end
sdl.SDL_JoystickFromPlayerIndex = sdl.JoystickFromPlayerIndex

---@param type SDL_JoystickType
---@param naxes integer
---@param nbuttons integer
---@param nhats integer
---@return integer
function sdl.JoystickAttachVirtual(type, naxes, nbuttons, nhats) end
sdl.SDL_JoystickAttachVirtual = sdl.JoystickAttachVirtual

---@class SDL_VirtualJoystickDesc
---@field version Uint16
---@field type Uint16
---@field naxes Uint16
---@field nbuttons Uint16
---@field nhats Uint16
---@field vendor_id Uint16
---@field product_id Uint16
---@field padding Uint16
---@field button_mask Uint32
---@field axis_mask Uint32
---@field name string
---@field userdata ffi.cdata*
---@field Update fun(arg_0: ffi.cdata*): nil
---@field SetPlayerIndex fun(arg_0: ffi.cdata*, arg_1: integer): nil
---@field Rumble fun(arg_0: ffi.cdata*, arg_1: Uint16, arg_2: Uint16): integer
---@field RumbleTriggers fun(arg_0: ffi.cdata*, arg_1: Uint16, arg_2: Uint16): integer
---@field SetLED fun(arg_0: ffi.cdata*, arg_1: Uint8, arg_2: Uint8, arg_3: Uint8): integer
---@field SendEffect fun(arg_0: ffi.cdata*, arg_1: ffi.cdata*, arg_2: integer): integer

---@class SDL_VirtualJoystickDesc* : ffi.cdata*
---@field [integer] SDL_VirtualJoystickDesc

---@class SDL_VirtualJoystickDesc** : ffi.cdata*
---@field [integer] SDL_VirtualJoystickDesc*

---@param desc SDL_VirtualJoystickDesc*?
---@return integer
function sdl.JoystickAttachVirtualEx(desc) end
sdl.SDL_JoystickAttachVirtualEx = sdl.JoystickAttachVirtualEx

---@param device_index integer
---@return integer
function sdl.JoystickDetachVirtual(device_index) end
sdl.SDL_JoystickDetachVirtual = sdl.JoystickDetachVirtual

---@param device_index integer
---@return SDL_bool
function sdl.JoystickIsVirtual(device_index) end
sdl.SDL_JoystickIsVirtual = sdl.JoystickIsVirtual

---@param joystick SDL_Joystick*?
---@param axis integer
---@param value Sint16
---@return integer
function sdl.JoystickSetVirtualAxis(joystick, axis, value) end
sdl.SDL_JoystickSetVirtualAxis = sdl.JoystickSetVirtualAxis

---@param joystick SDL_Joystick*?
---@param button integer
---@param value Uint8
---@return integer
function sdl.JoystickSetVirtualButton(joystick, button, value) end
sdl.SDL_JoystickSetVirtualButton = sdl.JoystickSetVirtualButton

---@param joystick SDL_Joystick*?
---@param hat integer
---@param value Uint8
---@return integer
function sdl.JoystickSetVirtualHat(joystick, hat, value) end
sdl.SDL_JoystickSetVirtualHat = sdl.JoystickSetVirtualHat

---@param joystick SDL_Joystick*?
---@return string
function sdl.JoystickName(joystick) end
sdl.SDL_JoystickName = sdl.JoystickName

---@param joystick SDL_Joystick*?
---@return string
function sdl.JoystickPath(joystick) end
sdl.SDL_JoystickPath = sdl.JoystickPath

---@param joystick SDL_Joystick*?
---@return integer
function sdl.JoystickGetPlayerIndex(joystick) end
sdl.SDL_JoystickGetPlayerIndex = sdl.JoystickGetPlayerIndex

---@param joystick SDL_Joystick*?
---@param player_index integer
---@return nil
function sdl.JoystickSetPlayerIndex(joystick, player_index) end
sdl.SDL_JoystickSetPlayerIndex = sdl.JoystickSetPlayerIndex

---@param joystick SDL_Joystick*?
---@return SDL_JoystickGUID
function sdl.JoystickGetGUID(joystick) end
sdl.SDL_JoystickGetGUID = sdl.JoystickGetGUID

---@param joystick SDL_Joystick*?
---@return Uint16
function sdl.JoystickGetVendor(joystick) end
sdl.SDL_JoystickGetVendor = sdl.JoystickGetVendor

---@param joystick SDL_Joystick*?
---@return Uint16
function sdl.JoystickGetProduct(joystick) end
sdl.SDL_JoystickGetProduct = sdl.JoystickGetProduct

---@param joystick SDL_Joystick*?
---@return Uint16
function sdl.JoystickGetProductVersion(joystick) end
sdl.SDL_JoystickGetProductVersion = sdl.JoystickGetProductVersion

---@param joystick SDL_Joystick*?
---@return Uint16
function sdl.JoystickGetFirmwareVersion(joystick) end
sdl.SDL_JoystickGetFirmwareVersion = sdl.JoystickGetFirmwareVersion

---@param joystick SDL_Joystick*?
---@return string
function sdl.JoystickGetSerial(joystick) end
sdl.SDL_JoystickGetSerial = sdl.JoystickGetSerial

---@param joystick SDL_Joystick*?
---@return SDL_JoystickType
function sdl.JoystickGetType(joystick) end
sdl.SDL_JoystickGetType = sdl.JoystickGetType

---@param guid SDL_JoystickGUID
---@param pszGUID string
---@param cbGUID integer
---@return nil
function sdl.JoystickGetGUIDString(guid, pszGUID, cbGUID) end
sdl.SDL_JoystickGetGUIDString = sdl.JoystickGetGUIDString

---@param pchGUID string
---@return SDL_JoystickGUID
function sdl.JoystickGetGUIDFromString(pchGUID) end
sdl.SDL_JoystickGetGUIDFromString = sdl.JoystickGetGUIDFromString

---@param guid SDL_JoystickGUID
---@param vendor Uint16*?
---@param product Uint16*?
---@param version Uint16*?
---@param crc16 Uint16*?
---@return nil
function sdl.GetJoystickGUIDInfo(guid, vendor, product, version, crc16) end
sdl.SDL_GetJoystickGUIDInfo = sdl.GetJoystickGUIDInfo

---@param joystick SDL_Joystick*?
---@return SDL_bool
function sdl.JoystickGetAttached(joystick) end
sdl.SDL_JoystickGetAttached = sdl.JoystickGetAttached

---@param joystick SDL_Joystick*?
---@return SDL_JoystickID
function sdl.JoystickInstanceID(joystick) end
sdl.SDL_JoystickInstanceID = sdl.JoystickInstanceID

---@param joystick SDL_Joystick*?
---@return integer
function sdl.JoystickNumAxes(joystick) end
sdl.SDL_JoystickNumAxes = sdl.JoystickNumAxes

---@param joystick SDL_Joystick*?
---@return integer
function sdl.JoystickNumBalls(joystick) end
sdl.SDL_JoystickNumBalls = sdl.JoystickNumBalls

---@param joystick SDL_Joystick*?
---@return integer
function sdl.JoystickNumHats(joystick) end
sdl.SDL_JoystickNumHats = sdl.JoystickNumHats

---@param joystick SDL_Joystick*?
---@return integer
function sdl.JoystickNumButtons(joystick) end
sdl.SDL_JoystickNumButtons = sdl.JoystickNumButtons

---@return nil
function sdl.JoystickUpdate() end
sdl.SDL_JoystickUpdate = sdl.JoystickUpdate

---@param state integer
---@return integer
function sdl.JoystickEventState(state) end
sdl.SDL_JoystickEventState = sdl.JoystickEventState

---@param joystick SDL_Joystick*?
---@param axis integer
---@return Sint16
function sdl.JoystickGetAxis(joystick, axis) end
sdl.SDL_JoystickGetAxis = sdl.JoystickGetAxis

---@param joystick SDL_Joystick*?
---@param axis integer
---@param state Sint16*?
---@return SDL_bool
function sdl.JoystickGetAxisInitialState(joystick, axis, state) end
sdl.SDL_JoystickGetAxisInitialState = sdl.JoystickGetAxisInitialState

---@param joystick SDL_Joystick*?
---@param hat integer
---@return Uint8
function sdl.JoystickGetHat(joystick, hat) end
sdl.SDL_JoystickGetHat = sdl.JoystickGetHat

---@param joystick SDL_Joystick*?
---@param ball integer
---@param dx integer*?
---@param dy integer*?
---@return integer
function sdl.JoystickGetBall(joystick, ball, dx, dy) end
sdl.SDL_JoystickGetBall = sdl.JoystickGetBall

---@param joystick SDL_Joystick*?
---@param button integer
---@return Uint8
function sdl.JoystickGetButton(joystick, button) end
sdl.SDL_JoystickGetButton = sdl.JoystickGetButton

---@param joystick SDL_Joystick*?
---@param low_frequency_rumble Uint16
---@param high_frequency_rumble Uint16
---@param duration_ms Uint32
---@return integer
function sdl.JoystickRumble(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms) end
sdl.SDL_JoystickRumble = sdl.JoystickRumble

---@param joystick SDL_Joystick*?
---@param left_rumble Uint16
---@param right_rumble Uint16
---@param duration_ms Uint32
---@return integer
function sdl.JoystickRumbleTriggers(joystick, left_rumble, right_rumble, duration_ms) end
sdl.SDL_JoystickRumbleTriggers = sdl.JoystickRumbleTriggers

---@param joystick SDL_Joystick*?
---@return SDL_bool
function sdl.JoystickHasLED(joystick) end
sdl.SDL_JoystickHasLED = sdl.JoystickHasLED

---@param joystick SDL_Joystick*?
---@return SDL_bool
function sdl.JoystickHasRumble(joystick) end
sdl.SDL_JoystickHasRumble = sdl.JoystickHasRumble

---@param joystick SDL_Joystick*?
---@return SDL_bool
function sdl.JoystickHasRumbleTriggers(joystick) end
sdl.SDL_JoystickHasRumbleTriggers = sdl.JoystickHasRumbleTriggers

---@param joystick SDL_Joystick*?
---@param red Uint8
---@param green Uint8
---@param blue Uint8
---@return integer
function sdl.JoystickSetLED(joystick, red, green, blue) end
sdl.SDL_JoystickSetLED = sdl.JoystickSetLED

---@param joystick SDL_Joystick*?
---@param data ffi.cdata*
---@param size integer
---@return integer
function sdl.JoystickSendEffect(joystick, data, size) end
sdl.SDL_JoystickSendEffect = sdl.JoystickSendEffect

---@param joystick SDL_Joystick*?
---@return nil
function sdl.JoystickClose(joystick) end
sdl.SDL_JoystickClose = sdl.JoystickClose

---@param joystick SDL_Joystick*?
---@return SDL_JoystickPowerLevel
function sdl.JoystickCurrentPowerLevel(joystick) end
sdl.SDL_JoystickCurrentPowerLevel = sdl.JoystickCurrentPowerLevel

---@class _SDL_Sensor

---@class _SDL_Sensor* : ffi.cdata*
---@field [integer] _SDL_Sensor

---@class _SDL_Sensor** : ffi.cdata*
---@field [integer] _SDL_Sensor*

---@alias SDL_Sensor _SDL_Sensor

---@class SDL_Sensor* : ffi.cdata*
---@field [integer] SDL_Sensor

---@class SDL_Sensor** : ffi.cdata*
---@field [integer] SDL_Sensor*

---@alias SDL_SensorID Sint32

---@class SDL_SensorID* : ffi.cdata*
---@field [integer] SDL_SensorID

---@class SDL_SensorID** : ffi.cdata*
---@field [integer] SDL_SensorID*

---@enum SDL_SensorType
local SDL_SensorType = {
    SDL_SENSOR_INVALID = -1,
    SDL_SENSOR_UNKNOWN = 0,
    SDL_SENSOR_ACCEL = 1,
    SDL_SENSOR_GYRO = 2,
    SDL_SENSOR_ACCEL_L = 3,
    SDL_SENSOR_GYRO_L = 4,
    SDL_SENSOR_ACCEL_R = 5,
    SDL_SENSOR_GYRO_R = 6,
}

sdl.SDL_SENSOR_INVALID = SDL_SensorType.SDL_SENSOR_INVALID
sdl.SDL_SENSOR_UNKNOWN = SDL_SensorType.SDL_SENSOR_UNKNOWN
sdl.SDL_SENSOR_ACCEL = SDL_SensorType.SDL_SENSOR_ACCEL
sdl.SDL_SENSOR_GYRO = SDL_SensorType.SDL_SENSOR_GYRO
sdl.SDL_SENSOR_ACCEL_L = SDL_SensorType.SDL_SENSOR_ACCEL_L
sdl.SDL_SENSOR_GYRO_L = SDL_SensorType.SDL_SENSOR_GYRO_L
sdl.SDL_SENSOR_ACCEL_R = SDL_SensorType.SDL_SENSOR_ACCEL_R
sdl.SDL_SENSOR_GYRO_R = SDL_SensorType.SDL_SENSOR_GYRO_R

---@class SDL_SensorType* : ffi.cdata*
---@field [integer] SDL_SensorType

---@class SDL_SensorType** : ffi.cdata*
---@field [integer] SDL_SensorType*

---@return nil
function sdl.LockSensors() end
sdl.SDL_LockSensors = sdl.LockSensors

---@return nil
function sdl.UnlockSensors() end
sdl.SDL_UnlockSensors = sdl.UnlockSensors

---@return integer
function sdl.NumSensors() end
sdl.SDL_NumSensors = sdl.NumSensors

---@param device_index integer
---@return string
function sdl.SensorGetDeviceName(device_index) end
sdl.SDL_SensorGetDeviceName = sdl.SensorGetDeviceName

---@param device_index integer
---@return SDL_SensorType
function sdl.SensorGetDeviceType(device_index) end
sdl.SDL_SensorGetDeviceType = sdl.SensorGetDeviceType

---@param device_index integer
---@return integer
function sdl.SensorGetDeviceNonPortableType(device_index) end
sdl.SDL_SensorGetDeviceNonPortableType = sdl.SensorGetDeviceNonPortableType

---@param device_index integer
---@return SDL_SensorID
function sdl.SensorGetDeviceInstanceID(device_index) end
sdl.SDL_SensorGetDeviceInstanceID = sdl.SensorGetDeviceInstanceID

---@param device_index integer
---@return SDL_Sensor*?
function sdl.SensorOpen(device_index) end
sdl.SDL_SensorOpen = sdl.SensorOpen

---@param instance_id SDL_SensorID
---@return SDL_Sensor*?
function sdl.SensorFromInstanceID(instance_id) end
sdl.SDL_SensorFromInstanceID = sdl.SensorFromInstanceID

---@param sensor SDL_Sensor*?
---@return string
function sdl.SensorGetName(sensor) end
sdl.SDL_SensorGetName = sdl.SensorGetName

---@param sensor SDL_Sensor*?
---@return SDL_SensorType
function sdl.SensorGetType(sensor) end
sdl.SDL_SensorGetType = sdl.SensorGetType

---@param sensor SDL_Sensor*?
---@return integer
function sdl.SensorGetNonPortableType(sensor) end
sdl.SDL_SensorGetNonPortableType = sdl.SensorGetNonPortableType

---@param sensor SDL_Sensor*?
---@return SDL_SensorID
function sdl.SensorGetInstanceID(sensor) end
sdl.SDL_SensorGetInstanceID = sdl.SensorGetInstanceID

---@param sensor SDL_Sensor*?
---@param data number*?
---@param num_values integer
---@return integer
function sdl.SensorGetData(sensor, data, num_values) end
sdl.SDL_SensorGetData = sdl.SensorGetData

---@param sensor SDL_Sensor*?
---@param timestamp Uint64*?
---@param data number*?
---@param num_values integer
---@return integer
function sdl.SensorGetDataWithTimestamp(sensor, timestamp, data, num_values) end
sdl.SDL_SensorGetDataWithTimestamp = sdl.SensorGetDataWithTimestamp

---@param sensor SDL_Sensor*?
---@return nil
function sdl.SensorClose(sensor) end
sdl.SDL_SensorClose = sdl.SensorClose

---@return nil
function sdl.SensorUpdate() end
sdl.SDL_SensorUpdate = sdl.SensorUpdate

---@class _SDL_GameController

---@class _SDL_GameController* : ffi.cdata*
---@field [integer] _SDL_GameController

---@class _SDL_GameController** : ffi.cdata*
---@field [integer] _SDL_GameController*

---@alias SDL_GameController _SDL_GameController

---@class SDL_GameController* : ffi.cdata*
---@field [integer] SDL_GameController

---@class SDL_GameController** : ffi.cdata*
---@field [integer] SDL_GameController*

---@enum SDL_GameControllerType
local SDL_GameControllerType = {
    SDL_CONTROLLER_TYPE_UNKNOWN = 0,
    SDL_CONTROLLER_TYPE_XBOX360 = 1,
    SDL_CONTROLLER_TYPE_XBOXONE = 2,
    SDL_CONTROLLER_TYPE_PS3 = 3,
    SDL_CONTROLLER_TYPE_PS4 = 4,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5,
    SDL_CONTROLLER_TYPE_VIRTUAL = 6,
    SDL_CONTROLLER_TYPE_PS5 = 7,
    SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8,
    SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9,
    SDL_CONTROLLER_TYPE_NVIDIA_SHIELD = 10,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 11,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 12,
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 13,
    SDL_CONTROLLER_TYPE_MAX = 14,
}

sdl.SDL_CONTROLLER_TYPE_UNKNOWN = SDL_GameControllerType.SDL_CONTROLLER_TYPE_UNKNOWN
sdl.SDL_CONTROLLER_TYPE_XBOX360 = SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOX360
sdl.SDL_CONTROLLER_TYPE_XBOXONE = SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOXONE
sdl.SDL_CONTROLLER_TYPE_PS3 = SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS3
sdl.SDL_CONTROLLER_TYPE_PS4 = SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS4
sdl.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO
sdl.SDL_CONTROLLER_TYPE_VIRTUAL = SDL_GameControllerType.SDL_CONTROLLER_TYPE_VIRTUAL
sdl.SDL_CONTROLLER_TYPE_PS5 = SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS5
sdl.SDL_CONTROLLER_TYPE_AMAZON_LUNA = SDL_GameControllerType.SDL_CONTROLLER_TYPE_AMAZON_LUNA
sdl.SDL_CONTROLLER_TYPE_GOOGLE_STADIA = SDL_GameControllerType.SDL_CONTROLLER_TYPE_GOOGLE_STADIA
sdl.SDL_CONTROLLER_TYPE_NVIDIA_SHIELD = SDL_GameControllerType.SDL_CONTROLLER_TYPE_NVIDIA_SHIELD
sdl.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT
sdl.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT
sdl.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR
sdl.SDL_CONTROLLER_TYPE_MAX = SDL_GameControllerType.SDL_CONTROLLER_TYPE_MAX

---@class SDL_GameControllerType* : ffi.cdata*
---@field [integer] SDL_GameControllerType

---@class SDL_GameControllerType** : ffi.cdata*
---@field [integer] SDL_GameControllerType*

---@enum SDL_GameControllerBindType
local SDL_GameControllerBindType = {
    SDL_CONTROLLER_BINDTYPE_NONE = 0,
    SDL_CONTROLLER_BINDTYPE_BUTTON = 1,
    SDL_CONTROLLER_BINDTYPE_AXIS = 2,
    SDL_CONTROLLER_BINDTYPE_HAT = 3,
}

sdl.SDL_CONTROLLER_BINDTYPE_NONE = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_NONE
sdl.SDL_CONTROLLER_BINDTYPE_BUTTON = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_BUTTON
sdl.SDL_CONTROLLER_BINDTYPE_AXIS = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_AXIS
sdl.SDL_CONTROLLER_BINDTYPE_HAT = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_HAT

---@class SDL_GameControllerBindType* : ffi.cdata*
---@field [integer] SDL_GameControllerBindType

---@class SDL_GameControllerBindType** : ffi.cdata*
---@field [integer] SDL_GameControllerBindType*

---@class SDL_GameControllerButtonBind
---@field bindType SDL_GameControllerBindType
---@field value ffi.cdata*

---@class SDL_GameControllerButtonBind* : ffi.cdata*
---@field [integer] SDL_GameControllerButtonBind

---@class SDL_GameControllerButtonBind** : ffi.cdata*
---@field [integer] SDL_GameControllerButtonBind*

---@param rw SDL_RWops*?
---@param freerw integer
---@return integer
function sdl.GameControllerAddMappingsFromRW(rw, freerw) end
sdl.SDL_GameControllerAddMappingsFromRW = sdl.GameControllerAddMappingsFromRW

---@param mappingString string
---@return integer
function sdl.GameControllerAddMapping(mappingString) end
sdl.SDL_GameControllerAddMapping = sdl.GameControllerAddMapping

---@return integer
function sdl.GameControllerNumMappings() end
sdl.SDL_GameControllerNumMappings = sdl.GameControllerNumMappings

---@param mapping_index integer
---@return string
function sdl.GameControllerMappingForIndex(mapping_index) end
sdl.SDL_GameControllerMappingForIndex = sdl.GameControllerMappingForIndex

---@param guid SDL_JoystickGUID
---@return string
function sdl.GameControllerMappingForGUID(guid) end
sdl.SDL_GameControllerMappingForGUID = sdl.GameControllerMappingForGUID

---@param gamecontroller SDL_GameController*?
---@return string
function sdl.GameControllerMapping(gamecontroller) end
sdl.SDL_GameControllerMapping = sdl.GameControllerMapping

---@param joystick_index integer
---@return SDL_bool
function sdl.IsGameController(joystick_index) end
sdl.SDL_IsGameController = sdl.IsGameController

---@param joystick_index integer
---@return string
function sdl.GameControllerNameForIndex(joystick_index) end
sdl.SDL_GameControllerNameForIndex = sdl.GameControllerNameForIndex

---@param joystick_index integer
---@return string
function sdl.GameControllerPathForIndex(joystick_index) end
sdl.SDL_GameControllerPathForIndex = sdl.GameControllerPathForIndex

---@param joystick_index integer
---@return SDL_GameControllerType
function sdl.GameControllerTypeForIndex(joystick_index) end
sdl.SDL_GameControllerTypeForIndex = sdl.GameControllerTypeForIndex

---@param joystick_index integer
---@return string
function sdl.GameControllerMappingForDeviceIndex(joystick_index) end
sdl.SDL_GameControllerMappingForDeviceIndex = sdl.GameControllerMappingForDeviceIndex

---@param joystick_index integer
---@return SDL_GameController*?
function sdl.GameControllerOpen(joystick_index) end
sdl.SDL_GameControllerOpen = sdl.GameControllerOpen

---@param joyid SDL_JoystickID
---@return SDL_GameController*?
function sdl.GameControllerFromInstanceID(joyid) end
sdl.SDL_GameControllerFromInstanceID = sdl.GameControllerFromInstanceID

---@param player_index integer
---@return SDL_GameController*?
function sdl.GameControllerFromPlayerIndex(player_index) end
sdl.SDL_GameControllerFromPlayerIndex = sdl.GameControllerFromPlayerIndex

---@param gamecontroller SDL_GameController*?
---@return string
function sdl.GameControllerName(gamecontroller) end
sdl.SDL_GameControllerName = sdl.GameControllerName

---@param gamecontroller SDL_GameController*?
---@return string
function sdl.GameControllerPath(gamecontroller) end
sdl.SDL_GameControllerPath = sdl.GameControllerPath

---@param gamecontroller SDL_GameController*?
---@return SDL_GameControllerType
function sdl.GameControllerGetType(gamecontroller) end
sdl.SDL_GameControllerGetType = sdl.GameControllerGetType

---@param gamecontroller SDL_GameController*?
---@return integer
function sdl.GameControllerGetPlayerIndex(gamecontroller) end
sdl.SDL_GameControllerGetPlayerIndex = sdl.GameControllerGetPlayerIndex

---@param gamecontroller SDL_GameController*?
---@param player_index integer
---@return nil
function sdl.GameControllerSetPlayerIndex(gamecontroller, player_index) end
sdl.SDL_GameControllerSetPlayerIndex = sdl.GameControllerSetPlayerIndex

---@param gamecontroller SDL_GameController*?
---@return Uint16
function sdl.GameControllerGetVendor(gamecontroller) end
sdl.SDL_GameControllerGetVendor = sdl.GameControllerGetVendor

---@param gamecontroller SDL_GameController*?
---@return Uint16
function sdl.GameControllerGetProduct(gamecontroller) end
sdl.SDL_GameControllerGetProduct = sdl.GameControllerGetProduct

---@param gamecontroller SDL_GameController*?
---@return Uint16
function sdl.GameControllerGetProductVersion(gamecontroller) end
sdl.SDL_GameControllerGetProductVersion = sdl.GameControllerGetProductVersion

---@param gamecontroller SDL_GameController*?
---@return Uint16
function sdl.GameControllerGetFirmwareVersion(gamecontroller) end
sdl.SDL_GameControllerGetFirmwareVersion = sdl.GameControllerGetFirmwareVersion

---@param gamecontroller SDL_GameController*?
---@return string
function sdl.GameControllerGetSerial(gamecontroller) end
sdl.SDL_GameControllerGetSerial = sdl.GameControllerGetSerial

---@param gamecontroller SDL_GameController*?
---@return Uint64
function sdl.GameControllerGetSteamHandle(gamecontroller) end
sdl.SDL_GameControllerGetSteamHandle = sdl.GameControllerGetSteamHandle

---@param gamecontroller SDL_GameController*?
---@return SDL_bool
function sdl.GameControllerGetAttached(gamecontroller) end
sdl.SDL_GameControllerGetAttached = sdl.GameControllerGetAttached

---@param gamecontroller SDL_GameController*?
---@return SDL_Joystick*?
function sdl.GameControllerGetJoystick(gamecontroller) end
sdl.SDL_GameControllerGetJoystick = sdl.GameControllerGetJoystick

---@param state integer
---@return integer
function sdl.GameControllerEventState(state) end
sdl.SDL_GameControllerEventState = sdl.GameControllerEventState

---@return nil
function sdl.GameControllerUpdate() end
sdl.SDL_GameControllerUpdate = sdl.GameControllerUpdate

---@enum SDL_GameControllerAxis
local SDL_GameControllerAxis = {
    SDL_CONTROLLER_AXIS_INVALID = -1,
    SDL_CONTROLLER_AXIS_LEFTX = 0,
    SDL_CONTROLLER_AXIS_LEFTY = 1,
    SDL_CONTROLLER_AXIS_RIGHTX = 2,
    SDL_CONTROLLER_AXIS_RIGHTY = 3,
    SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4,
    SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5,
    SDL_CONTROLLER_AXIS_MAX = 6,
}

sdl.SDL_CONTROLLER_AXIS_INVALID = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_INVALID
sdl.SDL_CONTROLLER_AXIS_LEFTX = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTX
sdl.SDL_CONTROLLER_AXIS_LEFTY = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTY
sdl.SDL_CONTROLLER_AXIS_RIGHTX = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTX
sdl.SDL_CONTROLLER_AXIS_RIGHTY = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTY
sdl.SDL_CONTROLLER_AXIS_TRIGGERLEFT = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERLEFT
sdl.SDL_CONTROLLER_AXIS_TRIGGERRIGHT = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERRIGHT
sdl.SDL_CONTROLLER_AXIS_MAX = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_MAX

---@class SDL_GameControllerAxis* : ffi.cdata*
---@field [integer] SDL_GameControllerAxis

---@class SDL_GameControllerAxis** : ffi.cdata*
---@field [integer] SDL_GameControllerAxis*

---@param str string
---@return SDL_GameControllerAxis
function sdl.GameControllerGetAxisFromString(str) end
sdl.SDL_GameControllerGetAxisFromString = sdl.GameControllerGetAxisFromString

---@param axis SDL_GameControllerAxis
---@return string
function sdl.GameControllerGetStringForAxis(axis) end
sdl.SDL_GameControllerGetStringForAxis = sdl.GameControllerGetStringForAxis

---@param gamecontroller SDL_GameController*?
---@param axis SDL_GameControllerAxis
---@return SDL_GameControllerButtonBind
function sdl.GameControllerGetBindForAxis(gamecontroller, axis) end
sdl.SDL_GameControllerGetBindForAxis = sdl.GameControllerGetBindForAxis

---@param gamecontroller SDL_GameController*?
---@param axis SDL_GameControllerAxis
---@return SDL_bool
function sdl.GameControllerHasAxis(gamecontroller, axis) end
sdl.SDL_GameControllerHasAxis = sdl.GameControllerHasAxis

---@param gamecontroller SDL_GameController*?
---@param axis SDL_GameControllerAxis
---@return Sint16
function sdl.GameControllerGetAxis(gamecontroller, axis) end
sdl.SDL_GameControllerGetAxis = sdl.GameControllerGetAxis

---@enum SDL_GameControllerButton
local SDL_GameControllerButton = {
    SDL_CONTROLLER_BUTTON_INVALID = -1,
    SDL_CONTROLLER_BUTTON_A = 0,
    SDL_CONTROLLER_BUTTON_B = 1,
    SDL_CONTROLLER_BUTTON_X = 2,
    SDL_CONTROLLER_BUTTON_Y = 3,
    SDL_CONTROLLER_BUTTON_BACK = 4,
    SDL_CONTROLLER_BUTTON_GUIDE = 5,
    SDL_CONTROLLER_BUTTON_START = 6,
    SDL_CONTROLLER_BUTTON_LEFTSTICK = 7,
    SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8,
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9,
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10,
    SDL_CONTROLLER_BUTTON_DPAD_UP = 11,
    SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12,
    SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13,
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14,
    SDL_CONTROLLER_BUTTON_MISC1 = 15,
    SDL_CONTROLLER_BUTTON_PADDLE1 = 16,
    SDL_CONTROLLER_BUTTON_PADDLE2 = 17,
    SDL_CONTROLLER_BUTTON_PADDLE3 = 18,
    SDL_CONTROLLER_BUTTON_PADDLE4 = 19,
    SDL_CONTROLLER_BUTTON_TOUCHPAD = 20,
    SDL_CONTROLLER_BUTTON_MAX = 21,
}

sdl.SDL_CONTROLLER_BUTTON_INVALID = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_INVALID
sdl.SDL_CONTROLLER_BUTTON_A = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_A
sdl.SDL_CONTROLLER_BUTTON_B = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_B
sdl.SDL_CONTROLLER_BUTTON_X = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_X
sdl.SDL_CONTROLLER_BUTTON_Y = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_Y
sdl.SDL_CONTROLLER_BUTTON_BACK = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_BACK
sdl.SDL_CONTROLLER_BUTTON_GUIDE = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_GUIDE
sdl.SDL_CONTROLLER_BUTTON_START = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_START
sdl.SDL_CONTROLLER_BUTTON_LEFTSTICK = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSTICK
sdl.SDL_CONTROLLER_BUTTON_RIGHTSTICK = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSTICK
sdl.SDL_CONTROLLER_BUTTON_LEFTSHOULDER = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSHOULDER
sdl.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER
sdl.SDL_CONTROLLER_BUTTON_DPAD_UP = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_UP
sdl.SDL_CONTROLLER_BUTTON_DPAD_DOWN = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_DOWN
sdl.SDL_CONTROLLER_BUTTON_DPAD_LEFT = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_LEFT
sdl.SDL_CONTROLLER_BUTTON_DPAD_RIGHT = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_RIGHT
sdl.SDL_CONTROLLER_BUTTON_MISC1 = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MISC1
sdl.SDL_CONTROLLER_BUTTON_PADDLE1 = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE1
sdl.SDL_CONTROLLER_BUTTON_PADDLE2 = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE2
sdl.SDL_CONTROLLER_BUTTON_PADDLE3 = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE3
sdl.SDL_CONTROLLER_BUTTON_PADDLE4 = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE4
sdl.SDL_CONTROLLER_BUTTON_TOUCHPAD = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_TOUCHPAD
sdl.SDL_CONTROLLER_BUTTON_MAX = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MAX

---@class SDL_GameControllerButton* : ffi.cdata*
---@field [integer] SDL_GameControllerButton

---@class SDL_GameControllerButton** : ffi.cdata*
---@field [integer] SDL_GameControllerButton*

---@param str string
---@return SDL_GameControllerButton
function sdl.GameControllerGetButtonFromString(str) end
sdl.SDL_GameControllerGetButtonFromString = sdl.GameControllerGetButtonFromString

---@param button SDL_GameControllerButton
---@return string
function sdl.GameControllerGetStringForButton(button) end
sdl.SDL_GameControllerGetStringForButton = sdl.GameControllerGetStringForButton

---@param gamecontroller SDL_GameController*?
---@param button SDL_GameControllerButton
---@return SDL_GameControllerButtonBind
function sdl.GameControllerGetBindForButton(gamecontroller, button) end
sdl.SDL_GameControllerGetBindForButton = sdl.GameControllerGetBindForButton

---@param gamecontroller SDL_GameController*?
---@param button SDL_GameControllerButton
---@return SDL_bool
function sdl.GameControllerHasButton(gamecontroller, button) end
sdl.SDL_GameControllerHasButton = sdl.GameControllerHasButton

---@param gamecontroller SDL_GameController*?
---@param button SDL_GameControllerButton
---@return Uint8
function sdl.GameControllerGetButton(gamecontroller, button) end
sdl.SDL_GameControllerGetButton = sdl.GameControllerGetButton

---@param gamecontroller SDL_GameController*?
---@return integer
function sdl.GameControllerGetNumTouchpads(gamecontroller) end
sdl.SDL_GameControllerGetNumTouchpads = sdl.GameControllerGetNumTouchpads

---@param gamecontroller SDL_GameController*?
---@param touchpad integer
---@return integer
function sdl.GameControllerGetNumTouchpadFingers(gamecontroller, touchpad) end
sdl.SDL_GameControllerGetNumTouchpadFingers = sdl.GameControllerGetNumTouchpadFingers

---@param gamecontroller SDL_GameController*?
---@param touchpad integer
---@param finger integer
---@param state Uint8*?
---@param x number*?
---@param y number*?
---@param pressure number*?
---@return integer
function sdl.GameControllerGetTouchpadFinger(gamecontroller, touchpad, finger, state, x, y, pressure) end
sdl.SDL_GameControllerGetTouchpadFinger = sdl.GameControllerGetTouchpadFinger

---@param gamecontroller SDL_GameController*?
---@param type SDL_SensorType
---@return SDL_bool
function sdl.GameControllerHasSensor(gamecontroller, type) end
sdl.SDL_GameControllerHasSensor = sdl.GameControllerHasSensor

---@param gamecontroller SDL_GameController*?
---@param type SDL_SensorType
---@param enabled SDL_bool
---@return integer
function sdl.GameControllerSetSensorEnabled(gamecontroller, type, enabled) end
sdl.SDL_GameControllerSetSensorEnabled = sdl.GameControllerSetSensorEnabled

---@param gamecontroller SDL_GameController*?
---@param type SDL_SensorType
---@return SDL_bool
function sdl.GameControllerIsSensorEnabled(gamecontroller, type) end
sdl.SDL_GameControllerIsSensorEnabled = sdl.GameControllerIsSensorEnabled

---@param gamecontroller SDL_GameController*?
---@param type SDL_SensorType
---@return number
function sdl.GameControllerGetSensorDataRate(gamecontroller, type) end
sdl.SDL_GameControllerGetSensorDataRate = sdl.GameControllerGetSensorDataRate

---@param gamecontroller SDL_GameController*?
---@param type SDL_SensorType
---@param data number*?
---@param num_values integer
---@return integer
function sdl.GameControllerGetSensorData(gamecontroller, type, data, num_values) end
sdl.SDL_GameControllerGetSensorData = sdl.GameControllerGetSensorData

---@param gamecontroller SDL_GameController*?
---@param type SDL_SensorType
---@param timestamp Uint64*?
---@param data number*?
---@param num_values integer
---@return integer
function sdl.GameControllerGetSensorDataWithTimestamp(gamecontroller, type, timestamp, data, num_values) end
sdl.SDL_GameControllerGetSensorDataWithTimestamp = sdl.GameControllerGetSensorDataWithTimestamp

---@param gamecontroller SDL_GameController*?
---@param low_frequency_rumble Uint16
---@param high_frequency_rumble Uint16
---@param duration_ms Uint32
---@return integer
function sdl.GameControllerRumble(gamecontroller, low_frequency_rumble, high_frequency_rumble, duration_ms) end
sdl.SDL_GameControllerRumble = sdl.GameControllerRumble

---@param gamecontroller SDL_GameController*?
---@param left_rumble Uint16
---@param right_rumble Uint16
---@param duration_ms Uint32
---@return integer
function sdl.GameControllerRumbleTriggers(gamecontroller, left_rumble, right_rumble, duration_ms) end
sdl.SDL_GameControllerRumbleTriggers = sdl.GameControllerRumbleTriggers

---@param gamecontroller SDL_GameController*?
---@return SDL_bool
function sdl.GameControllerHasLED(gamecontroller) end
sdl.SDL_GameControllerHasLED = sdl.GameControllerHasLED

---@param gamecontroller SDL_GameController*?
---@return SDL_bool
function sdl.GameControllerHasRumble(gamecontroller) end
sdl.SDL_GameControllerHasRumble = sdl.GameControllerHasRumble

---@param gamecontroller SDL_GameController*?
---@return SDL_bool
function sdl.GameControllerHasRumbleTriggers(gamecontroller) end
sdl.SDL_GameControllerHasRumbleTriggers = sdl.GameControllerHasRumbleTriggers

---@param gamecontroller SDL_GameController*?
---@param red Uint8
---@param green Uint8
---@param blue Uint8
---@return integer
function sdl.GameControllerSetLED(gamecontroller, red, green, blue) end
sdl.SDL_GameControllerSetLED = sdl.GameControllerSetLED

---@param gamecontroller SDL_GameController*?
---@param data ffi.cdata*
---@param size integer
---@return integer
function sdl.GameControllerSendEffect(gamecontroller, data, size) end
sdl.SDL_GameControllerSendEffect = sdl.GameControllerSendEffect

---@param gamecontroller SDL_GameController*?
---@return nil
function sdl.GameControllerClose(gamecontroller) end
sdl.SDL_GameControllerClose = sdl.GameControllerClose

---@param gamecontroller SDL_GameController*?
---@param button SDL_GameControllerButton
---@return string
function sdl.GameControllerGetAppleSFSymbolsNameForButton(gamecontroller, button) end
sdl.SDL_GameControllerGetAppleSFSymbolsNameForButton = sdl.GameControllerGetAppleSFSymbolsNameForButton

---@param gamecontroller SDL_GameController*?
---@param axis SDL_GameControllerAxis
---@return string
function sdl.GameControllerGetAppleSFSymbolsNameForAxis(gamecontroller, axis) end
sdl.SDL_GameControllerGetAppleSFSymbolsNameForAxis = sdl.GameControllerGetAppleSFSymbolsNameForAxis

---@alias SDL_TouchID Sint64

---@class SDL_TouchID* : ffi.cdata*
---@field [integer] SDL_TouchID

---@class SDL_TouchID** : ffi.cdata*
---@field [integer] SDL_TouchID*

---@alias SDL_FingerID Sint64

---@class SDL_FingerID* : ffi.cdata*
---@field [integer] SDL_FingerID

---@class SDL_FingerID** : ffi.cdata*
---@field [integer] SDL_FingerID*

---@enum SDL_TouchDeviceType
local SDL_TouchDeviceType = {
    SDL_TOUCH_DEVICE_INVALID = -1,
    SDL_TOUCH_DEVICE_DIRECT = 0,
    SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
    SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2,
}

sdl.SDL_TOUCH_DEVICE_INVALID = SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INVALID
sdl.SDL_TOUCH_DEVICE_DIRECT = SDL_TouchDeviceType.SDL_TOUCH_DEVICE_DIRECT
sdl.SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE
sdl.SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INDIRECT_RELATIVE

---@class SDL_TouchDeviceType* : ffi.cdata*
---@field [integer] SDL_TouchDeviceType

---@class SDL_TouchDeviceType** : ffi.cdata*
---@field [integer] SDL_TouchDeviceType*

---@class SDL_Finger
---@field id SDL_FingerID
---@field x number
---@field y number
---@field pressure number

---@class SDL_Finger* : ffi.cdata*
---@field [integer] SDL_Finger

---@class SDL_Finger** : ffi.cdata*
---@field [integer] SDL_Finger*

---@return integer
function sdl.GetNumTouchDevices() end
sdl.SDL_GetNumTouchDevices = sdl.GetNumTouchDevices

---@param index integer
---@return SDL_TouchID
function sdl.GetTouchDevice(index) end
sdl.SDL_GetTouchDevice = sdl.GetTouchDevice

---@param index integer
---@return string
function sdl.GetTouchName(index) end
sdl.SDL_GetTouchName = sdl.GetTouchName

---@param touchID SDL_TouchID
---@return SDL_TouchDeviceType
function sdl.GetTouchDeviceType(touchID) end
sdl.SDL_GetTouchDeviceType = sdl.GetTouchDeviceType

---@param touchID SDL_TouchID
---@return integer
function sdl.GetNumTouchFingers(touchID) end
sdl.SDL_GetNumTouchFingers = sdl.GetNumTouchFingers

---@param touchID SDL_TouchID
---@param index integer
---@return SDL_Finger*?
function sdl.GetTouchFinger(touchID, index) end
sdl.SDL_GetTouchFinger = sdl.GetTouchFinger

---@alias SDL_GestureID Sint64

---@class SDL_GestureID* : ffi.cdata*
---@field [integer] SDL_GestureID

---@class SDL_GestureID** : ffi.cdata*
---@field [integer] SDL_GestureID*

---@param touchId SDL_TouchID
---@return integer
function sdl.RecordGesture(touchId) end
sdl.SDL_RecordGesture = sdl.RecordGesture

---@param dst SDL_RWops*?
---@return integer
function sdl.SaveAllDollarTemplates(dst) end
sdl.SDL_SaveAllDollarTemplates = sdl.SaveAllDollarTemplates

---@param gestureId SDL_GestureID
---@param dst SDL_RWops*?
---@return integer
function sdl.SaveDollarTemplate(gestureId, dst) end
sdl.SDL_SaveDollarTemplate = sdl.SaveDollarTemplate

---@param touchId SDL_TouchID
---@param src SDL_RWops*?
---@return integer
function sdl.LoadDollarTemplates(touchId, src) end
sdl.SDL_LoadDollarTemplates = sdl.LoadDollarTemplates

---@enum SDL_EventType
local SDL_EventType = {
    SDL_FIRSTEVENT = 0,
    SDL_QUIT = 256,
    SDL_APP_TERMINATING = 257,
    SDL_APP_LOWMEMORY = 258,
    SDL_APP_WILLENTERBACKGROUND = 259,
    SDL_APP_DIDENTERBACKGROUND = 260,
    SDL_APP_WILLENTERFOREGROUND = 261,
    SDL_APP_DIDENTERFOREGROUND = 262,
    SDL_LOCALECHANGED = 263,
    SDL_DISPLAYEVENT = 336,
    SDL_WINDOWEVENT = 512,
    SDL_SYSWMEVENT = 513,
    SDL_KEYDOWN = 768,
    SDL_KEYUP = 769,
    SDL_TEXTEDITING = 770,
    SDL_TEXTINPUT = 771,
    SDL_KEYMAPCHANGED = 772,
    SDL_TEXTEDITING_EXT = 773,
    SDL_MOUSEMOTION = 1024,
    SDL_MOUSEBUTTONDOWN = 1025,
    SDL_MOUSEBUTTONUP = 1026,
    SDL_MOUSEWHEEL = 1027,
    SDL_JOYAXISMOTION = 1536,
    SDL_JOYBALLMOTION = 1537,
    SDL_JOYHATMOTION = 1538,
    SDL_JOYBUTTONDOWN = 1539,
    SDL_JOYBUTTONUP = 1540,
    SDL_JOYDEVICEADDED = 1541,
    SDL_JOYDEVICEREMOVED = 1542,
    SDL_JOYBATTERYUPDATED = 1543,
    SDL_CONTROLLERAXISMOTION = 1616,
    SDL_CONTROLLERBUTTONDOWN = 1617,
    SDL_CONTROLLERBUTTONUP = 1618,
    SDL_CONTROLLERDEVICEADDED = 1619,
    SDL_CONTROLLERDEVICEREMOVED = 1620,
    SDL_CONTROLLERDEVICEREMAPPED = 1621,
    SDL_CONTROLLERTOUCHPADDOWN = 1622,
    SDL_CONTROLLERTOUCHPADMOTION = 1623,
    SDL_CONTROLLERTOUCHPADUP = 1624,
    SDL_CONTROLLERSENSORUPDATE = 1625,
    SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3 = 1626,
    SDL_CONTROLLERSTEAMHANDLEUPDATED = 1627,
    SDL_FINGERDOWN = 1792,
    SDL_FINGERUP = 1793,
    SDL_FINGERMOTION = 1794,
    SDL_DOLLARGESTURE = 2048,
    SDL_DOLLARRECORD = 2049,
    SDL_MULTIGESTURE = 2050,
    SDL_CLIPBOARDUPDATE = 2304,
    SDL_DROPFILE = 4096,
    SDL_DROPTEXT = 4097,
    SDL_DROPBEGIN = 4098,
    SDL_DROPCOMPLETE = 4099,
    SDL_AUDIODEVICEADDED = 4352,
    SDL_AUDIODEVICEREMOVED = 4353,
    SDL_SENSORUPDATE = 4608,
    SDL_RENDER_TARGETS_RESET = 8192,
    SDL_RENDER_DEVICE_RESET = 8193,
    SDL_POLLSENTINEL = 32512,
    SDL_USEREVENT = 32768,
    SDL_LASTEVENT = 65535,
}

sdl.SDL_FIRSTEVENT = SDL_EventType.SDL_FIRSTEVENT
sdl.SDL_QUIT = SDL_EventType.SDL_QUIT
sdl.SDL_APP_TERMINATING = SDL_EventType.SDL_APP_TERMINATING
sdl.SDL_APP_LOWMEMORY = SDL_EventType.SDL_APP_LOWMEMORY
sdl.SDL_APP_WILLENTERBACKGROUND = SDL_EventType.SDL_APP_WILLENTERBACKGROUND
sdl.SDL_APP_DIDENTERBACKGROUND = SDL_EventType.SDL_APP_DIDENTERBACKGROUND
sdl.SDL_APP_WILLENTERFOREGROUND = SDL_EventType.SDL_APP_WILLENTERFOREGROUND
sdl.SDL_APP_DIDENTERFOREGROUND = SDL_EventType.SDL_APP_DIDENTERFOREGROUND
sdl.SDL_LOCALECHANGED = SDL_EventType.SDL_LOCALECHANGED
sdl.SDL_DISPLAYEVENT = SDL_EventType.SDL_DISPLAYEVENT
sdl.SDL_WINDOWEVENT = SDL_EventType.SDL_WINDOWEVENT
sdl.SDL_SYSWMEVENT = SDL_EventType.SDL_SYSWMEVENT
sdl.SDL_KEYDOWN = SDL_EventType.SDL_KEYDOWN
sdl.SDL_KEYUP = SDL_EventType.SDL_KEYUP
sdl.SDL_TEXTEDITING = SDL_EventType.SDL_TEXTEDITING
sdl.SDL_TEXTINPUT = SDL_EventType.SDL_TEXTINPUT
sdl.SDL_KEYMAPCHANGED = SDL_EventType.SDL_KEYMAPCHANGED
sdl.SDL_TEXTEDITING_EXT = SDL_EventType.SDL_TEXTEDITING_EXT
sdl.SDL_MOUSEMOTION = SDL_EventType.SDL_MOUSEMOTION
sdl.SDL_MOUSEBUTTONDOWN = SDL_EventType.SDL_MOUSEBUTTONDOWN
sdl.SDL_MOUSEBUTTONUP = SDL_EventType.SDL_MOUSEBUTTONUP
sdl.SDL_MOUSEWHEEL = SDL_EventType.SDL_MOUSEWHEEL
sdl.SDL_JOYAXISMOTION = SDL_EventType.SDL_JOYAXISMOTION
sdl.SDL_JOYBALLMOTION = SDL_EventType.SDL_JOYBALLMOTION
sdl.SDL_JOYHATMOTION = SDL_EventType.SDL_JOYHATMOTION
sdl.SDL_JOYBUTTONDOWN = SDL_EventType.SDL_JOYBUTTONDOWN
sdl.SDL_JOYBUTTONUP = SDL_EventType.SDL_JOYBUTTONUP
sdl.SDL_JOYDEVICEADDED = SDL_EventType.SDL_JOYDEVICEADDED
sdl.SDL_JOYDEVICEREMOVED = SDL_EventType.SDL_JOYDEVICEREMOVED
sdl.SDL_JOYBATTERYUPDATED = SDL_EventType.SDL_JOYBATTERYUPDATED
sdl.SDL_CONTROLLERAXISMOTION = SDL_EventType.SDL_CONTROLLERAXISMOTION
sdl.SDL_CONTROLLERBUTTONDOWN = SDL_EventType.SDL_CONTROLLERBUTTONDOWN
sdl.SDL_CONTROLLERBUTTONUP = SDL_EventType.SDL_CONTROLLERBUTTONUP
sdl.SDL_CONTROLLERDEVICEADDED = SDL_EventType.SDL_CONTROLLERDEVICEADDED
sdl.SDL_CONTROLLERDEVICEREMOVED = SDL_EventType.SDL_CONTROLLERDEVICEREMOVED
sdl.SDL_CONTROLLERDEVICEREMAPPED = SDL_EventType.SDL_CONTROLLERDEVICEREMAPPED
sdl.SDL_CONTROLLERTOUCHPADDOWN = SDL_EventType.SDL_CONTROLLERTOUCHPADDOWN
sdl.SDL_CONTROLLERTOUCHPADMOTION = SDL_EventType.SDL_CONTROLLERTOUCHPADMOTION
sdl.SDL_CONTROLLERTOUCHPADUP = SDL_EventType.SDL_CONTROLLERTOUCHPADUP
sdl.SDL_CONTROLLERSENSORUPDATE = SDL_EventType.SDL_CONTROLLERSENSORUPDATE
sdl.SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3 = SDL_EventType.SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3
sdl.SDL_CONTROLLERSTEAMHANDLEUPDATED = SDL_EventType.SDL_CONTROLLERSTEAMHANDLEUPDATED
sdl.SDL_FINGERDOWN = SDL_EventType.SDL_FINGERDOWN
sdl.SDL_FINGERUP = SDL_EventType.SDL_FINGERUP
sdl.SDL_FINGERMOTION = SDL_EventType.SDL_FINGERMOTION
sdl.SDL_DOLLARGESTURE = SDL_EventType.SDL_DOLLARGESTURE
sdl.SDL_DOLLARRECORD = SDL_EventType.SDL_DOLLARRECORD
sdl.SDL_MULTIGESTURE = SDL_EventType.SDL_MULTIGESTURE
sdl.SDL_CLIPBOARDUPDATE = SDL_EventType.SDL_CLIPBOARDUPDATE
sdl.SDL_DROPFILE = SDL_EventType.SDL_DROPFILE
sdl.SDL_DROPTEXT = SDL_EventType.SDL_DROPTEXT
sdl.SDL_DROPBEGIN = SDL_EventType.SDL_DROPBEGIN
sdl.SDL_DROPCOMPLETE = SDL_EventType.SDL_DROPCOMPLETE
sdl.SDL_AUDIODEVICEADDED = SDL_EventType.SDL_AUDIODEVICEADDED
sdl.SDL_AUDIODEVICEREMOVED = SDL_EventType.SDL_AUDIODEVICEREMOVED
sdl.SDL_SENSORUPDATE = SDL_EventType.SDL_SENSORUPDATE
sdl.SDL_RENDER_TARGETS_RESET = SDL_EventType.SDL_RENDER_TARGETS_RESET
sdl.SDL_RENDER_DEVICE_RESET = SDL_EventType.SDL_RENDER_DEVICE_RESET
sdl.SDL_POLLSENTINEL = SDL_EventType.SDL_POLLSENTINEL
sdl.SDL_USEREVENT = SDL_EventType.SDL_USEREVENT
sdl.SDL_LASTEVENT = SDL_EventType.SDL_LASTEVENT

---@class SDL_EventType* : ffi.cdata*
---@field [integer] SDL_EventType

---@class SDL_EventType** : ffi.cdata*
---@field [integer] SDL_EventType*

---@class SDL_CommonEvent
---@field type Uint32
---@field timestamp Uint32

---@class SDL_CommonEvent* : ffi.cdata*
---@field [integer] SDL_CommonEvent

---@class SDL_CommonEvent** : ffi.cdata*
---@field [integer] SDL_CommonEvent*

---@class SDL_DisplayEvent
---@field type Uint32
---@field timestamp Uint32
---@field display Uint32
---@field event Uint8
---@field padding1 Uint8
---@field padding2 Uint8
---@field padding3 Uint8
---@field data1 Sint32

---@class SDL_DisplayEvent* : ffi.cdata*
---@field [integer] SDL_DisplayEvent

---@class SDL_DisplayEvent** : ffi.cdata*
---@field [integer] SDL_DisplayEvent*

---@class SDL_WindowEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field event Uint8
---@field padding1 Uint8
---@field padding2 Uint8
---@field padding3 Uint8
---@field data1 Sint32
---@field data2 Sint32

---@class SDL_WindowEvent* : ffi.cdata*
---@field [integer] SDL_WindowEvent

---@class SDL_WindowEvent** : ffi.cdata*
---@field [integer] SDL_WindowEvent*

---@class SDL_KeyboardEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field state Uint8
---@field repeat Uint8
---@field padding2 Uint8
---@field padding3 Uint8
---@field keysym SDL_Keysym

---@class SDL_KeyboardEvent* : ffi.cdata*
---@field [integer] SDL_KeyboardEvent

---@class SDL_KeyboardEvent** : ffi.cdata*
---@field [integer] SDL_KeyboardEvent*

---@class SDL_TextEditingEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field text integer[]
---@field start Sint32
---@field length Sint32

---@class SDL_TextEditingEvent* : ffi.cdata*
---@field [integer] SDL_TextEditingEvent

---@class SDL_TextEditingEvent** : ffi.cdata*
---@field [integer] SDL_TextEditingEvent*

---@class SDL_TextEditingExtEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field text string
---@field start Sint32
---@field length Sint32

---@class SDL_TextEditingExtEvent* : ffi.cdata*
---@field [integer] SDL_TextEditingExtEvent

---@class SDL_TextEditingExtEvent** : ffi.cdata*
---@field [integer] SDL_TextEditingExtEvent*

---@class SDL_TextInputEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field text integer[]

---@class SDL_TextInputEvent* : ffi.cdata*
---@field [integer] SDL_TextInputEvent

---@class SDL_TextInputEvent** : ffi.cdata*
---@field [integer] SDL_TextInputEvent*

---@class SDL_MouseMotionEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field which Uint32
---@field state Uint32
---@field x Sint32
---@field y Sint32
---@field xrel Sint32
---@field yrel Sint32

---@class SDL_MouseMotionEvent* : ffi.cdata*
---@field [integer] SDL_MouseMotionEvent

---@class SDL_MouseMotionEvent** : ffi.cdata*
---@field [integer] SDL_MouseMotionEvent*

---@class SDL_MouseButtonEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field which Uint32
---@field button Uint8
---@field state Uint8
---@field clicks Uint8
---@field padding1 Uint8
---@field x Sint32
---@field y Sint32

---@class SDL_MouseButtonEvent* : ffi.cdata*
---@field [integer] SDL_MouseButtonEvent

---@class SDL_MouseButtonEvent** : ffi.cdata*
---@field [integer] SDL_MouseButtonEvent*

---@class SDL_MouseWheelEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field which Uint32
---@field x Sint32
---@field y Sint32
---@field direction Uint32
---@field preciseX number
---@field preciseY number
---@field mouseX Sint32
---@field mouseY Sint32

---@class SDL_MouseWheelEvent* : ffi.cdata*
---@field [integer] SDL_MouseWheelEvent

---@class SDL_MouseWheelEvent** : ffi.cdata*
---@field [integer] SDL_MouseWheelEvent*

---@class SDL_JoyAxisEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field axis Uint8
---@field padding1 Uint8
---@field padding2 Uint8
---@field padding3 Uint8
---@field value Sint16
---@field padding4 Uint16

---@class SDL_JoyAxisEvent* : ffi.cdata*
---@field [integer] SDL_JoyAxisEvent

---@class SDL_JoyAxisEvent** : ffi.cdata*
---@field [integer] SDL_JoyAxisEvent*

---@class SDL_JoyBallEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field ball Uint8
---@field padding1 Uint8
---@field padding2 Uint8
---@field padding3 Uint8
---@field xrel Sint16
---@field yrel Sint16

---@class SDL_JoyBallEvent* : ffi.cdata*
---@field [integer] SDL_JoyBallEvent

---@class SDL_JoyBallEvent** : ffi.cdata*
---@field [integer] SDL_JoyBallEvent*

---@class SDL_JoyHatEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field hat Uint8
---@field value Uint8
---@field padding1 Uint8
---@field padding2 Uint8

---@class SDL_JoyHatEvent* : ffi.cdata*
---@field [integer] SDL_JoyHatEvent

---@class SDL_JoyHatEvent** : ffi.cdata*
---@field [integer] SDL_JoyHatEvent*

---@class SDL_JoyButtonEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field button Uint8
---@field state Uint8
---@field padding1 Uint8
---@field padding2 Uint8

---@class SDL_JoyButtonEvent* : ffi.cdata*
---@field [integer] SDL_JoyButtonEvent

---@class SDL_JoyButtonEvent** : ffi.cdata*
---@field [integer] SDL_JoyButtonEvent*

---@class SDL_JoyDeviceEvent
---@field type Uint32
---@field timestamp Uint32
---@field which Sint32

---@class SDL_JoyDeviceEvent* : ffi.cdata*
---@field [integer] SDL_JoyDeviceEvent

---@class SDL_JoyDeviceEvent** : ffi.cdata*
---@field [integer] SDL_JoyDeviceEvent*

---@class SDL_JoyBatteryEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field level SDL_JoystickPowerLevel

---@class SDL_JoyBatteryEvent* : ffi.cdata*
---@field [integer] SDL_JoyBatteryEvent

---@class SDL_JoyBatteryEvent** : ffi.cdata*
---@field [integer] SDL_JoyBatteryEvent*

---@class SDL_ControllerAxisEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field axis Uint8
---@field padding1 Uint8
---@field padding2 Uint8
---@field padding3 Uint8
---@field value Sint16
---@field padding4 Uint16

---@class SDL_ControllerAxisEvent* : ffi.cdata*
---@field [integer] SDL_ControllerAxisEvent

---@class SDL_ControllerAxisEvent** : ffi.cdata*
---@field [integer] SDL_ControllerAxisEvent*

---@class SDL_ControllerButtonEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field button Uint8
---@field state Uint8
---@field padding1 Uint8
---@field padding2 Uint8

---@class SDL_ControllerButtonEvent* : ffi.cdata*
---@field [integer] SDL_ControllerButtonEvent

---@class SDL_ControllerButtonEvent** : ffi.cdata*
---@field [integer] SDL_ControllerButtonEvent*

---@class SDL_ControllerDeviceEvent
---@field type Uint32
---@field timestamp Uint32
---@field which Sint32

---@class SDL_ControllerDeviceEvent* : ffi.cdata*
---@field [integer] SDL_ControllerDeviceEvent

---@class SDL_ControllerDeviceEvent** : ffi.cdata*
---@field [integer] SDL_ControllerDeviceEvent*

---@class SDL_ControllerTouchpadEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field touchpad Sint32
---@field finger Sint32
---@field x number
---@field y number
---@field pressure number

---@class SDL_ControllerTouchpadEvent* : ffi.cdata*
---@field [integer] SDL_ControllerTouchpadEvent

---@class SDL_ControllerTouchpadEvent** : ffi.cdata*
---@field [integer] SDL_ControllerTouchpadEvent*

---@class SDL_ControllerSensorEvent
---@field type Uint32
---@field timestamp Uint32
---@field which SDL_JoystickID
---@field sensor Sint32
---@field data number[]
---@field timestamp_us Uint64

---@class SDL_ControllerSensorEvent* : ffi.cdata*
---@field [integer] SDL_ControllerSensorEvent

---@class SDL_ControllerSensorEvent** : ffi.cdata*
---@field [integer] SDL_ControllerSensorEvent*

---@class SDL_AudioDeviceEvent
---@field type Uint32
---@field timestamp Uint32
---@field which Uint32
---@field iscapture Uint8
---@field padding1 Uint8
---@field padding2 Uint8
---@field padding3 Uint8

---@class SDL_AudioDeviceEvent* : ffi.cdata*
---@field [integer] SDL_AudioDeviceEvent

---@class SDL_AudioDeviceEvent** : ffi.cdata*
---@field [integer] SDL_AudioDeviceEvent*

---@class SDL_TouchFingerEvent
---@field type Uint32
---@field timestamp Uint32
---@field touchId SDL_TouchID
---@field fingerId SDL_FingerID
---@field x number
---@field y number
---@field dx number
---@field dy number
---@field pressure number
---@field windowID Uint32

---@class SDL_TouchFingerEvent* : ffi.cdata*
---@field [integer] SDL_TouchFingerEvent

---@class SDL_TouchFingerEvent** : ffi.cdata*
---@field [integer] SDL_TouchFingerEvent*

---@class SDL_MultiGestureEvent
---@field type Uint32
---@field timestamp Uint32
---@field touchId SDL_TouchID
---@field dTheta number
---@field dDist number
---@field x number
---@field y number
---@field numFingers Uint16
---@field padding Uint16

---@class SDL_MultiGestureEvent* : ffi.cdata*
---@field [integer] SDL_MultiGestureEvent

---@class SDL_MultiGestureEvent** : ffi.cdata*
---@field [integer] SDL_MultiGestureEvent*

---@class SDL_DollarGestureEvent
---@field type Uint32
---@field timestamp Uint32
---@field touchId SDL_TouchID
---@field gestureId SDL_GestureID
---@field numFingers Uint32
---@field error number
---@field x number
---@field y number

---@class SDL_DollarGestureEvent* : ffi.cdata*
---@field [integer] SDL_DollarGestureEvent

---@class SDL_DollarGestureEvent** : ffi.cdata*
---@field [integer] SDL_DollarGestureEvent*

---@class SDL_DropEvent
---@field type Uint32
---@field timestamp Uint32
---@field file string
---@field windowID Uint32

---@class SDL_DropEvent* : ffi.cdata*
---@field [integer] SDL_DropEvent

---@class SDL_DropEvent** : ffi.cdata*
---@field [integer] SDL_DropEvent*

---@class SDL_SensorEvent
---@field type Uint32
---@field timestamp Uint32
---@field which Sint32
---@field data number[]
---@field timestamp_us Uint64

---@class SDL_SensorEvent* : ffi.cdata*
---@field [integer] SDL_SensorEvent

---@class SDL_SensorEvent** : ffi.cdata*
---@field [integer] SDL_SensorEvent*

---@class SDL_QuitEvent
---@field type Uint32
---@field timestamp Uint32

---@class SDL_QuitEvent* : ffi.cdata*
---@field [integer] SDL_QuitEvent

---@class SDL_QuitEvent** : ffi.cdata*
---@field [integer] SDL_QuitEvent*

---@class SDL_UserEvent
---@field type Uint32
---@field timestamp Uint32
---@field windowID Uint32
---@field code Sint32
---@field data1 ffi.cdata*
---@field data2 ffi.cdata*

---@class SDL_UserEvent* : ffi.cdata*
---@field [integer] SDL_UserEvent

---@class SDL_UserEvent** : ffi.cdata*
---@field [integer] SDL_UserEvent*

---@class SDL_SysWMmsg

---@class SDL_SysWMmsg* : ffi.cdata*
---@field [integer] SDL_SysWMmsg

---@class SDL_SysWMmsg** : ffi.cdata*
---@field [integer] SDL_SysWMmsg*

---@class SDL_SysWMEvent
---@field type Uint32
---@field timestamp Uint32
---@field msg SDL_SysWMmsg*?

---@class SDL_SysWMEvent* : ffi.cdata*
---@field [integer] SDL_SysWMEvent

---@class SDL_SysWMEvent** : ffi.cdata*
---@field [integer] SDL_SysWMEvent*

---@return nil
function sdl.PumpEvents() end
sdl.SDL_PumpEvents = sdl.PumpEvents

---@enum SDL_eventaction
local SDL_eventaction = {
    SDL_ADDEVENT = 0,
    SDL_PEEKEVENT = 1,
    SDL_GETEVENT = 2,
}

sdl.SDL_ADDEVENT = SDL_eventaction.SDL_ADDEVENT
sdl.SDL_PEEKEVENT = SDL_eventaction.SDL_PEEKEVENT
sdl.SDL_GETEVENT = SDL_eventaction.SDL_GETEVENT

---@class SDL_eventaction* : ffi.cdata*
---@field [integer] SDL_eventaction

---@class SDL_eventaction** : ffi.cdata*
---@field [integer] SDL_eventaction*

---@alias SDL_Event SDL_CommonEvent | SDL_DisplayEvent | SDL_WindowEvent | SDL_KeyboardEvent | SDL_TextEditingEvent | SDL_TextInputEvent | SDL_TextEditingExtEvent | SDL_MouseMotionEvent | SDL_MouseButtonEvent | SDL_MouseWheelEvent | SDL_JoyAxisEvent | SDL_JoyBallEvent | SDL_JoyHatEvent | SDL_JoyButtonEvent | SDL_JoyDeviceEvent | SDL_JoyBatteryEvent | SDL_ControllerAxisEvent | SDL_ControllerButtonEvent | SDL_ControllerDeviceEvent | SDL_ControllerTouchpadEvent | SDL_ControllerSensorEvent | SDL_AudioDeviceEvent | SDL_TouchFingerEvent | SDL_MultiGestureEvent | SDL_DollarGestureEvent | SDL_DropEvent | SDL_SensorEvent | SDL_QuitEvent | SDL_UserEvent | SDL_SysWMEvent

---@class SDL_Event* : ffi.cdata*
---@field [integer] SDL_Event

---@param events SDL_Event*?
---@param numevents integer
---@param action SDL_eventaction
---@param minType Uint32
---@param maxType Uint32
---@return integer
function sdl.PeepEvents(events, numevents, action, minType, maxType) end
sdl.SDL_PeepEvents = sdl.PeepEvents

---@param type Uint32
---@return SDL_bool
function sdl.HasEvent(type) end
sdl.SDL_HasEvent = sdl.HasEvent

---@param minType Uint32
---@param maxType Uint32
---@return SDL_bool
function sdl.HasEvents(minType, maxType) end
sdl.SDL_HasEvents = sdl.HasEvents

---@param type Uint32
---@return nil
function sdl.FlushEvent(type) end
sdl.SDL_FlushEvent = sdl.FlushEvent

---@param minType Uint32
---@param maxType Uint32
---@return nil
function sdl.FlushEvents(minType, maxType) end
sdl.SDL_FlushEvents = sdl.FlushEvents

---@param event SDL_Event*?
---@return integer
function sdl.PollEvent(event) end
sdl.SDL_PollEvent = sdl.PollEvent

---@param event SDL_Event*?
---@return integer
function sdl.WaitEvent(event) end
sdl.SDL_WaitEvent = sdl.WaitEvent

---@param event SDL_Event*?
---@param timeout integer
---@return integer
function sdl.WaitEventTimeout(event, timeout) end
sdl.SDL_WaitEventTimeout = sdl.WaitEventTimeout

---@param event SDL_Event*?
---@return integer
function sdl.PushEvent(event) end
sdl.SDL_PushEvent = sdl.PushEvent

---@alias SDL_EventFilter fun(arg_0: ffi.cdata*, arg_1: SDL_Event*?): integer

---@class SDL_EventFilter* : ffi.cdata*
---@field [integer] SDL_EventFilter

---@class SDL_EventFilter** : ffi.cdata*
---@field [integer] SDL_EventFilter*

---@param filter SDL_EventFilter
---@param userdata ffi.cdata*
---@return nil
function sdl.SetEventFilter(filter, userdata) end
sdl.SDL_SetEventFilter = sdl.SetEventFilter

---@param filter SDL_EventFilter*?
---@param userdata ffi.cdata*?
---@return SDL_bool
function sdl.GetEventFilter(filter, userdata) end
sdl.SDL_GetEventFilter = sdl.GetEventFilter

---@param filter SDL_EventFilter
---@param userdata ffi.cdata*
---@return nil
function sdl.AddEventWatch(filter, userdata) end
sdl.SDL_AddEventWatch = sdl.AddEventWatch

---@param filter SDL_EventFilter
---@param userdata ffi.cdata*
---@return nil
function sdl.DelEventWatch(filter, userdata) end
sdl.SDL_DelEventWatch = sdl.DelEventWatch

---@param filter SDL_EventFilter
---@param userdata ffi.cdata*
---@return nil
function sdl.FilterEvents(filter, userdata) end
sdl.SDL_FilterEvents = sdl.FilterEvents

---@param type Uint32
---@param state integer
---@return Uint8
function sdl.EventState(type, state) end
sdl.SDL_EventState = sdl.EventState

---@param numevents integer
---@return Uint32
function sdl.RegisterEvents(numevents) end
sdl.SDL_RegisterEvents = sdl.RegisterEvents

---@return string
function sdl.GetBasePath() end
sdl.SDL_GetBasePath = sdl.GetBasePath

---@param org string
---@param app string
---@return string
function sdl.GetPrefPath(org, app) end
sdl.SDL_GetPrefPath = sdl.GetPrefPath

---@class _SDL_Haptic

---@class _SDL_Haptic* : ffi.cdata*
---@field [integer] _SDL_Haptic

---@class _SDL_Haptic** : ffi.cdata*
---@field [integer] _SDL_Haptic*

---@alias SDL_Haptic _SDL_Haptic

---@class SDL_Haptic* : ffi.cdata*
---@field [integer] SDL_Haptic

---@class SDL_Haptic** : ffi.cdata*
---@field [integer] SDL_Haptic*

---@class SDL_HapticDirection
---@field type Uint8
---@field dir Sint32[]

---@class SDL_HapticDirection* : ffi.cdata*
---@field [integer] SDL_HapticDirection

---@class SDL_HapticDirection** : ffi.cdata*
---@field [integer] SDL_HapticDirection*

---@class SDL_HapticConstant
---@field type Uint16
---@field direction SDL_HapticDirection
---@field length Uint32
---@field delay Uint16
---@field button Uint16
---@field interval Uint16
---@field level Sint16
---@field attack_length Uint16
---@field attack_level Uint16
---@field fade_length Uint16
---@field fade_level Uint16

---@class SDL_HapticConstant* : ffi.cdata*
---@field [integer] SDL_HapticConstant

---@class SDL_HapticConstant** : ffi.cdata*
---@field [integer] SDL_HapticConstant*

---@class SDL_HapticPeriodic
---@field type Uint16
---@field direction SDL_HapticDirection
---@field length Uint32
---@field delay Uint16
---@field button Uint16
---@field interval Uint16
---@field period Uint16
---@field magnitude Sint16
---@field offset Sint16
---@field phase Uint16
---@field attack_length Uint16
---@field attack_level Uint16
---@field fade_length Uint16
---@field fade_level Uint16

---@class SDL_HapticPeriodic* : ffi.cdata*
---@field [integer] SDL_HapticPeriodic

---@class SDL_HapticPeriodic** : ffi.cdata*
---@field [integer] SDL_HapticPeriodic*

---@class SDL_HapticCondition
---@field type Uint16
---@field direction SDL_HapticDirection
---@field length Uint32
---@field delay Uint16
---@field button Uint16
---@field interval Uint16
---@field right_sat Uint16[]
---@field left_sat Uint16[]
---@field right_coeff Sint16[]
---@field left_coeff Sint16[]
---@field deadband Uint16[]
---@field center Sint16[]

---@class SDL_HapticCondition* : ffi.cdata*
---@field [integer] SDL_HapticCondition

---@class SDL_HapticCondition** : ffi.cdata*
---@field [integer] SDL_HapticCondition*

---@class SDL_HapticRamp
---@field type Uint16
---@field direction SDL_HapticDirection
---@field length Uint32
---@field delay Uint16
---@field button Uint16
---@field interval Uint16
---@field start Sint16
---@field end Sint16
---@field attack_length Uint16
---@field attack_level Uint16
---@field fade_length Uint16
---@field fade_level Uint16

---@class SDL_HapticRamp* : ffi.cdata*
---@field [integer] SDL_HapticRamp

---@class SDL_HapticRamp** : ffi.cdata*
---@field [integer] SDL_HapticRamp*

---@class SDL_HapticLeftRight
---@field type Uint16
---@field length Uint32
---@field large_magnitude Uint16
---@field small_magnitude Uint16

---@class SDL_HapticLeftRight* : ffi.cdata*
---@field [integer] SDL_HapticLeftRight

---@class SDL_HapticLeftRight** : ffi.cdata*
---@field [integer] SDL_HapticLeftRight*

---@class SDL_HapticCustom
---@field type Uint16
---@field direction SDL_HapticDirection
---@field length Uint32
---@field delay Uint16
---@field button Uint16
---@field interval Uint16
---@field channels Uint8
---@field period Uint16
---@field samples Uint16
---@field data Uint16*?
---@field attack_length Uint16
---@field attack_level Uint16
---@field fade_length Uint16
---@field fade_level Uint16

---@class SDL_HapticCustom* : ffi.cdata*
---@field [integer] SDL_HapticCustom

---@class SDL_HapticCustom** : ffi.cdata*
---@field [integer] SDL_HapticCustom*

---@return integer
function sdl.NumHaptics() end
sdl.SDL_NumHaptics = sdl.NumHaptics

---@param device_index integer
---@return string
function sdl.HapticName(device_index) end
sdl.SDL_HapticName = sdl.HapticName

---@param device_index integer
---@return SDL_Haptic*?
function sdl.HapticOpen(device_index) end
sdl.SDL_HapticOpen = sdl.HapticOpen

---@param device_index integer
---@return integer
function sdl.HapticOpened(device_index) end
sdl.SDL_HapticOpened = sdl.HapticOpened

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticIndex(haptic) end
sdl.SDL_HapticIndex = sdl.HapticIndex

---@return integer
function sdl.MouseIsHaptic() end
sdl.SDL_MouseIsHaptic = sdl.MouseIsHaptic

---@return SDL_Haptic*?
function sdl.HapticOpenFromMouse() end
sdl.SDL_HapticOpenFromMouse = sdl.HapticOpenFromMouse

---@param joystick SDL_Joystick*?
---@return integer
function sdl.JoystickIsHaptic(joystick) end
sdl.SDL_JoystickIsHaptic = sdl.JoystickIsHaptic

---@param joystick SDL_Joystick*?
---@return SDL_Haptic*?
function sdl.HapticOpenFromJoystick(joystick) end
sdl.SDL_HapticOpenFromJoystick = sdl.HapticOpenFromJoystick

---@param haptic SDL_Haptic*?
---@return nil
function sdl.HapticClose(haptic) end
sdl.SDL_HapticClose = sdl.HapticClose

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticNumEffects(haptic) end
sdl.SDL_HapticNumEffects = sdl.HapticNumEffects

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticNumEffectsPlaying(haptic) end
sdl.SDL_HapticNumEffectsPlaying = sdl.HapticNumEffectsPlaying

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticQuery(haptic) end
sdl.SDL_HapticQuery = sdl.HapticQuery

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticNumAxes(haptic) end
sdl.SDL_HapticNumAxes = sdl.HapticNumAxes


---@alias SDL_HapticEffect SDL_HapticConstant | SDL_HapticPeriodic | SDL_HapticCondition | SDL_HapticRamp | SDL_HapticLeftRight | SDL_HapticCustom
---@class SDL_HapticEffect* : ffi.cdata*
---@field [integer] SDL_HapticEffect

---@param haptic SDL_Haptic*?
---@param effect SDL_HapticEffect*?
---@return integer
function sdl.HapticEffectSupported(haptic, effect) end
sdl.SDL_HapticEffectSupported = sdl.HapticEffectSupported

---@param haptic SDL_Haptic*?
---@param effect SDL_HapticEffect*?
---@return integer
function sdl.HapticNewEffect(haptic, effect) end
sdl.SDL_HapticNewEffect = sdl.HapticNewEffect

---@param haptic SDL_Haptic*?
---@param effect integer
---@param data SDL_HapticEffect*?
---@return integer
function sdl.HapticUpdateEffect(haptic, effect, data) end
sdl.SDL_HapticUpdateEffect = sdl.HapticUpdateEffect

---@param haptic SDL_Haptic*?
---@param effect integer
---@param iterations Uint32
---@return integer
function sdl.HapticRunEffect(haptic, effect, iterations) end
sdl.SDL_HapticRunEffect = sdl.HapticRunEffect

---@param haptic SDL_Haptic*?
---@param effect integer
---@return integer
function sdl.HapticStopEffect(haptic, effect) end
sdl.SDL_HapticStopEffect = sdl.HapticStopEffect

---@param haptic SDL_Haptic*?
---@param effect integer
---@return nil
function sdl.HapticDestroyEffect(haptic, effect) end
sdl.SDL_HapticDestroyEffect = sdl.HapticDestroyEffect

---@param haptic SDL_Haptic*?
---@param effect integer
---@return integer
function sdl.HapticGetEffectStatus(haptic, effect) end
sdl.SDL_HapticGetEffectStatus = sdl.HapticGetEffectStatus

---@param haptic SDL_Haptic*?
---@param gain integer
---@return integer
function sdl.HapticSetGain(haptic, gain) end
sdl.SDL_HapticSetGain = sdl.HapticSetGain

---@param haptic SDL_Haptic*?
---@param autocenter integer
---@return integer
function sdl.HapticSetAutocenter(haptic, autocenter) end
sdl.SDL_HapticSetAutocenter = sdl.HapticSetAutocenter

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticPause(haptic) end
sdl.SDL_HapticPause = sdl.HapticPause

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticUnpause(haptic) end
sdl.SDL_HapticUnpause = sdl.HapticUnpause

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticStopAll(haptic) end
sdl.SDL_HapticStopAll = sdl.HapticStopAll

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticRumbleSupported(haptic) end
sdl.SDL_HapticRumbleSupported = sdl.HapticRumbleSupported

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticRumbleInit(haptic) end
sdl.SDL_HapticRumbleInit = sdl.HapticRumbleInit

---@param haptic SDL_Haptic*?
---@param strength number
---@param length Uint32
---@return integer
function sdl.HapticRumblePlay(haptic, strength, length) end
sdl.SDL_HapticRumblePlay = sdl.HapticRumblePlay

---@param haptic SDL_Haptic*?
---@return integer
function sdl.HapticRumbleStop(haptic) end
sdl.SDL_HapticRumbleStop = sdl.HapticRumbleStop

---@class SDL_hid_device_

---@class SDL_hid_device_* : ffi.cdata*
---@field [integer] SDL_hid_device_

---@class SDL_hid_device_** : ffi.cdata*
---@field [integer] SDL_hid_device_*

---@alias SDL_hid_device SDL_hid_device_

---@class SDL_hid_device* : ffi.cdata*
---@field [integer] SDL_hid_device

---@class SDL_hid_device** : ffi.cdata*
---@field [integer] SDL_hid_device*

---@class SDL_hid_device_info
---@field path string
---@field vendor_id integer
---@field product_id integer
---@field serial_number wchar_t*?
---@field release_number integer
---@field manufacturer_string wchar_t*?
---@field product_string wchar_t*?
---@field usage_page integer
---@field usage integer
---@field interface_number integer
---@field interface_class integer
---@field interface_subclass integer
---@field interface_protocol integer
---@field next SDL_hid_device_info*?

---@class SDL_hid_device_info* : ffi.cdata*
---@field [integer] SDL_hid_device_info

---@class SDL_hid_device_info** : ffi.cdata*
---@field [integer] SDL_hid_device_info*

---@return integer
function sdl.hid_init() end
sdl.SDL_hid_init = sdl.hid_init

---@return integer
function sdl.hid_exit() end
sdl.SDL_hid_exit = sdl.hid_exit

---@return Uint32
function sdl.hid_device_change_count() end
sdl.SDL_hid_device_change_count = sdl.hid_device_change_count

---@param vendor_id integer
---@param product_id integer
---@return SDL_hid_device_info*?
function sdl.hid_enumerate(vendor_id, product_id) end
sdl.SDL_hid_enumerate = sdl.hid_enumerate

---@param devs SDL_hid_device_info*?
---@return nil
function sdl.hid_free_enumeration(devs) end
sdl.SDL_hid_free_enumeration = sdl.hid_free_enumeration

---@param vendor_id integer
---@param product_id integer
---@param serial_number wchar_t*?
---@return SDL_hid_device*?
function sdl.hid_open(vendor_id, product_id, serial_number) end
sdl.SDL_hid_open = sdl.hid_open

---@param path string
---@param bExclusive integer
---@return SDL_hid_device*?
function sdl.hid_open_path(path, bExclusive) end
sdl.SDL_hid_open_path = sdl.hid_open_path

---@param dev SDL_hid_device*?
---@param data integer*?
---@param length size_t
---@return integer
function sdl.hid_write(dev, data, length) end
sdl.SDL_hid_write = sdl.hid_write

---@param dev SDL_hid_device*?
---@param data integer*?
---@param length size_t
---@param milliseconds integer
---@return integer
function sdl.hid_read_timeout(dev, data, length, milliseconds) end
sdl.SDL_hid_read_timeout = sdl.hid_read_timeout

---@param dev SDL_hid_device*?
---@param data integer*?
---@param length size_t
---@return integer
function sdl.hid_read(dev, data, length) end
sdl.SDL_hid_read = sdl.hid_read

---@param dev SDL_hid_device*?
---@param nonblock integer
---@return integer
function sdl.hid_set_nonblocking(dev, nonblock) end
sdl.SDL_hid_set_nonblocking = sdl.hid_set_nonblocking

---@param dev SDL_hid_device*?
---@param data integer*?
---@param length size_t
---@return integer
function sdl.hid_send_feature_report(dev, data, length) end
sdl.SDL_hid_send_feature_report = sdl.hid_send_feature_report

---@param dev SDL_hid_device*?
---@param data integer*?
---@param length size_t
---@return integer
function sdl.hid_get_feature_report(dev, data, length) end
sdl.SDL_hid_get_feature_report = sdl.hid_get_feature_report

---@param dev SDL_hid_device*?
---@return nil
function sdl.hid_close(dev) end
sdl.SDL_hid_close = sdl.hid_close

---@param dev SDL_hid_device*?
---@param string wchar_t*?
---@param maxlen size_t
---@return integer
function sdl.hid_get_manufacturer_string(dev, string, maxlen) end
sdl.SDL_hid_get_manufacturer_string = sdl.hid_get_manufacturer_string

---@param dev SDL_hid_device*?
---@param string wchar_t*?
---@param maxlen size_t
---@return integer
function sdl.hid_get_product_string(dev, string, maxlen) end
sdl.SDL_hid_get_product_string = sdl.hid_get_product_string

---@param dev SDL_hid_device*?
---@param string wchar_t*?
---@param maxlen size_t
---@return integer
function sdl.hid_get_serial_number_string(dev, string, maxlen) end
sdl.SDL_hid_get_serial_number_string = sdl.hid_get_serial_number_string

---@param dev SDL_hid_device*?
---@param string_index integer
---@param string wchar_t*?
---@param maxlen size_t
---@return integer
function sdl.hid_get_indexed_string(dev, string_index, string, maxlen) end
sdl.SDL_hid_get_indexed_string = sdl.hid_get_indexed_string

---@param active SDL_bool
---@return nil
function sdl.hid_ble_scan(active) end
sdl.SDL_hid_ble_scan = sdl.hid_ble_scan

---@enum SDL_HintPriority
local SDL_HintPriority = {
    SDL_HINT_DEFAULT = 0,
    SDL_HINT_NORMAL = 1,
    SDL_HINT_OVERRIDE = 2,
}

sdl.SDL_HINT_DEFAULT = SDL_HintPriority.SDL_HINT_DEFAULT
sdl.SDL_HINT_NORMAL = SDL_HintPriority.SDL_HINT_NORMAL
sdl.SDL_HINT_OVERRIDE = SDL_HintPriority.SDL_HINT_OVERRIDE

---@class SDL_HintPriority* : ffi.cdata*
---@field [integer] SDL_HintPriority

---@class SDL_HintPriority** : ffi.cdata*
---@field [integer] SDL_HintPriority*

---@param name string
---@param value string
---@param priority SDL_HintPriority
---@return SDL_bool
function sdl.SetHintWithPriority(name, value, priority) end
sdl.SDL_SetHintWithPriority = sdl.SetHintWithPriority

---@param name string
---@param value string
---@return SDL_bool
function sdl.SetHint(name, value) end
sdl.SDL_SetHint = sdl.SetHint

---@param name string
---@return SDL_bool
function sdl.ResetHint(name) end
sdl.SDL_ResetHint = sdl.ResetHint

---@return nil
function sdl.ResetHints() end
sdl.SDL_ResetHints = sdl.ResetHints

---@param name string
---@return string
function sdl.GetHint(name) end
sdl.SDL_GetHint = sdl.GetHint

---@param name string
---@param default_value SDL_bool
---@return SDL_bool
function sdl.GetHintBoolean(name, default_value) end
sdl.SDL_GetHintBoolean = sdl.GetHintBoolean

---@alias SDL_HintCallback fun(arg_0: ffi.cdata*, arg_1: string, arg_2: string, arg_3: string): nil

---@class SDL_HintCallback* : ffi.cdata*
---@field [integer] SDL_HintCallback

---@class SDL_HintCallback** : ffi.cdata*
---@field [integer] SDL_HintCallback*

---@param name string
---@param callback SDL_HintCallback
---@param userdata ffi.cdata*
---@return nil
function sdl.AddHintCallback(name, callback, userdata) end
sdl.SDL_AddHintCallback = sdl.AddHintCallback

---@param name string
---@param callback SDL_HintCallback
---@param userdata ffi.cdata*
---@return nil
function sdl.DelHintCallback(name, callback, userdata) end
sdl.SDL_DelHintCallback = sdl.DelHintCallback

---@return nil
function sdl.ClearHints() end
sdl.SDL_ClearHints = sdl.ClearHints

---@param sofile string
---@return ffi.cdata*
function sdl.LoadObject(sofile) end
sdl.SDL_LoadObject = sdl.LoadObject

---@param handle ffi.cdata*
---@param name string
---@return ffi.cdata*
function sdl.LoadFunction(handle, name) end
sdl.SDL_LoadFunction = sdl.LoadFunction

---@param handle ffi.cdata*
---@return nil
function sdl.UnloadObject(handle) end
sdl.SDL_UnloadObject = sdl.UnloadObject

---@enum SDL_LogCategory
local SDL_LogCategory = {
    SDL_LOG_CATEGORY_APPLICATION = 0,
    SDL_LOG_CATEGORY_ERROR = 1,
    SDL_LOG_CATEGORY_ASSERT = 2,
    SDL_LOG_CATEGORY_SYSTEM = 3,
    SDL_LOG_CATEGORY_AUDIO = 4,
    SDL_LOG_CATEGORY_VIDEO = 5,
    SDL_LOG_CATEGORY_RENDER = 6,
    SDL_LOG_CATEGORY_INPUT = 7,
    SDL_LOG_CATEGORY_TEST = 8,
    SDL_LOG_CATEGORY_RESERVED1 = 9,
    SDL_LOG_CATEGORY_RESERVED2 = 10,
    SDL_LOG_CATEGORY_RESERVED3 = 11,
    SDL_LOG_CATEGORY_RESERVED4 = 12,
    SDL_LOG_CATEGORY_RESERVED5 = 13,
    SDL_LOG_CATEGORY_RESERVED6 = 14,
    SDL_LOG_CATEGORY_RESERVED7 = 15,
    SDL_LOG_CATEGORY_RESERVED8 = 16,
    SDL_LOG_CATEGORY_RESERVED9 = 17,
    SDL_LOG_CATEGORY_RESERVED10 = 18,
    SDL_LOG_CATEGORY_CUSTOM = 19,
}

sdl.SDL_LOG_CATEGORY_APPLICATION = SDL_LogCategory.SDL_LOG_CATEGORY_APPLICATION
sdl.SDL_LOG_CATEGORY_ERROR = SDL_LogCategory.SDL_LOG_CATEGORY_ERROR
sdl.SDL_LOG_CATEGORY_ASSERT = SDL_LogCategory.SDL_LOG_CATEGORY_ASSERT
sdl.SDL_LOG_CATEGORY_SYSTEM = SDL_LogCategory.SDL_LOG_CATEGORY_SYSTEM
sdl.SDL_LOG_CATEGORY_AUDIO = SDL_LogCategory.SDL_LOG_CATEGORY_AUDIO
sdl.SDL_LOG_CATEGORY_VIDEO = SDL_LogCategory.SDL_LOG_CATEGORY_VIDEO
sdl.SDL_LOG_CATEGORY_RENDER = SDL_LogCategory.SDL_LOG_CATEGORY_RENDER
sdl.SDL_LOG_CATEGORY_INPUT = SDL_LogCategory.SDL_LOG_CATEGORY_INPUT
sdl.SDL_LOG_CATEGORY_TEST = SDL_LogCategory.SDL_LOG_CATEGORY_TEST
sdl.SDL_LOG_CATEGORY_RESERVED1 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED1
sdl.SDL_LOG_CATEGORY_RESERVED2 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED2
sdl.SDL_LOG_CATEGORY_RESERVED3 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED3
sdl.SDL_LOG_CATEGORY_RESERVED4 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED4
sdl.SDL_LOG_CATEGORY_RESERVED5 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED5
sdl.SDL_LOG_CATEGORY_RESERVED6 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED6
sdl.SDL_LOG_CATEGORY_RESERVED7 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED7
sdl.SDL_LOG_CATEGORY_RESERVED8 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED8
sdl.SDL_LOG_CATEGORY_RESERVED9 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED9
sdl.SDL_LOG_CATEGORY_RESERVED10 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED10
sdl.SDL_LOG_CATEGORY_CUSTOM = SDL_LogCategory.SDL_LOG_CATEGORY_CUSTOM

---@class SDL_LogCategory* : ffi.cdata*
---@field [integer] SDL_LogCategory

---@class SDL_LogCategory** : ffi.cdata*
---@field [integer] SDL_LogCategory*

---@enum SDL_LogPriority
local SDL_LogPriority = {
    SDL_LOG_PRIORITY_VERBOSE = 1,
    SDL_LOG_PRIORITY_DEBUG = 2,
    SDL_LOG_PRIORITY_INFO = 3,
    SDL_LOG_PRIORITY_WARN = 4,
    SDL_LOG_PRIORITY_ERROR = 5,
    SDL_LOG_PRIORITY_CRITICAL = 6,
    SDL_NUM_LOG_PRIORITIES = 7,
}

sdl.SDL_LOG_PRIORITY_VERBOSE = SDL_LogPriority.SDL_LOG_PRIORITY_VERBOSE
sdl.SDL_LOG_PRIORITY_DEBUG = SDL_LogPriority.SDL_LOG_PRIORITY_DEBUG
sdl.SDL_LOG_PRIORITY_INFO = SDL_LogPriority.SDL_LOG_PRIORITY_INFO
sdl.SDL_LOG_PRIORITY_WARN = SDL_LogPriority.SDL_LOG_PRIORITY_WARN
sdl.SDL_LOG_PRIORITY_ERROR = SDL_LogPriority.SDL_LOG_PRIORITY_ERROR
sdl.SDL_LOG_PRIORITY_CRITICAL = SDL_LogPriority.SDL_LOG_PRIORITY_CRITICAL
sdl.SDL_NUM_LOG_PRIORITIES = SDL_LogPriority.SDL_NUM_LOG_PRIORITIES

---@class SDL_LogPriority* : ffi.cdata*
---@field [integer] SDL_LogPriority

---@class SDL_LogPriority** : ffi.cdata*
---@field [integer] SDL_LogPriority*

---@param priority SDL_LogPriority
---@return nil
function sdl.LogSetAllPriority(priority) end
sdl.SDL_LogSetAllPriority = sdl.LogSetAllPriority

---@param category integer
---@param priority SDL_LogPriority
---@return nil
function sdl.LogSetPriority(category, priority) end
sdl.SDL_LogSetPriority = sdl.LogSetPriority

---@param category integer
---@return SDL_LogPriority
function sdl.LogGetPriority(category) end
sdl.SDL_LogGetPriority = sdl.LogGetPriority

---@return nil
function sdl.LogResetPriorities() end
sdl.SDL_LogResetPriorities = sdl.LogResetPriorities

---@param fmt string
---@param ... any
---@return nil
function sdl.Log(fmt, ...) end
sdl.SDL_Log = sdl.Log

---@param category integer
---@param fmt string
---@param ... any
---@return nil
function sdl.LogVerbose(category, fmt, ...) end
sdl.SDL_LogVerbose = sdl.LogVerbose

---@param category integer
---@param fmt string
---@param ... any
---@return nil
function sdl.LogDebug(category, fmt, ...) end
sdl.SDL_LogDebug = sdl.LogDebug

---@param category integer
---@param fmt string
---@param ... any
---@return nil
function sdl.LogInfo(category, fmt, ...) end
sdl.SDL_LogInfo = sdl.LogInfo

---@param category integer
---@param fmt string
---@param ... any
---@return nil
function sdl.LogWarn(category, fmt, ...) end
sdl.SDL_LogWarn = sdl.LogWarn

---@param category integer
---@param fmt string
---@param ... any
---@return nil
function sdl.LogError(category, fmt, ...) end
sdl.SDL_LogError = sdl.LogError

---@param category integer
---@param fmt string
---@param ... any
---@return nil
function sdl.LogCritical(category, fmt, ...) end
sdl.SDL_LogCritical = sdl.LogCritical

---@param category integer
---@param priority SDL_LogPriority
---@param fmt string
---@param ... any
---@return nil
function sdl.LogMessage(category, priority, fmt, ...) end
sdl.SDL_LogMessage = sdl.LogMessage

---@param category integer
---@param priority SDL_LogPriority
---@param fmt string
---@param ap va_list
---@return nil
function sdl.LogMessageV(category, priority, fmt, ap) end
sdl.SDL_LogMessageV = sdl.LogMessageV

---@alias SDL_LogOutputFunction fun(arg_0: ffi.cdata*, arg_1: integer, arg_2: SDL_LogPriority, arg_3: string): nil

---@class SDL_LogOutputFunction* : ffi.cdata*
---@field [integer] SDL_LogOutputFunction

---@class SDL_LogOutputFunction** : ffi.cdata*
---@field [integer] SDL_LogOutputFunction*

---@param callback SDL_LogOutputFunction*?
---@param userdata ffi.cdata*?
---@return nil
function sdl.LogGetOutputFunction(callback, userdata) end
sdl.SDL_LogGetOutputFunction = sdl.LogGetOutputFunction

---@param callback SDL_LogOutputFunction
---@param userdata ffi.cdata*
---@return nil
function sdl.LogSetOutputFunction(callback, userdata) end
sdl.SDL_LogSetOutputFunction = sdl.LogSetOutputFunction

---@enum SDL_MessageBoxFlags
local SDL_MessageBoxFlags = {
    SDL_MESSAGEBOX_ERROR = 16,
    SDL_MESSAGEBOX_WARNING = 32,
    SDL_MESSAGEBOX_INFORMATION = 64,
    SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128,
    SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256,
}

sdl.SDL_MESSAGEBOX_ERROR = SDL_MessageBoxFlags.SDL_MESSAGEBOX_ERROR
sdl.SDL_MESSAGEBOX_WARNING = SDL_MessageBoxFlags.SDL_MESSAGEBOX_WARNING
sdl.SDL_MESSAGEBOX_INFORMATION = SDL_MessageBoxFlags.SDL_MESSAGEBOX_INFORMATION
sdl.SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = SDL_MessageBoxFlags.SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT
sdl.SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = SDL_MessageBoxFlags.SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT

---@class SDL_MessageBoxFlags* : ffi.cdata*
---@field [integer] SDL_MessageBoxFlags

---@class SDL_MessageBoxFlags** : ffi.cdata*
---@field [integer] SDL_MessageBoxFlags*

---@enum SDL_MessageBoxButtonFlags
local SDL_MessageBoxButtonFlags = {
    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1,
    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2,
}

sdl.SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
sdl.SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT

---@class SDL_MessageBoxButtonFlags* : ffi.cdata*
---@field [integer] SDL_MessageBoxButtonFlags

---@class SDL_MessageBoxButtonFlags** : ffi.cdata*
---@field [integer] SDL_MessageBoxButtonFlags*

---@class SDL_MessageBoxButtonData
---@field flags Uint32
---@field buttonid integer
---@field text string

---@class SDL_MessageBoxButtonData* : ffi.cdata*
---@field [integer] SDL_MessageBoxButtonData

---@class SDL_MessageBoxButtonData** : ffi.cdata*
---@field [integer] SDL_MessageBoxButtonData*

---@class SDL_MessageBoxColor
---@field r Uint8
---@field g Uint8
---@field b Uint8

---@class SDL_MessageBoxColor* : ffi.cdata*
---@field [integer] SDL_MessageBoxColor

---@class SDL_MessageBoxColor** : ffi.cdata*
---@field [integer] SDL_MessageBoxColor*

---@enum SDL_MessageBoxColorType
local SDL_MessageBoxColorType = {
    SDL_MESSAGEBOX_COLOR_BACKGROUND = 0,
    SDL_MESSAGEBOX_COLOR_TEXT = 1,
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
    SDL_MESSAGEBOX_COLOR_MAX = 5,
}

sdl.SDL_MESSAGEBOX_COLOR_BACKGROUND = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BACKGROUND
sdl.SDL_MESSAGEBOX_COLOR_TEXT = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_TEXT
sdl.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER
sdl.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND
sdl.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED
sdl.SDL_MESSAGEBOX_COLOR_MAX = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_MAX

---@class SDL_MessageBoxColorType* : ffi.cdata*
---@field [integer] SDL_MessageBoxColorType

---@class SDL_MessageBoxColorType** : ffi.cdata*
---@field [integer] SDL_MessageBoxColorType*

---@class SDL_MessageBoxColorScheme
---@field colors SDL_MessageBoxColor[]

---@class SDL_MessageBoxColorScheme* : ffi.cdata*
---@field [integer] SDL_MessageBoxColorScheme

---@class SDL_MessageBoxColorScheme** : ffi.cdata*
---@field [integer] SDL_MessageBoxColorScheme*

---@class SDL_MessageBoxData
---@field flags Uint32
---@field window SDL_Window*?
---@field title string
---@field message string
---@field numbuttons integer
---@field buttons SDL_MessageBoxButtonData*?
---@field colorScheme SDL_MessageBoxColorScheme*?

---@class SDL_MessageBoxData* : ffi.cdata*
---@field [integer] SDL_MessageBoxData

---@class SDL_MessageBoxData** : ffi.cdata*
---@field [integer] SDL_MessageBoxData*

---@param messageboxdata SDL_MessageBoxData*?
---@param buttonid integer*?
---@return integer
function sdl.ShowMessageBox(messageboxdata, buttonid) end
sdl.SDL_ShowMessageBox = sdl.ShowMessageBox

---@param flags Uint32
---@param title string
---@param message string
---@param window SDL_Window*?
---@return integer
function sdl.ShowSimpleMessageBox(flags, title, message, window) end
sdl.SDL_ShowSimpleMessageBox = sdl.ShowSimpleMessageBox

---@alias SDL_MetalView ffi.cdata*

---@class SDL_MetalView* : ffi.cdata*
---@field [integer] SDL_MetalView

---@class SDL_MetalView** : ffi.cdata*
---@field [integer] SDL_MetalView*

---@param window SDL_Window*?
---@return SDL_MetalView
function sdl.Metal_CreateView(window) end
sdl.SDL_Metal_CreateView = sdl.Metal_CreateView

---@param view SDL_MetalView
---@return nil
function sdl.Metal_DestroyView(view) end
sdl.SDL_Metal_DestroyView = sdl.Metal_DestroyView

---@param view SDL_MetalView
---@return ffi.cdata*
function sdl.Metal_GetLayer(view) end
sdl.SDL_Metal_GetLayer = sdl.Metal_GetLayer

---@param window SDL_Window*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.Metal_GetDrawableSize(window, w, h) end
sdl.SDL_Metal_GetDrawableSize = sdl.Metal_GetDrawableSize

---@enum SDL_PowerState
local SDL_PowerState = {
    SDL_POWERSTATE_UNKNOWN = 0,
    SDL_POWERSTATE_ON_BATTERY = 1,
    SDL_POWERSTATE_NO_BATTERY = 2,
    SDL_POWERSTATE_CHARGING = 3,
    SDL_POWERSTATE_CHARGED = 4,
}

sdl.SDL_POWERSTATE_UNKNOWN = SDL_PowerState.SDL_POWERSTATE_UNKNOWN
sdl.SDL_POWERSTATE_ON_BATTERY = SDL_PowerState.SDL_POWERSTATE_ON_BATTERY
sdl.SDL_POWERSTATE_NO_BATTERY = SDL_PowerState.SDL_POWERSTATE_NO_BATTERY
sdl.SDL_POWERSTATE_CHARGING = SDL_PowerState.SDL_POWERSTATE_CHARGING
sdl.SDL_POWERSTATE_CHARGED = SDL_PowerState.SDL_POWERSTATE_CHARGED

---@class SDL_PowerState* : ffi.cdata*
---@field [integer] SDL_PowerState

---@class SDL_PowerState** : ffi.cdata*
---@field [integer] SDL_PowerState*

---@param seconds integer*?
---@param percent integer*?
---@return SDL_PowerState
function sdl.GetPowerInfo(seconds, percent) end
sdl.SDL_GetPowerInfo = sdl.GetPowerInfo

---@enum SDL_RendererFlags
local SDL_RendererFlags = {
    SDL_RENDERER_SOFTWARE = 1,
    SDL_RENDERER_ACCELERATED = 2,
    SDL_RENDERER_PRESENTVSYNC = 4,
    SDL_RENDERER_TARGETTEXTURE = 8,
}

sdl.SDL_RENDERER_SOFTWARE = SDL_RendererFlags.SDL_RENDERER_SOFTWARE
sdl.SDL_RENDERER_ACCELERATED = SDL_RendererFlags.SDL_RENDERER_ACCELERATED
sdl.SDL_RENDERER_PRESENTVSYNC = SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC
sdl.SDL_RENDERER_TARGETTEXTURE = SDL_RendererFlags.SDL_RENDERER_TARGETTEXTURE

---@class SDL_RendererFlags* : ffi.cdata*
---@field [integer] SDL_RendererFlags

---@class SDL_RendererFlags** : ffi.cdata*
---@field [integer] SDL_RendererFlags*

---@class SDL_RendererInfo
---@field name string
---@field flags Uint32
---@field num_texture_formats Uint32
---@field texture_formats Uint32[]
---@field max_texture_width integer
---@field max_texture_height integer

---@class SDL_RendererInfo* : ffi.cdata*
---@field [integer] SDL_RendererInfo

---@class SDL_RendererInfo** : ffi.cdata*
---@field [integer] SDL_RendererInfo*

---@class SDL_Vertex
---@field position SDL_FPoint
---@field color SDL_Color
---@field tex_coord SDL_FPoint

---@class SDL_Vertex* : ffi.cdata*
---@field [integer] SDL_Vertex

---@class SDL_Vertex** : ffi.cdata*
---@field [integer] SDL_Vertex*

---@enum SDL_ScaleMode
local SDL_ScaleMode = {
    SDL_ScaleModeNearest = 0,
    SDL_ScaleModeLinear = 1,
    SDL_ScaleModeBest = 2,
}

sdl.SDL_ScaleModeNearest = SDL_ScaleMode.SDL_ScaleModeNearest
sdl.SDL_ScaleModeLinear = SDL_ScaleMode.SDL_ScaleModeLinear
sdl.SDL_ScaleModeBest = SDL_ScaleMode.SDL_ScaleModeBest

---@class SDL_ScaleMode* : ffi.cdata*
---@field [integer] SDL_ScaleMode

---@class SDL_ScaleMode** : ffi.cdata*
---@field [integer] SDL_ScaleMode*

---@enum SDL_TextureAccess
local SDL_TextureAccess = {
    SDL_TEXTUREACCESS_STATIC = 0,
    SDL_TEXTUREACCESS_STREAMING = 1,
    SDL_TEXTUREACCESS_TARGET = 2,
}

sdl.SDL_TEXTUREACCESS_STATIC = SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC
sdl.SDL_TEXTUREACCESS_STREAMING = SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING
sdl.SDL_TEXTUREACCESS_TARGET = SDL_TextureAccess.SDL_TEXTUREACCESS_TARGET

---@class SDL_TextureAccess* : ffi.cdata*
---@field [integer] SDL_TextureAccess

---@class SDL_TextureAccess** : ffi.cdata*
---@field [integer] SDL_TextureAccess*

---@enum SDL_TextureModulate
local SDL_TextureModulate = {
    SDL_TEXTUREMODULATE_NONE = 0,
    SDL_TEXTUREMODULATE_COLOR = 1,
    SDL_TEXTUREMODULATE_ALPHA = 2,
}

sdl.SDL_TEXTUREMODULATE_NONE = SDL_TextureModulate.SDL_TEXTUREMODULATE_NONE
sdl.SDL_TEXTUREMODULATE_COLOR = SDL_TextureModulate.SDL_TEXTUREMODULATE_COLOR
sdl.SDL_TEXTUREMODULATE_ALPHA = SDL_TextureModulate.SDL_TEXTUREMODULATE_ALPHA

---@class SDL_TextureModulate* : ffi.cdata*
---@field [integer] SDL_TextureModulate

---@class SDL_TextureModulate** : ffi.cdata*
---@field [integer] SDL_TextureModulate*

---@enum SDL_RendererFlip
local SDL_RendererFlip = {
    SDL_FLIP_NONE = 0,
    SDL_FLIP_HORIZONTAL = 1,
    SDL_FLIP_VERTICAL = 2,
}

sdl.SDL_FLIP_NONE = SDL_RendererFlip.SDL_FLIP_NONE
sdl.SDL_FLIP_HORIZONTAL = SDL_RendererFlip.SDL_FLIP_HORIZONTAL
sdl.SDL_FLIP_VERTICAL = SDL_RendererFlip.SDL_FLIP_VERTICAL

---@class SDL_RendererFlip* : ffi.cdata*
---@field [integer] SDL_RendererFlip

---@class SDL_RendererFlip** : ffi.cdata*
---@field [integer] SDL_RendererFlip*

---@class SDL_Renderer

---@class SDL_Renderer* : ffi.cdata*
---@field [integer] SDL_Renderer

---@class SDL_Renderer** : ffi.cdata*
---@field [integer] SDL_Renderer*

---@class SDL_Texture

---@class SDL_Texture* : ffi.cdata*
---@field [integer] SDL_Texture

---@class SDL_Texture** : ffi.cdata*
---@field [integer] SDL_Texture*

---@return integer
function sdl.GetNumRenderDrivers() end
sdl.SDL_GetNumRenderDrivers = sdl.GetNumRenderDrivers

---@param index integer
---@param info SDL_RendererInfo*?
---@return integer
function sdl.GetRenderDriverInfo(index, info) end
sdl.SDL_GetRenderDriverInfo = sdl.GetRenderDriverInfo

---@param width integer
---@param height integer
---@param window_flags Uint32
---@param window SDL_Window*?*?
---@param renderer SDL_Renderer*?*?
---@return integer
function sdl.CreateWindowAndRenderer(width, height, window_flags, window, renderer) end
sdl.SDL_CreateWindowAndRenderer = sdl.CreateWindowAndRenderer

---@param window SDL_Window*?
---@param index integer
---@param flags Uint32
---@return SDL_Renderer*?
function sdl.CreateRenderer(window, index, flags) end
sdl.SDL_CreateRenderer = sdl.CreateRenderer

---@param surface SDL_Surface*?
---@return SDL_Renderer*?
function sdl.CreateSoftwareRenderer(surface) end
sdl.SDL_CreateSoftwareRenderer = sdl.CreateSoftwareRenderer

---@param window SDL_Window*?
---@return SDL_Renderer*?
function sdl.GetRenderer(window) end
sdl.SDL_GetRenderer = sdl.GetRenderer

---@param renderer SDL_Renderer*?
---@return SDL_Window*?
function sdl.RenderGetWindow(renderer) end
sdl.SDL_RenderGetWindow = sdl.RenderGetWindow

---@param renderer SDL_Renderer*?
---@param info SDL_RendererInfo*?
---@return integer
function sdl.GetRendererInfo(renderer, info) end
sdl.SDL_GetRendererInfo = sdl.GetRendererInfo

---@param renderer SDL_Renderer*?
---@param w integer*?
---@param h integer*?
---@return integer
function sdl.GetRendererOutputSize(renderer, w, h) end
sdl.SDL_GetRendererOutputSize = sdl.GetRendererOutputSize

---@param renderer SDL_Renderer*?
---@param format Uint32
---@param access integer
---@param w integer
---@param h integer
---@return SDL_Texture*?
function sdl.CreateTexture(renderer, format, access, w, h) end
sdl.SDL_CreateTexture = sdl.CreateTexture

---@param renderer SDL_Renderer*?
---@param surface SDL_Surface*?
---@return SDL_Texture*?
function sdl.CreateTextureFromSurface(renderer, surface) end
sdl.SDL_CreateTextureFromSurface = sdl.CreateTextureFromSurface

---@param texture SDL_Texture*?
---@param format Uint32*?
---@param access integer*?
---@param w integer*?
---@param h integer*?
---@return integer
function sdl.QueryTexture(texture, format, access, w, h) end
sdl.SDL_QueryTexture = sdl.QueryTexture

---@param texture SDL_Texture*?
---@param r Uint8
---@param g Uint8
---@param b Uint8
---@return integer
function sdl.SetTextureColorMod(texture, r, g, b) end
sdl.SDL_SetTextureColorMod = sdl.SetTextureColorMod

---@param texture SDL_Texture*?
---@param r Uint8*?
---@param g Uint8*?
---@param b Uint8*?
---@return integer
function sdl.GetTextureColorMod(texture, r, g, b) end
sdl.SDL_GetTextureColorMod = sdl.GetTextureColorMod

---@param texture SDL_Texture*?
---@param alpha Uint8
---@return integer
function sdl.SetTextureAlphaMod(texture, alpha) end
sdl.SDL_SetTextureAlphaMod = sdl.SetTextureAlphaMod

---@param texture SDL_Texture*?
---@param alpha Uint8*?
---@return integer
function sdl.GetTextureAlphaMod(texture, alpha) end
sdl.SDL_GetTextureAlphaMod = sdl.GetTextureAlphaMod

---@param texture SDL_Texture*?
---@param blendMode SDL_BlendMode
---@return integer
function sdl.SetTextureBlendMode(texture, blendMode) end
sdl.SDL_SetTextureBlendMode = sdl.SetTextureBlendMode

---@param texture SDL_Texture*?
---@param blendMode SDL_BlendMode*?
---@return integer
function sdl.GetTextureBlendMode(texture, blendMode) end
sdl.SDL_GetTextureBlendMode = sdl.GetTextureBlendMode

---@param texture SDL_Texture*?
---@param scaleMode SDL_ScaleMode
---@return integer
function sdl.SetTextureScaleMode(texture, scaleMode) end
sdl.SDL_SetTextureScaleMode = sdl.SetTextureScaleMode

---@param texture SDL_Texture*?
---@param scaleMode SDL_ScaleMode*?
---@return integer
function sdl.GetTextureScaleMode(texture, scaleMode) end
sdl.SDL_GetTextureScaleMode = sdl.GetTextureScaleMode

---@param texture SDL_Texture*?
---@param userdata ffi.cdata*
---@return integer
function sdl.SetTextureUserData(texture, userdata) end
sdl.SDL_SetTextureUserData = sdl.SetTextureUserData

---@param texture SDL_Texture*?
---@return ffi.cdata*
function sdl.GetTextureUserData(texture) end
sdl.SDL_GetTextureUserData = sdl.GetTextureUserData

---@param texture SDL_Texture*?
---@param rect SDL_Rect*?
---@param pixels ffi.cdata*
---@param pitch integer
---@return integer
function sdl.UpdateTexture(texture, rect, pixels, pitch) end
sdl.SDL_UpdateTexture = sdl.UpdateTexture

---@param texture SDL_Texture*?
---@param rect SDL_Rect*?
---@param Yplane Uint8*?
---@param Ypitch integer
---@param Uplane Uint8*?
---@param Upitch integer
---@param Vplane Uint8*?
---@param Vpitch integer
---@return integer
function sdl.UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch) end
sdl.SDL_UpdateYUVTexture = sdl.UpdateYUVTexture

---@param texture SDL_Texture*?
---@param rect SDL_Rect*?
---@param Yplane Uint8*?
---@param Ypitch integer
---@param UVplane Uint8*?
---@param UVpitch integer
---@return integer
function sdl.UpdateNVTexture(texture, rect, Yplane, Ypitch, UVplane, UVpitch) end
sdl.SDL_UpdateNVTexture = sdl.UpdateNVTexture

---@param texture SDL_Texture*?
---@param rect SDL_Rect*?
---@param pixels ffi.cdata*?
---@param pitch integer*?
---@return integer
function sdl.LockTexture(texture, rect, pixels, pitch) end
sdl.SDL_LockTexture = sdl.LockTexture

---@param texture SDL_Texture*?
---@param rect SDL_Rect*?
---@param surface SDL_Surface*?*?
---@return integer
function sdl.LockTextureToSurface(texture, rect, surface) end
sdl.SDL_LockTextureToSurface = sdl.LockTextureToSurface

---@param texture SDL_Texture*?
---@return nil
function sdl.UnlockTexture(texture) end
sdl.SDL_UnlockTexture = sdl.UnlockTexture

---@param renderer SDL_Renderer*?
---@return SDL_bool
function sdl.RenderTargetSupported(renderer) end
sdl.SDL_RenderTargetSupported = sdl.RenderTargetSupported

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@return integer
function sdl.SetRenderTarget(renderer, texture) end
sdl.SDL_SetRenderTarget = sdl.SetRenderTarget

---@param renderer SDL_Renderer*?
---@return SDL_Texture*?
function sdl.GetRenderTarget(renderer) end
sdl.SDL_GetRenderTarget = sdl.GetRenderTarget

---@param renderer SDL_Renderer*?
---@param w integer
---@param h integer
---@return integer
function sdl.RenderSetLogicalSize(renderer, w, h) end
sdl.SDL_RenderSetLogicalSize = sdl.RenderSetLogicalSize

---@param renderer SDL_Renderer*?
---@param w integer*?
---@param h integer*?
---@return nil
function sdl.RenderGetLogicalSize(renderer, w, h) end
sdl.SDL_RenderGetLogicalSize = sdl.RenderGetLogicalSize

---@param renderer SDL_Renderer*?
---@param enable SDL_bool
---@return integer
function sdl.RenderSetIntegerScale(renderer, enable) end
sdl.SDL_RenderSetIntegerScale = sdl.RenderSetIntegerScale

---@param renderer SDL_Renderer*?
---@return SDL_bool
function sdl.RenderGetIntegerScale(renderer) end
sdl.SDL_RenderGetIntegerScale = sdl.RenderGetIntegerScale

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@return integer
function sdl.RenderSetViewport(renderer, rect) end
sdl.SDL_RenderSetViewport = sdl.RenderSetViewport

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@return nil
function sdl.RenderGetViewport(renderer, rect) end
sdl.SDL_RenderGetViewport = sdl.RenderGetViewport

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@return integer
function sdl.RenderSetClipRect(renderer, rect) end
sdl.SDL_RenderSetClipRect = sdl.RenderSetClipRect

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@return nil
function sdl.RenderGetClipRect(renderer, rect) end
sdl.SDL_RenderGetClipRect = sdl.RenderGetClipRect

---@param renderer SDL_Renderer*?
---@return SDL_bool
function sdl.RenderIsClipEnabled(renderer) end
sdl.SDL_RenderIsClipEnabled = sdl.RenderIsClipEnabled

---@param renderer SDL_Renderer*?
---@param scaleX number
---@param scaleY number
---@return integer
function sdl.RenderSetScale(renderer, scaleX, scaleY) end
sdl.SDL_RenderSetScale = sdl.RenderSetScale

---@param renderer SDL_Renderer*?
---@param scaleX number*?
---@param scaleY number*?
---@return nil
function sdl.RenderGetScale(renderer, scaleX, scaleY) end
sdl.SDL_RenderGetScale = sdl.RenderGetScale

---@param renderer SDL_Renderer*?
---@param windowX integer
---@param windowY integer
---@param logicalX number*?
---@param logicalY number*?
---@return nil
function sdl.RenderWindowToLogical(renderer, windowX, windowY, logicalX, logicalY) end
sdl.SDL_RenderWindowToLogical = sdl.RenderWindowToLogical

---@param renderer SDL_Renderer*?
---@param logicalX number
---@param logicalY number
---@param windowX integer*?
---@param windowY integer*?
---@return nil
function sdl.RenderLogicalToWindow(renderer, logicalX, logicalY, windowX, windowY) end
sdl.SDL_RenderLogicalToWindow = sdl.RenderLogicalToWindow

---@param renderer SDL_Renderer*?
---@param r Uint8
---@param g Uint8
---@param b Uint8
---@param a Uint8
---@return integer
function sdl.SetRenderDrawColor(renderer, r, g, b, a) end
sdl.SDL_SetRenderDrawColor = sdl.SetRenderDrawColor

---@param renderer SDL_Renderer*?
---@param r Uint8*?
---@param g Uint8*?
---@param b Uint8*?
---@param a Uint8*?
---@return integer
function sdl.GetRenderDrawColor(renderer, r, g, b, a) end
sdl.SDL_GetRenderDrawColor = sdl.GetRenderDrawColor

---@param renderer SDL_Renderer*?
---@param blendMode SDL_BlendMode
---@return integer
function sdl.SetRenderDrawBlendMode(renderer, blendMode) end
sdl.SDL_SetRenderDrawBlendMode = sdl.SetRenderDrawBlendMode

---@param renderer SDL_Renderer*?
---@param blendMode SDL_BlendMode*?
---@return integer
function sdl.GetRenderDrawBlendMode(renderer, blendMode) end
sdl.SDL_GetRenderDrawBlendMode = sdl.GetRenderDrawBlendMode

---@param renderer SDL_Renderer*?
---@return integer
function sdl.RenderClear(renderer) end
sdl.SDL_RenderClear = sdl.RenderClear

---@param renderer SDL_Renderer*?
---@param x integer
---@param y integer
---@return integer
function sdl.RenderDrawPoint(renderer, x, y) end
sdl.SDL_RenderDrawPoint = sdl.RenderDrawPoint

---@param renderer SDL_Renderer*?
---@param points SDL_Point*?
---@param count integer
---@return integer
function sdl.RenderDrawPoints(renderer, points, count) end
sdl.SDL_RenderDrawPoints = sdl.RenderDrawPoints

---@param renderer SDL_Renderer*?
---@param x1 integer
---@param y1 integer
---@param x2 integer
---@param y2 integer
---@return integer
function sdl.RenderDrawLine(renderer, x1, y1, x2, y2) end
sdl.SDL_RenderDrawLine = sdl.RenderDrawLine

---@param renderer SDL_Renderer*?
---@param points SDL_Point*?
---@param count integer
---@return integer
function sdl.RenderDrawLines(renderer, points, count) end
sdl.SDL_RenderDrawLines = sdl.RenderDrawLines

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@return integer
function sdl.RenderDrawRect(renderer, rect) end
sdl.SDL_RenderDrawRect = sdl.RenderDrawRect

---@param renderer SDL_Renderer*?
---@param rects SDL_Rect*?
---@param count integer
---@return integer
function sdl.RenderDrawRects(renderer, rects, count) end
sdl.SDL_RenderDrawRects = sdl.RenderDrawRects

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@return integer
function sdl.RenderFillRect(renderer, rect) end
sdl.SDL_RenderFillRect = sdl.RenderFillRect

---@param renderer SDL_Renderer*?
---@param rects SDL_Rect*?
---@param count integer
---@return integer
function sdl.RenderFillRects(renderer, rects, count) end
sdl.SDL_RenderFillRects = sdl.RenderFillRects

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@param srcrect SDL_Rect*?
---@param dstrect SDL_Rect*?
---@return integer
function sdl.RenderCopy(renderer, texture, srcrect, dstrect) end
sdl.SDL_RenderCopy = sdl.RenderCopy

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@param srcrect SDL_Rect*?
---@param dstrect SDL_Rect*?
---@param angle number
---@param center SDL_Point*?
---@param flip SDL_RendererFlip
---@return integer
function sdl.RenderCopyEx(renderer, texture, srcrect, dstrect, angle, center, flip) end
sdl.SDL_RenderCopyEx = sdl.RenderCopyEx

---@param renderer SDL_Renderer*?
---@param x number
---@param y number
---@return integer
function sdl.RenderDrawPointF(renderer, x, y) end
sdl.SDL_RenderDrawPointF = sdl.RenderDrawPointF

---@param renderer SDL_Renderer*?
---@param points SDL_FPoint*?
---@param count integer
---@return integer
function sdl.RenderDrawPointsF(renderer, points, count) end
sdl.SDL_RenderDrawPointsF = sdl.RenderDrawPointsF

---@param renderer SDL_Renderer*?
---@param x1 number
---@param y1 number
---@param x2 number
---@param y2 number
---@return integer
function sdl.RenderDrawLineF(renderer, x1, y1, x2, y2) end
sdl.SDL_RenderDrawLineF = sdl.RenderDrawLineF

---@param renderer SDL_Renderer*?
---@param points SDL_FPoint*?
---@param count integer
---@return integer
function sdl.RenderDrawLinesF(renderer, points, count) end
sdl.SDL_RenderDrawLinesF = sdl.RenderDrawLinesF

---@param renderer SDL_Renderer*?
---@param rect SDL_FRect*?
---@return integer
function sdl.RenderDrawRectF(renderer, rect) end
sdl.SDL_RenderDrawRectF = sdl.RenderDrawRectF

---@param renderer SDL_Renderer*?
---@param rects SDL_FRect*?
---@param count integer
---@return integer
function sdl.RenderDrawRectsF(renderer, rects, count) end
sdl.SDL_RenderDrawRectsF = sdl.RenderDrawRectsF

---@param renderer SDL_Renderer*?
---@param rect SDL_FRect*?
---@return integer
function sdl.RenderFillRectF(renderer, rect) end
sdl.SDL_RenderFillRectF = sdl.RenderFillRectF

---@param renderer SDL_Renderer*?
---@param rects SDL_FRect*?
---@param count integer
---@return integer
function sdl.RenderFillRectsF(renderer, rects, count) end
sdl.SDL_RenderFillRectsF = sdl.RenderFillRectsF

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@param srcrect SDL_Rect*?
---@param dstrect SDL_FRect*?
---@return integer
function sdl.RenderCopyF(renderer, texture, srcrect, dstrect) end
sdl.SDL_RenderCopyF = sdl.RenderCopyF

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@param srcrect SDL_Rect*?
---@param dstrect SDL_FRect*?
---@param angle number
---@param center SDL_FPoint*?
---@param flip SDL_RendererFlip
---@return integer
function sdl.RenderCopyExF(renderer, texture, srcrect, dstrect, angle, center, flip) end
sdl.SDL_RenderCopyExF = sdl.RenderCopyExF

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@param vertices SDL_Vertex*?
---@param num_vertices integer
---@param indices integer*?
---@param num_indices integer
---@return integer
function sdl.RenderGeometry(renderer, texture, vertices, num_vertices, indices, num_indices) end
sdl.SDL_RenderGeometry = sdl.RenderGeometry

---@param renderer SDL_Renderer*?
---@param texture SDL_Texture*?
---@param xy number*?
---@param xy_stride integer
---@param color SDL_Color*?
---@param color_stride integer
---@param uv number*?
---@param uv_stride integer
---@param num_vertices integer
---@param indices ffi.cdata*
---@param num_indices integer
---@param size_indices integer
---@return integer
function sdl.RenderGeometryRaw(renderer, texture, xy, xy_stride, color, color_stride, uv, uv_stride, num_vertices, indices, num_indices, size_indices) end
sdl.SDL_RenderGeometryRaw = sdl.RenderGeometryRaw

---@param renderer SDL_Renderer*?
---@param rect SDL_Rect*?
---@param format Uint32
---@param pixels ffi.cdata*
---@param pitch integer
---@return integer
function sdl.RenderReadPixels(renderer, rect, format, pixels, pitch) end
sdl.SDL_RenderReadPixels = sdl.RenderReadPixels

---@param renderer SDL_Renderer*?
---@return nil
function sdl.RenderPresent(renderer) end
sdl.SDL_RenderPresent = sdl.RenderPresent

---@param texture SDL_Texture*?
---@return nil
function sdl.DestroyTexture(texture) end
sdl.SDL_DestroyTexture = sdl.DestroyTexture

---@param renderer SDL_Renderer*?
---@return nil
function sdl.DestroyRenderer(renderer) end
sdl.SDL_DestroyRenderer = sdl.DestroyRenderer

---@param renderer SDL_Renderer*?
---@return integer
function sdl.RenderFlush(renderer) end
sdl.SDL_RenderFlush = sdl.RenderFlush

---@param texture SDL_Texture*?
---@param texw number*?
---@param texh number*?
---@return integer
function sdl.GL_BindTexture(texture, texw, texh) end
sdl.SDL_GL_BindTexture = sdl.GL_BindTexture

---@param texture SDL_Texture*?
---@return integer
function sdl.GL_UnbindTexture(texture) end
sdl.SDL_GL_UnbindTexture = sdl.GL_UnbindTexture

---@param renderer SDL_Renderer*?
---@return ffi.cdata*
function sdl.RenderGetMetalLayer(renderer) end
sdl.SDL_RenderGetMetalLayer = sdl.RenderGetMetalLayer

---@param renderer SDL_Renderer*?
---@return ffi.cdata*
function sdl.RenderGetMetalCommandEncoder(renderer) end
sdl.SDL_RenderGetMetalCommandEncoder = sdl.RenderGetMetalCommandEncoder

---@param renderer SDL_Renderer*?
---@param vsync integer
---@return integer
function sdl.RenderSetVSync(renderer, vsync) end
sdl.SDL_RenderSetVSync = sdl.RenderSetVSync

---@param title string
---@param x integer
---@param y integer
---@param w integer
---@param h integer
---@param flags Uint32
---@return SDL_Window*?
function sdl.CreateShapedWindow(title, x, y, w, h, flags) end
sdl.SDL_CreateShapedWindow = sdl.CreateShapedWindow

---@param window SDL_Window*?
---@return SDL_bool
function sdl.IsShapedWindow(window) end
sdl.SDL_IsShapedWindow = sdl.IsShapedWindow

---@enum WindowShapeMode
local WindowShapeMode = {
    ShapeModeDefault = 0,
    ShapeModeBinarizeAlpha = 1,
    ShapeModeReverseBinarizeAlpha = 2,
    ShapeModeColorKey = 3,
}

sdl.ShapeModeDefault = WindowShapeMode.ShapeModeDefault
sdl.ShapeModeBinarizeAlpha = WindowShapeMode.ShapeModeBinarizeAlpha
sdl.ShapeModeReverseBinarizeAlpha = WindowShapeMode.ShapeModeReverseBinarizeAlpha
sdl.ShapeModeColorKey = WindowShapeMode.ShapeModeColorKey

---@class WindowShapeMode* : ffi.cdata*
---@field [integer] WindowShapeMode

---@class WindowShapeMode** : ffi.cdata*
---@field [integer] WindowShapeMode*

---@class SDL_WindowShapeMode
---@field mode WindowShapeMode
---@field parameters SDL_WindowShapeParams

---@class SDL_WindowShapeMode* : ffi.cdata*
---@field [integer] SDL_WindowShapeMode

---@class SDL_WindowShapeMode** : ffi.cdata*
---@field [integer] SDL_WindowShapeMode*

---@param window SDL_Window*?
---@param shape SDL_Surface*?
---@param shape_mode SDL_WindowShapeMode*?
---@return integer
function sdl.SetWindowShape(window, shape, shape_mode) end
sdl.SDL_SetWindowShape = sdl.SetWindowShape

---@param window SDL_Window*?
---@param shape_mode SDL_WindowShapeMode*?
---@return integer
function sdl.GetShapedWindowMode(window, shape_mode) end
sdl.SDL_GetShapedWindowMode = sdl.GetShapedWindowMode

---@return SDL_bool
function sdl.IsTablet() end
sdl.SDL_IsTablet = sdl.IsTablet

---@return nil
function sdl.OnApplicationWillTerminate() end
sdl.SDL_OnApplicationWillTerminate = sdl.OnApplicationWillTerminate

---@return nil
function sdl.OnApplicationDidReceiveMemoryWarning() end
sdl.SDL_OnApplicationDidReceiveMemoryWarning = sdl.OnApplicationDidReceiveMemoryWarning

---@return nil
function sdl.OnApplicationWillResignActive() end
sdl.SDL_OnApplicationWillResignActive = sdl.OnApplicationWillResignActive

---@return nil
function sdl.OnApplicationDidEnterBackground() end
sdl.SDL_OnApplicationDidEnterBackground = sdl.OnApplicationDidEnterBackground

---@return nil
function sdl.OnApplicationWillEnterForeground() end
sdl.SDL_OnApplicationWillEnterForeground = sdl.OnApplicationWillEnterForeground

---@return nil
function sdl.OnApplicationDidBecomeActive() end
sdl.SDL_OnApplicationDidBecomeActive = sdl.OnApplicationDidBecomeActive

---@return Uint32
function sdl.GetTicks() end
sdl.SDL_GetTicks = sdl.GetTicks

---@return Uint64
function sdl.GetTicks64() end
sdl.SDL_GetTicks64 = sdl.GetTicks64

---@return Uint64
function sdl.GetPerformanceCounter() end
sdl.SDL_GetPerformanceCounter = sdl.GetPerformanceCounter

---@return Uint64
function sdl.GetPerformanceFrequency() end
sdl.SDL_GetPerformanceFrequency = sdl.GetPerformanceFrequency

---@param ms Uint32
---@return nil
function sdl.Delay(ms) end
sdl.SDL_Delay = sdl.Delay

---@alias SDL_TimerCallback fun(arg_0: Uint32, arg_1: ffi.cdata*): Uint32

---@class SDL_TimerCallback* : ffi.cdata*
---@field [integer] SDL_TimerCallback

---@class SDL_TimerCallback** : ffi.cdata*
---@field [integer] SDL_TimerCallback*

---@alias SDL_TimerID integer

---@class SDL_TimerID* : ffi.cdata*
---@field [integer] SDL_TimerID

---@class SDL_TimerID** : ffi.cdata*
---@field [integer] SDL_TimerID*

---@param interval Uint32
---@param callback SDL_TimerCallback
---@param param ffi.cdata*
---@return SDL_TimerID
function sdl.AddTimer(interval, callback, param) end
sdl.SDL_AddTimer = sdl.AddTimer

---@param id SDL_TimerID
---@return SDL_bool
function sdl.RemoveTimer(id) end
sdl.SDL_RemoveTimer = sdl.RemoveTimer

---@class SDL_version
---@field major Uint8
---@field minor Uint8
---@field patch Uint8

---@class SDL_version* : ffi.cdata*
---@field [integer] SDL_version

---@class SDL_version** : ffi.cdata*
---@field [integer] SDL_version*

---@param ver SDL_version*?
---@return nil
function sdl.GetVersion(ver) end
sdl.SDL_GetVersion = sdl.GetVersion

---@return string
function sdl.GetRevision() end
sdl.SDL_GetRevision = sdl.GetRevision

---@return integer
function sdl.GetRevisionNumber() end
sdl.SDL_GetRevisionNumber = sdl.GetRevisionNumber

---@class SDL_Locale
---@field language string
---@field country string

---@class SDL_Locale* : ffi.cdata*
---@field [integer] SDL_Locale

---@class SDL_Locale** : ffi.cdata*
---@field [integer] SDL_Locale*

---@return SDL_Locale*?
function sdl.GetPreferredLocales() end
sdl.SDL_GetPreferredLocales = sdl.GetPreferredLocales

---@param url string
---@return integer
function sdl.OpenURL(url) end
sdl.SDL_OpenURL = sdl.OpenURL

---@param flags Uint32
---@return integer
function sdl.Init(flags) end
sdl.SDL_Init = sdl.Init

---@param flags Uint32
---@return integer
function sdl.InitSubSystem(flags) end
sdl.SDL_InitSubSystem = sdl.InitSubSystem

---@param flags Uint32
---@return nil
function sdl.QuitSubSystem(flags) end
sdl.SDL_QuitSubSystem = sdl.QuitSubSystem

---@param flags Uint32
---@return Uint32
function sdl.WasInit(flags) end
sdl.SDL_WasInit = sdl.WasInit

---@return nil
function sdl.Quit() end
sdl.SDL_Quit = sdl.Quit

return sdl
